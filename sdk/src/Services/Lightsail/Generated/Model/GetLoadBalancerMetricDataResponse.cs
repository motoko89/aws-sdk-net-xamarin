/*
 * Copyright 2010-2014 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 * 
 *  http://aws.amazon.com/apache2.0
 * 
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

/*
 * Do not modify this file. This file is generated from the lightsail-2016-11-28.normal.json service model.
 */
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using System.Text;
using System.IO;
using System.Net;

using Amazon.Runtime;
using Amazon.Runtime.Internal;

namespace Amazon.Lightsail.Model
{
    /// <summary>
    /// This is the response object from the GetLoadBalancerMetricData operation.
    /// </summary>
    public partial class GetLoadBalancerMetricDataResponse : AmazonWebServiceResponse
    {
        private List<MetricDatapoint> _metricData = new List<MetricDatapoint>();
        private LoadBalancerMetricName _metricName;

        /// <summary>
        /// Gets and sets the property MetricData. 
        /// <para>
        /// An array of metric datapoint objects.
        /// </para>
        /// </summary>
        public List<MetricDatapoint> MetricData
        {
            get { return this._metricData; }
            set { this._metricData = value; }
        }

        // Check to see if MetricData property is set
        internal bool IsSetMetricData()
        {
            return this._metricData != null && this._metricData.Count > 0; 
        }

        /// <summary>
        /// Gets and sets the property MetricName. 
        /// <para>
        /// The metric about which you are receiving information. Valid values are listed below,
        /// along with the most useful <code>statistics</code> to include in your request.
        /// </para>
        ///  <ul> <li> 
        /// <para>
        ///  <b> <code>ClientTLSNegotiationErrorCount</code> </b> - The number of TLS connections
        /// initiated by the client that did not establish a session with the load balancer. Possible
        /// causes include a mismatch of ciphers or protocols.
        /// </para>
        ///  
        /// <para>
        ///  <code>Statistics</code>: The most useful statistic is <code>Sum</code>.
        /// </para>
        ///  </li> <li> 
        /// <para>
        ///  <b> <code>HealthyHostCount</code> </b> - The number of target instances that are
        /// considered healthy.
        /// </para>
        ///  
        /// <para>
        ///  <code>Statistics</code>: The most useful statistic are <code>Average</code>, <code>Minimum</code>,
        /// and <code>Maximum</code>.
        /// </para>
        ///  </li> <li> 
        /// <para>
        ///  <b> <code>UnhealthyHostCount</code> </b> - The number of target instances that are
        /// considered unhealthy.
        /// </para>
        ///  
        /// <para>
        ///  <code>Statistics</code>: The most useful statistic are <code>Average</code>, <code>Minimum</code>,
        /// and <code>Maximum</code>.
        /// </para>
        ///  </li> <li> 
        /// <para>
        ///  <b> <code>HTTPCode_LB_4XX_Count</code> </b> - The number of HTTP 4XX client error
        /// codes that originate from the load balancer. Client errors are generated when requests
        /// are malformed or incomplete. These requests have not been received by the target instance.
        /// This count does not include any response codes generated by the target instances.
        /// </para>
        ///  
        /// <para>
        ///  <code>Statistics</code>: The most useful statistic is <code>Sum</code>. Note that
        /// <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code> all return <code>1</code>.
        /// </para>
        ///  </li> <li> 
        /// <para>
        ///  <b> <code>HTTPCode_LB_5XX_Count</code> </b> - The number of HTTP 5XX server error
        /// codes that originate from the load balancer. This count does not include any response
        /// codes generated by the target instances.
        /// </para>
        ///  
        /// <para>
        ///  <code>Statistics</code>: The most useful statistic is <code>Sum</code>. Note that
        /// <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code> all return <code>1</code>.
        /// Note that <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code> all
        /// return <code>1</code>.
        /// </para>
        ///  </li> <li> 
        /// <para>
        ///  <b> <code>HTTPCode_Instance_2XX_Count</code> </b> - The number of HTTP response codes
        /// generated by the target instances. This does not include any response codes generated
        /// by the load balancer.
        /// </para>
        ///  
        /// <para>
        ///  <code>Statistics</code>: The most useful statistic is <code>Sum</code>. Note that
        /// <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code> all return <code>1</code>.
        /// </para>
        ///  </li> <li> 
        /// <para>
        ///  <b> <code>HTTPCode_Instance_3XX_Count</code> </b> - The number of HTTP response codes
        /// generated by the target instances. This does not include any response codes generated
        /// by the load balancer. 
        /// </para>
        ///  
        /// <para>
        ///  <code>Statistics</code>: The most useful statistic is <code>Sum</code>. Note that
        /// <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code> all return <code>1</code>.
        /// </para>
        ///  </li> <li> 
        /// <para>
        ///  <b> <code>HTTPCode_Instance_4XX_Count</code> </b> - The number of HTTP response codes
        /// generated by the target instances. This does not include any response codes generated
        /// by the load balancer.
        /// </para>
        ///  
        /// <para>
        ///  <code>Statistics</code>: The most useful statistic is <code>Sum</code>. Note that
        /// <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code> all return <code>1</code>.
        /// </para>
        ///  </li> <li> 
        /// <para>
        ///  <b> <code>HTTPCode_Instance_5XX_Count</code> </b> - The number of HTTP response codes
        /// generated by the target instances. This does not include any response codes generated
        /// by the load balancer.
        /// </para>
        ///  
        /// <para>
        ///  <code>Statistics</code>: The most useful statistic is <code>Sum</code>. Note that
        /// <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code> all return <code>1</code>.
        /// </para>
        ///  </li> <li> 
        /// <para>
        ///  <b> <code>InstanceResponseTime</code> </b> - The time elapsed, in seconds, after
        /// the request leaves the load balancer until a response from the target instance is
        /// received.
        /// </para>
        ///  
        /// <para>
        ///  <code>Statistics</code>: The most useful statistic is <code>Average</code>.
        /// </para>
        ///  </li> <li> 
        /// <para>
        ///  <b> <code>RejectedConnectionCount</code> </b> - The number of connections that were
        /// rejected because the load balancer had reached its maximum number of connections.
        /// </para>
        ///  
        /// <para>
        ///  <code>Statistics</code>: The most useful statistic is <code>Sum</code>.
        /// </para>
        ///  </li> <li> 
        /// <para>
        ///  <b> <code>RequestCount</code> </b> - The number of requests processed over IPv4.
        /// This count includes only the requests with a response generated by a target instance
        /// of the load balancer.
        /// </para>
        ///  
        /// <para>
        ///  <code>Statistics</code>: The most useful statistic is <code>Sum</code>. Note that
        /// <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code> all return <code>1</code>.
        /// </para>
        ///  </li> </ul>
        /// </summary>
        public LoadBalancerMetricName MetricName
        {
            get { return this._metricName; }
            set { this._metricName = value; }
        }

        // Check to see if MetricName property is set
        internal bool IsSetMetricName()
        {
            return this._metricName != null;
        }

    }
}