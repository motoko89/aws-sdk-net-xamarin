<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	
	<!-- COMMON PROPERTIES -->
	
	<PropertyGroup>
    
        <!-- set up unquoted and quoted properties for build tools. Use the unquoted 'exe' versions with Exists() 
             otherwise it yields 'false'. Use the quoted versions with the Exec task so that paths containing spaces
             are handled correctly.
        -->

		<devenv2013exe>C:\Program Files (x86)\Microsoft Visual Studio 12.0\Common7\IDE\devenv.com</devenv2013exe>
		<devenv2013>&quot;$(devenv2013exe)&quot;</devenv2013>
		
        <powershellexe>C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe</powershellexe>
        <powershell>&quot;$(powershellexe)&quot;</powershell>
		
        <mstest2013exe>C:\Program Files (x86)\Microsoft Visual Studio 12.0\Common7\IDE\mstest.exe</mstest2013exe>
        <mstest2013>&quot;$(mstest2013exe)&quot;</mstest2013>
		
        <vstest2013exe>C:\Program Files (x86)\Microsoft Visual Studio 12.0\Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe</vstest2013exe>
        <vstest2013>&quot;$(vstest2013exe)&quot;</vstest2013>
        
		<xpkgexe>C:\xpkg\xamarin-component.exe</xpkgexe>
		<xpkg>&quot;$(xpkgexe)&quot;</xpkg>
		
	    <unitypath>C:\Program Files\Unity</unitypath>
		 
		<unityexe>$(unitypath)\Editor\Unity.Exe</unityexe>
		<unity>&quot;$(unityexe)&quot;</unity>
		
		<pdb2mdbexe>$(unitypath)\Editor\Data\MonoBleedingEdge\lib\mono\4.5\pdb2mdb.exe</pdb2mdbexe>
		<pdb2mdb>&quot;$(pdb2mdbexe)&quot;</pdb2mdb>
		
		<monoexe>C:\Program Files (x86)\Mono\bin\mono.exe</monoexe>
		<mono>&quot;$(monoexe)&quot;</mono>
		
		<Deployment>..\Deployment</Deployment>
		<DocDeployment>..\DocDeployment</DocDeployment>
        </PropertyGroup>

	
	<!-- COMMON TARGETS -->
	
	<Target Name="clean-common">
		<RemoveDir Directories="TestResults" />
		<RemoveDir Directories="..\TestResults" />

		<RemoveDir Directories="$(Deployment)" />
		<MakeDir Directories="$(Deployment)" />
		
		<ItemGroup>
			<XamFiles Include="..\sdk\xamarin-components\**\*.xam"/>
		</ItemGroup>
		<Message Text="Deleting previously generated xamarin component @(XamFiles)" />
		<Delete Files="@(XamFiles)" />		
	</Target>
	
	<Target Name="consolidate-docartifacts">
        <ItemGroup>
			<FilesToZip Include="$(DocDeployment)\docs\**" />
		</ItemGroup>
		<Zip
			InputDirectory="$(DocDeployment)\docs"
			OutputFileName="$(DocDeployment)\help.zip" />
	</Target>

	<!-- COMMON CUSTOM TASKS -->
	
	<UsingTask TaskName="Zip" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
		<ParameterGroup>
			<InputDirectory ParameterType="System.String" Required="true" />
			<OutputFileName ParameterType="System.String" Required="true" />
		</ParameterGroup>
		<Task>
			<Reference Include="System.IO.Compression.FileSystem" />
			<Using Namespace="System.IO" />
			<Using Namespace="System.IO.Compression" />
			<Code Type="Fragment" Language="cs">
				<![CDATA[
					if (File.Exists(OutputFileName))
						File.Delete(OutputFileName);
					ZipFile.CreateFromDirectory(InputDirectory, OutputFileName, CompressionLevel.Optimal, includeBaseDirectory: false); 
				]]>
			</Code>
		</Task>
	</UsingTask>	

	<UsingTask
		TaskName="WaitUntilAttached"
		TaskFactory="CodeTaskFactory"
		AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >

		<ParameterGroup />
		<Task>
			<Using Namespace="System"/>
			<Using Namespace="System.Diagnostics"/>
			<Using Namespace="System.Threading"/>
			<Code Type="Fragment" Language="cs">
				<![CDATA[
					Log.LogMessage("MSBuild process id: {0}", Process.GetCurrentProcess().Id);
					int count = 5;
					for(int i=0;i<count && !Debugger.IsAttached;i++)
					{
						Log.LogMessage("Waiting for debugger to be attached ({0}/{1})", i, count);
						Thread.Sleep(TimeSpan.FromSeconds(5));
					}
					Log.LogMessage("Debugger {0}, continuing", Debugger.IsAttached ? "attached" : "not attached");
				]]>
			</Code>
		</Task>
	</UsingTask>

</Project>
