{
  "version": "1.0",
  "type": "json",
  "json_version": 1.1,
  "target_prefix": "CodeCommit_20150413",
  "signature_version": "v4",
  "service_full_name": "AWS CodeCommit",
  "service_abbreviation": "CodeCommit",
  "service_id": "CodeCommit",
  "uid": "codecommit-2015-04-13",
  "endpoint_prefix": "codecommit",
  "api_version": "2015-04-13",
  "xmlnamespace": "http://codecommit.amazonaws.com/doc/2015-04-13",
  "documentation": " \n        <fullname>AWS CodeCommit</fullname>\n        <p>This is the <i>AWS CodeCommit API Reference</i>. This reference provides descriptions of the operations and data types for \n            AWS CodeCommit API along with usage examples.</p>\n        <p>You can use the AWS CodeCommit API to work with the following objects:</p>\n        \n            <p>Repositories, by calling the following:</p>\n          <ul>\n            <li>\n                  <p>\n                  <a>BatchGetRepositories</a>, which returns information about one or more repositories associated with your AWS account.</p>\n            </li>\n            <li>\n                  <p>\n                  <a>CreateRepository</a>, which creates an AWS CodeCommit repository.</p>\n            </li>\n            <li>\n                  <p>\n                  <a>DeleteRepository</a>, which deletes an AWS CodeCommit repository.</p>\n            </li>\n            <li>\n                  <p>\n                  <a>GetRepository</a>, which returns information about a specified repository.</p>\n            </li>\n            <li>\n                  <p>\n                  <a>ListRepositories</a>, which lists all AWS CodeCommit repositories associated with your AWS account.</p>\n            </li>\n            <li>\n                  <p>\n                  <a>UpdateRepositoryDescription</a>, which sets or updates the description of the repository.</p>\n              </li>\n            <li>\n                  <p>\n                  <a>UpdateRepositoryName</a>, which changes the name of the repository. If you change the name of a repository, no other\n              users of that repository will be able to access it until you send them the new HTTPS or SSH URL to use.</p>\n            </li>\n         </ul>\n        \n            <p>Branches, by calling the following:</p>\n            <ul>\n            <li>\n                    <p>\n                  <a>CreateBranch</a>, which creates a new branch in a specified repository.</p>\n            </li>\n            <li>\n                    <p>\n                  <a>DeleteBranch</a>, which deletes the specified branch in a repository unless it is the default branch.</p>\n                </li>\n            <li>\n                    <p>\n                  <a>GetBranch</a>, which returns information about a specified branch.</p>\n            </li>\n            <li>\n                    <p>\n                  <a>ListBranches</a>, which lists all branches for a specified repository.</p>\n            </li>\n            <li>\n                    <p>\n                  <a>UpdateDefaultBranch</a>, which changes the default branch for a repository.</p>\n            </li>\n         </ul>\n        \n        <p>Files, by calling the following:</p>\n        <ul>\n            <li>\n               <p>\n                  <a>DeleteFile</a>, which deletes the content of a specified file from a specified branch.</p>\n            </li>\n            <li>\n               <p>\n                  <a>GetFile</a>, which returns the base-64 encoded content of a specified file.</p>\n            </li>\n            <li>\n               <p>\n                  <a>GetFolder</a>, which returns the contents of a specified folder or directory.</p>\n            </li>\n            <li>\n               <p>\n                  <a>PutFile</a>, which adds or modifies a file in a specified repository and branch.</p>\n            </li>\n         </ul>\n        \n        \n            <p>Information about committed code in a repository, by calling the following:</p>\n              <ul>\n            <li>\n                      <p>\n                  <a>GetBlob</a>, which returns the base-64 encoded content of an individual Git blob \n                          object within a repository.</p>\n                  </li>\n            <li>\n                      <p>\n                  <a>GetCommit</a>, which returns information about  a commit, including commit \n                          messages and author and committer information.</p>\n                  </li>\n            <li>\n                      <p>\n                  <a>GetDifferences</a>, which returns information about the differences in a valid commit \n                          specifier (such as a branch, tag, HEAD, commit ID or other fully qualified reference).</p>\n                  </li>\n         </ul>\n        \n        <p>Pull requests, by calling the following:</p>\n        <ul>\n            <li>\n                <p>\n                  <a>CreatePullRequest</a>, which creates a pull request in a specified repository.</p>\n            </li>\n            <li>\n                <p>\n                  <a>DescribePullRequestEvents</a>, which returns information about one or more pull request events.</p>\n            </li>\n            <li>\n                <p>\n                  <a>GetCommentsForPullRequest</a>, which returns information about comments on a specified pull request.</p>\n            </li>\n            <li>\n                <p>\n                  <a>GetMergeConflicts</a>, which returns information about merge conflicts\n                    between the source and destination branch in a pull request.</p>\n            </li>\n            <li>\n                <p>\n                  <a>GetPullRequest</a>, which returns information about a specified pull request.</p>\n            </li>\n            <li> \n                <p>\n                  <a>ListPullRequests</a>, which lists all pull requests for a repository.</p>\n            </li>\n            <li>\n                <p>\n                  <a>MergePullRequestByFastForward</a>, which merges the source destination branch of a pull request into the specified destination\n                    branch for that pull request using the fast-forward merge option.</p>\n            </li>\n            <li>\n                <p>\n                  <a>PostCommentForPullRequest</a>, which posts a comment to a pull request at the specified line, file, or request.</p>\n            </li>\n            <li>\n                <p>\n                  <a>UpdatePullRequestDescription</a>, which updates the description of a pull request.</p>\n            </li>\n            <li>\n                <p>\n                  <a>UpdatePullRequestStatus</a>, which updates the status of a pull request.</p>\n            </li>\n            <li>\n                <p>\n                  <a>UpdatePullRequestTitle</a>, which updates the title of a pull request.</p>\n            </li>\n         </ul>\n        \n        <p>Information about comments in a repository, by calling the following:</p>\n        <ul>\n            <li>\n                <p>\n                  <a>DeleteCommentContent</a>, which deletes the content of a comment on a commit in a repository.</p>\n            </li>\n            <li>\n                <p>\n                  <a>GetComment</a>, which returns information about a comment on a commit.</p>\n            </li>\n            <li>\n                <p>\n                  <a>GetCommentsForComparedCommit</a>, which returns information about comments on the comparison between two commit specifiers \n                    in a repository.</p>\n            </li>\n            <li>\n                <p>\n                  <a>PostCommentForComparedCommit</a>, which creates a comment on the comparison between two commit specifiers in a repository.</p>\n            </li>\n            <li>\n                <p>\n                  <a>PostCommentReply</a>, which creates a reply to a comment.</p>\n            </li>\n            <li>\n                <p>\n                  <a>UpdateComment</a>, which updates the content of a comment on a commit in a repository.</p>\n            </li>\n         </ul>\n         \n            <p>Triggers, by calling the following:</p> \n                <ul>\n            <li>\n                        <p>\n                  <a>GetRepositoryTriggers</a>, which returns information about triggers configured \n                            for a repository.</p>\n            </li>\n            <li>\n                        <p>\n                  <a>PutRepositoryTriggers</a>, which replaces all triggers for a repository and can \n                            be used to create or delete triggers.</p>\n            </li>\n            <li>\n                        <p>\n                  <a>TestRepositoryTriggers</a>, which tests the functionality of a repository trigger \n                            by sending data to the trigger target.</p>\n            </li>\n         </ul>\n                   \n            \n             \n        \n        <p>For information about how to use AWS CodeCommit, see the <a href=\"http://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html\">AWS CodeCommit User Guide</a>.</p>\n      ",
  "operations": {
    "CreateBranch": {
      "name": "CreateBranch",
      "input": {
        "type": "structure",
        "members": {
          "repositoryName": {
            "type": "string",
            "pattern": "[\\w\\.-]+",
            "zonbookDocumentation": "\n        <simpara>The name of the repository in which you want to create the new branch.</simpara>\n      ",
            "documentation": "\n        <p>The name of the repository in which you want to create the new branch.</p>\n      ",
            "required": true,
            "shape_name": "RepositoryName",
            "min_length": 1,
            "max_length": 100
          },
          "branchName": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The name of the new branch to create.</simpara>\n      ",
            "documentation": "\n        <p>The name of the new branch to create.</p>\n      ",
            "required": true,
            "shape_name": "BranchName",
            "min_length": 1,
            "max_length": 256
          },
          "commitId": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The ID of the commit to point the new branch to.</simpara>\n               \n      ",
            "documentation": "\n        <p>The ID of the commit to point the new branch to.</p>\n               \n      ",
            "required": true,
            "shape_name": "CommitId"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the input of a create branch operation.</simpara>\n      ",
        "documentation": "\n        <p>Represents the input of a create branch operation.</p>\n      ",
        "shape_name": "CreateBranchInput"
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A repository name is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A repository name is required but was not specified.</p>\n      ",
          "shape_name": "RepositoryNameRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>At least one specified repository name is not valid.</simpara>\n        <note>\n            <simpara>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</simpara>\n         </note>\n      ",
          "documentation": "\n        <p>At least one specified repository name is not valid.</p>\n        <note>\n            <p>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</p>\n         </note>\n      ",
          "shape_name": "InvalidRepositoryNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified repository does not exist.</simpara>\n      ",
          "documentation": "\n        <p>The specified repository does not exist.</p>\n      ",
          "shape_name": "RepositoryDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A branch name is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A branch name is required but was not specified.</p>\n      ",
          "shape_name": "BranchNameRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified branch name already exists.</simpara>\n      ",
          "documentation": "\n        <p>The specified branch name already exists.</p>\n      ",
          "shape_name": "BranchNameExistsException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified reference name is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified reference name is not valid.</p>\n      ",
          "shape_name": "InvalidBranchNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A commit ID was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A commit ID was not specified.</p>\n      ",
          "shape_name": "CommitIdRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified commit does not exist or no commit was specified, and the specified repository has no default branch.</simpara>\n      ",
          "documentation": "\n        <p>The specified commit does not exist or no commit was specified, and the specified repository has no default branch.</p>\n      ",
          "shape_name": "CommitDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified commit ID is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified commit ID is not valid.</p>\n      ",
          "shape_name": "InvalidCommitIdException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption integrity check failed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption integrity check failed.</p>\n      ",
          "shape_name": "EncryptionIntegrityChecksFailedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption key could not be accessed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption key could not be accessed.</p>\n      ",
          "shape_name": "EncryptionKeyAccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is disabled.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is disabled.</p>\n      ",
          "shape_name": "EncryptionKeyDisabledException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>No encryption key was found.</simpara>\n      ",
          "documentation": "\n        <p>No encryption key was found.</p>\n      ",
          "shape_name": "EncryptionKeyNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is not available.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is not available.</p>\n      ",
          "shape_name": "EncryptionKeyUnavailableException"
        }
      ],
      "documentation": "\n        <p>Creates a new branch in a repository and points the branch to a commit.</p>\n        <note>\n            <p>Calling the create branch operation does not set a repository's default branch. To do this, call the update default branch operation.</p>\n         </note>\n        \n      "
    },
    "GetBranch": {
      "name": "GetBranch",
      "input": {
        "type": "structure",
        "members": {
          "repositoryName": {
            "type": "string",
            "pattern": "[\\w\\.-]+",
            "zonbookDocumentation": "\n        <simpara>The name of the repository that contains the branch for which you want to retrieve information.</simpara>\n      ",
            "documentation": "\n        <p>The name of the repository that contains the branch for which you want to retrieve information.</p>\n      ",
            "shape_name": "RepositoryName",
            "min_length": 1,
            "max_length": 100
          },
          "branchName": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The name of the branch for which you want to retrieve information.</simpara>\n      ",
            "documentation": "\n        <p>The name of the branch for which you want to retrieve information.</p>\n      ",
            "shape_name": "BranchName",
            "min_length": 1,
            "max_length": 256
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the input of a get branch operation.</simpara>\n      ",
        "documentation": "\n        <p>Represents the input of a get branch operation.</p>\n      ",
        "shape_name": "GetBranchInput"
      },
      "output": {
        "type": "structure",
        "members": {
          "branch": {
            "type": "structure",
            "members": {
              "branchName": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The name of the branch.</simpara>\n      ",
                "documentation": "\n        <p>The name of the branch.</p>\n      ",
                "shape_name": "BranchName",
                "min_length": 1,
                "max_length": 256
              },
              "commitId": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The ID of the last commit made to the branch.</simpara>\n      ",
                "documentation": "\n        <p>The ID of the last commit made to the branch.</p>\n      ",
                "shape_name": "CommitId"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The name of the branch.</simpara>\n      ",
            "documentation": "\n        <p>The name of the branch.</p>\n      ",
            "shape_name": "BranchInfo"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the output of a get branch operation.</simpara>\n      ",
        "documentation": "\n        <p>Represents the output of a get branch operation.</p>\n      ",
        "shape_name": "GetBranchOutput"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A repository name is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A repository name is required but was not specified.</p>\n      ",
          "shape_name": "RepositoryNameRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified repository does not exist.</simpara>\n      ",
          "documentation": "\n        <p>The specified repository does not exist.</p>\n      ",
          "shape_name": "RepositoryDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>At least one specified repository name is not valid.</simpara>\n        <note>\n            <simpara>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</simpara>\n         </note>\n      ",
          "documentation": "\n        <p>At least one specified repository name is not valid.</p>\n        <note>\n            <p>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</p>\n         </note>\n      ",
          "shape_name": "InvalidRepositoryNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A branch name is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A branch name is required but was not specified.</p>\n      ",
          "shape_name": "BranchNameRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified reference name is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified reference name is not valid.</p>\n      ",
          "shape_name": "InvalidBranchNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified branch does not exist.</simpara>\n      ",
          "documentation": "\n        <p>The specified branch does not exist.</p>\n      ",
          "shape_name": "BranchDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption integrity check failed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption integrity check failed.</p>\n      ",
          "shape_name": "EncryptionIntegrityChecksFailedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption key could not be accessed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption key could not be accessed.</p>\n      ",
          "shape_name": "EncryptionKeyAccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is disabled.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is disabled.</p>\n      ",
          "shape_name": "EncryptionKeyDisabledException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>No encryption key was found.</simpara>\n      ",
          "documentation": "\n        <p>No encryption key was found.</p>\n      ",
          "shape_name": "EncryptionKeyNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is not available.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is not available.</p>\n      ",
          "shape_name": "EncryptionKeyUnavailableException"
        }
      ],
      "documentation": "\n        <p>Returns information about a repository branch, including its name and the last commit ID.</p>\n        \n      "
    },
    "ListBranches": {
      "name": "ListBranches",
      "input": {
        "type": "structure",
        "members": {
          "repositoryName": {
            "type": "string",
            "pattern": "[\\w\\.-]+",
            "zonbookDocumentation": "\n        <simpara>The name of the repository that contains the branches.</simpara>\n      ",
            "documentation": "\n        <p>The name of the repository that contains the branches.</p>\n      ",
            "required": true,
            "shape_name": "RepositoryName",
            "min_length": 1,
            "max_length": 100
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>An enumeration token that allows the operation to batch the results.</simpara>\n      ",
            "documentation": "\n        <p>An enumeration token that allows the operation to batch the results.</p>\n      ",
            "shape_name": "NextToken"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the input of a list branches operation.</simpara>\n      ",
        "documentation": "\n        <p>Represents the input of a list branches operation.</p>\n      ",
        "shape_name": "ListBranchesInput"
      },
      "output": {
        "type": "structure",
        "members": {
          "branches": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The list of branch names.</simpara>\n      ",
            "documentation": "\n        <p>The list of branch names.</p>\n      ",
            "shape_name": "BranchNameList",
            "members": {
              "type": "string",
              "shape_name": "BranchName",
              "documentation": null,
              "min_length": 1,
              "max_length": 256
            }
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>An enumeration token that returns the batch of the results.</simpara>\n      ",
            "documentation": "\n        <p>An enumeration token that returns the batch of the results.</p>\n      ",
            "shape_name": "NextToken"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the output of a list branches operation.</simpara>\n      ",
        "documentation": "\n        <p>Represents the output of a list branches operation.</p>\n      ",
        "shape_name": "ListBranchesOutput"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A repository name is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A repository name is required but was not specified.</p>\n      ",
          "shape_name": "RepositoryNameRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified repository does not exist.</simpara>\n      ",
          "documentation": "\n        <p>The specified repository does not exist.</p>\n      ",
          "shape_name": "RepositoryDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>At least one specified repository name is not valid.</simpara>\n        <note>\n            <simpara>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</simpara>\n         </note>\n      ",
          "documentation": "\n        <p>At least one specified repository name is not valid.</p>\n        <note>\n            <p>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</p>\n         </note>\n      ",
          "shape_name": "InvalidRepositoryNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption integrity check failed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption integrity check failed.</p>\n      ",
          "shape_name": "EncryptionIntegrityChecksFailedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption key could not be accessed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption key could not be accessed.</p>\n      ",
          "shape_name": "EncryptionKeyAccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is disabled.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is disabled.</p>\n      ",
          "shape_name": "EncryptionKeyDisabledException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>No encryption key was found.</simpara>\n      ",
          "documentation": "\n        <p>No encryption key was found.</p>\n      ",
          "shape_name": "EncryptionKeyNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is not available.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is not available.</p>\n      ",
          "shape_name": "EncryptionKeyUnavailableException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified continuation token is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified continuation token is not valid.</p>\n      ",
          "shape_name": "InvalidContinuationTokenException"
        }
      ],
      "documentation": "\n        <p>Gets information about one or more branches in a repository.</p>\n        \n      "
    },
    "DeleteBranch": {
      "name": "DeleteBranch",
      "input": {
        "type": "structure",
        "members": {
          "repositoryName": {
            "type": "string",
            "pattern": "[\\w\\.-]+",
            "zonbookDocumentation": "\n        <simpara>The name of the repository that contains the branch to be deleted.</simpara>\n      ",
            "documentation": "\n        <p>The name of the repository that contains the branch to be deleted.</p>\n      ",
            "required": true,
            "shape_name": "RepositoryName",
            "min_length": 1,
            "max_length": 100
          },
          "branchName": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The name of the branch to delete.</simpara>\n      ",
            "documentation": "\n        <p>The name of the branch to delete.</p>\n      ",
            "required": true,
            "shape_name": "BranchName",
            "min_length": 1,
            "max_length": 256
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the input of a delete branch operation.</simpara>\n      ",
        "documentation": "\n        <p>Represents the input of a delete branch operation.</p>\n      ",
        "shape_name": "DeleteBranchInput"
      },
      "output": {
        "type": "structure",
        "members": {
          "deletedBranch": {
            "type": "structure",
            "members": {
              "branchName": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The name of the branch.</simpara>\n      ",
                "documentation": "\n        <p>The name of the branch.</p>\n      ",
                "shape_name": "BranchName",
                "min_length": 1,
                "max_length": 256
              },
              "commitId": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The ID of the last commit made to the branch.</simpara>\n      ",
                "documentation": "\n        <p>The ID of the last commit made to the branch.</p>\n      ",
                "shape_name": "CommitId"
              }
            },
            "zonbookDocumentation": "\n        <simpara>Information about the branch deleted by the operation, including the branch name and the commit ID that was the tip of the branch.</simpara>\n      ",
            "documentation": "\n        <p>Information about the branch deleted by the operation, including the branch name and the commit ID that was the tip of the branch.</p>\n      ",
            "shape_name": "BranchInfo"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the output of a delete branch operation.</simpara>\n      ",
        "documentation": "\n        <p>Represents the output of a delete branch operation.</p>\n      ",
        "shape_name": "DeleteBranchOutput"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A repository name is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A repository name is required but was not specified.</p>\n      ",
          "shape_name": "RepositoryNameRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified repository does not exist.</simpara>\n      ",
          "documentation": "\n        <p>The specified repository does not exist.</p>\n      ",
          "shape_name": "RepositoryDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>At least one specified repository name is not valid.</simpara>\n        <note>\n            <simpara>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</simpara>\n         </note>\n      ",
          "documentation": "\n        <p>At least one specified repository name is not valid.</p>\n        <note>\n            <p>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</p>\n         </note>\n      ",
          "shape_name": "InvalidRepositoryNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A branch name is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A branch name is required but was not specified.</p>\n      ",
          "shape_name": "BranchNameRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified reference name is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified reference name is not valid.</p>\n      ",
          "shape_name": "InvalidBranchNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified branch is the default branch for the repository, and cannot be deleted. To delete this branch, you must first set another branch as the default branch.</simpara>\n      ",
          "documentation": "\n        <p>The specified branch is the default branch for the repository, and cannot be deleted. To delete this branch, you must first set another branch as the default branch.</p>\n      ",
          "shape_name": "DefaultBranchCannotBeDeletedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption integrity check failed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption integrity check failed.</p>\n      ",
          "shape_name": "EncryptionIntegrityChecksFailedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption key could not be accessed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption key could not be accessed.</p>\n      ",
          "shape_name": "EncryptionKeyAccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is disabled.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is disabled.</p>\n      ",
          "shape_name": "EncryptionKeyDisabledException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>No encryption key was found.</simpara>\n      ",
          "documentation": "\n        <p>No encryption key was found.</p>\n      ",
          "shape_name": "EncryptionKeyNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is not available.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is not available.</p>\n      ",
          "shape_name": "EncryptionKeyUnavailableException"
        }
      ],
      "documentation": "\n        <p>Deletes a branch from a repository, unless that branch is the default branch for the repository. </p> \n       \n      "
    },
    "BatchGetRepositories": {
      "name": "BatchGetRepositories",
      "input": {
        "type": "structure",
        "members": {
          "repositoryNames": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The names of the repositories to get information about.</simpara>\n      ",
            "documentation": "\n        <p>The names of the repositories to get information about.</p>\n      ",
            "required": true,
            "shape_name": "RepositoryNameList",
            "members": {
              "type": "string",
              "pattern": "[\\w\\.-]+",
              "shape_name": "RepositoryName",
              "documentation": null,
              "min_length": 1,
              "max_length": 100
            }
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the input of a batch get repositories operation.</simpara>\n      ",
        "documentation": "\n        <p>Represents the input of a batch get repositories operation.</p>\n      ",
        "shape_name": "BatchGetRepositoriesInput"
      },
      "output": {
        "type": "structure",
        "members": {
          "repositories": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>A list of repositories returned by the batch get repositories operation.</simpara>\n      ",
            "documentation": "\n        <p>A list of repositories returned by the batch get repositories operation.</p>\n      ",
            "shape_name": "RepositoryMetadataList",
            "members": {
              "type": "structure",
              "members": {
                "accountId": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>The ID of the AWS account associated with the repository.</simpara>\n      ",
                  "documentation": "\n        <p>The ID of the AWS account associated with the repository.</p>\n      ",
                  "shape_name": "AccountId"
                },
                "repositoryId": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>The ID of the repository.</simpara>\n      ",
                  "documentation": "\n        <p>The ID of the repository.</p>\n      ",
                  "shape_name": "RepositoryId"
                },
                "repositoryName": {
                  "type": "string",
                  "pattern": "[\\w\\.-]+",
                  "zonbookDocumentation": "\n        <simpara>The repository's name.</simpara>\n      ",
                  "documentation": "\n        <p>The repository's name.</p>\n      ",
                  "shape_name": "RepositoryName",
                  "min_length": 1,
                  "max_length": 100
                },
                "repositoryDescription": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>A comment or description about the repository.</simpara>\n      ",
                  "documentation": "\n        <p>A comment or description about the repository.</p>\n      ",
                  "shape_name": "RepositoryDescription",
                  "max_length": 1000
                },
                "defaultBranch": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>The repository's default branch name.</simpara>\n      ",
                  "documentation": "\n        <p>The repository's default branch name.</p>\n      ",
                  "shape_name": "BranchName",
                  "min_length": 1,
                  "max_length": 256
                },
                "lastModifiedDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n        <simpara>The date and time the repository was last modified, in timestamp format.</simpara>\n      ",
                  "documentation": "\n        <p>The date and time the repository was last modified, in timestamp format.</p>\n      ",
                  "shape_name": "LastModifiedDate"
                },
                "creationDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n        <simpara>The date and time the repository was created, in timestamp format.</simpara>\n      ",
                  "documentation": "\n        <p>The date and time the repository was created, in timestamp format.</p>\n      ",
                  "shape_name": "CreationDate"
                },
                "cloneUrlHttp": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>The URL to use for cloning the repository over HTTPS.</simpara>\n      ",
                  "documentation": "\n        <p>The URL to use for cloning the repository over HTTPS.</p>\n      ",
                  "shape_name": "CloneUrlHttp"
                },
                "cloneUrlSsh": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>The URL to use for cloning the repository over SSH.</simpara>\n      ",
                  "documentation": "\n        <p>The URL to use for cloning the repository over SSH.</p>\n      ",
                  "shape_name": "CloneUrlSsh"
                },
                "Arn": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of the repository.</simpara>\n      ",
                  "documentation": "\n        <p>The Amazon Resource Name (ARN) of the repository.</p>\n      ",
                  "shape_name": "Arn"
                }
              },
              "zonbookDocumentation": "\n        <simpara>Information about a repository.</simpara>    \n      ",
              "documentation": "\n        <p>Information about a repository.</p>    \n      ",
              "shape_name": "RepositoryMetadata"
            }
          },
          "repositoriesNotFound": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>Returns a list of repository names for which information could not be found.</simpara>\n      ",
            "documentation": "\n        <p>Returns a list of repository names for which information could not be found.</p>\n      ",
            "shape_name": "RepositoryNotFoundList",
            "members": {
              "type": "string",
              "pattern": "[\\w\\.-]+",
              "shape_name": "RepositoryName",
              "documentation": null,
              "min_length": 1,
              "max_length": 100
            }
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the output of a batch get repositories operation.</simpara>\n      ",
        "documentation": "\n        <p>Represents the output of a batch get repositories operation.</p>\n      ",
        "shape_name": "BatchGetRepositoriesOutput"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A repository names object is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A repository names object is required but was not specified.</p>\n      ",
          "shape_name": "RepositoryNamesRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The maximum number of allowed repository names was exceeded. Currently, this number is 25.</simpara>\n      ",
          "documentation": "\n        <p>The maximum number of allowed repository names was exceeded. Currently, this number is 25.</p>\n      ",
          "shape_name": "MaximumRepositoryNamesExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>At least one specified repository name is not valid.</simpara>\n        <note>\n            <simpara>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</simpara>\n         </note>\n      ",
          "documentation": "\n        <p>At least one specified repository name is not valid.</p>\n        <note>\n            <p>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</p>\n         </note>\n      ",
          "shape_name": "InvalidRepositoryNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption integrity check failed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption integrity check failed.</p>\n      ",
          "shape_name": "EncryptionIntegrityChecksFailedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption key could not be accessed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption key could not be accessed.</p>\n      ",
          "shape_name": "EncryptionKeyAccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is disabled.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is disabled.</p>\n      ",
          "shape_name": "EncryptionKeyDisabledException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>No encryption key was found.</simpara>\n      ",
          "documentation": "\n        <p>No encryption key was found.</p>\n      ",
          "shape_name": "EncryptionKeyNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is not available.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is not available.</p>\n      ",
          "shape_name": "EncryptionKeyUnavailableException"
        }
      ],
      "documentation": "\n        <p>Returns information about one or more repositories.</p>\n        <note>\n            <p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a web page could expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a web page.</p>\n         </note>\n        \n      "
    },
    "CreateRepository": {
      "name": "CreateRepository",
      "input": {
        "type": "structure",
        "members": {
          "repositoryName": {
            "type": "string",
            "pattern": "[\\w\\.-]+",
            "zonbookDocumentation": "\n        <simpara>The name of the new repository to be created.</simpara>\n        <note>\n            <simpara>The repository name must be unique across the calling AWS account. In addition, repository names are limited to 100 \n            alphanumeric, dash, and underscore characters, and cannot include certain characters. \n            For a full description of the limits on repository names, see \n            <ulink url=\"http://docs.aws.amazon.com/codecommit/latest/userguide/limits.html\">Limits</ulink> in the AWS CodeCommit User Guide.\n        The suffix \".git\" is prohibited.</simpara>\n         </note>\n      ",
            "documentation": "\n        <p>The name of the new repository to be created.</p>\n        <note>\n            <p>The repository name must be unique across the calling AWS account. In addition, repository names are limited to 100 \n            alphanumeric, dash, and underscore characters, and cannot include certain characters. \n            For a full description of the limits on repository names, see \n            <a href=\"http://docs.aws.amazon.com/codecommit/latest/userguide/limits.html\">Limits</a> in the AWS CodeCommit User Guide.\n        The suffix \".git\" is prohibited.</p>\n         </note>\n      ",
            "required": true,
            "shape_name": "RepositoryName",
            "min_length": 1,
            "max_length": 100
          },
          "repositoryDescription": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>A comment or description about the new repository.</simpara>\n        <note>\n            <simpara>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a web page could expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a web page.</simpara>\n         </note>\n      ",
            "documentation": "\n        <p>A comment or description about the new repository.</p>\n        <note>\n            <p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a web page could expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a web page.</p>\n         </note>\n      ",
            "shape_name": "RepositoryDescription",
            "max_length": 1000
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the input of a create repository operation.</simpara>\n      ",
        "documentation": "\n        <p>Represents the input of a create repository operation.</p>\n      ",
        "shape_name": "CreateRepositoryInput"
      },
      "output": {
        "type": "structure",
        "members": {
          "repositoryMetadata": {
            "type": "structure",
            "members": {
              "accountId": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The ID of the AWS account associated with the repository.</simpara>\n      ",
                "documentation": "\n        <p>The ID of the AWS account associated with the repository.</p>\n      ",
                "shape_name": "AccountId"
              },
              "repositoryId": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The ID of the repository.</simpara>\n      ",
                "documentation": "\n        <p>The ID of the repository.</p>\n      ",
                "shape_name": "RepositoryId"
              },
              "repositoryName": {
                "type": "string",
                "pattern": "[\\w\\.-]+",
                "zonbookDocumentation": "\n        <simpara>The repository's name.</simpara>\n      ",
                "documentation": "\n        <p>The repository's name.</p>\n      ",
                "shape_name": "RepositoryName",
                "min_length": 1,
                "max_length": 100
              },
              "repositoryDescription": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>A comment or description about the repository.</simpara>\n      ",
                "documentation": "\n        <p>A comment or description about the repository.</p>\n      ",
                "shape_name": "RepositoryDescription",
                "max_length": 1000
              },
              "defaultBranch": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The repository's default branch name.</simpara>\n      ",
                "documentation": "\n        <p>The repository's default branch name.</p>\n      ",
                "shape_name": "BranchName",
                "min_length": 1,
                "max_length": 256
              },
              "lastModifiedDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date and time the repository was last modified, in timestamp format.</simpara>\n      ",
                "documentation": "\n        <p>The date and time the repository was last modified, in timestamp format.</p>\n      ",
                "shape_name": "LastModifiedDate"
              },
              "creationDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date and time the repository was created, in timestamp format.</simpara>\n      ",
                "documentation": "\n        <p>The date and time the repository was created, in timestamp format.</p>\n      ",
                "shape_name": "CreationDate"
              },
              "cloneUrlHttp": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The URL to use for cloning the repository over HTTPS.</simpara>\n      ",
                "documentation": "\n        <p>The URL to use for cloning the repository over HTTPS.</p>\n      ",
                "shape_name": "CloneUrlHttp"
              },
              "cloneUrlSsh": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The URL to use for cloning the repository over SSH.</simpara>\n      ",
                "documentation": "\n        <p>The URL to use for cloning the repository over SSH.</p>\n      ",
                "shape_name": "CloneUrlSsh"
              },
              "Arn": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of the repository.</simpara>\n      ",
                "documentation": "\n        <p>The Amazon Resource Name (ARN) of the repository.</p>\n      ",
                "shape_name": "Arn"
              }
            },
            "zonbookDocumentation": "\n        <simpara>Information about the newly created repository.</simpara>\n      ",
            "documentation": "\n        <p>Information about the newly created repository.</p>\n      ",
            "shape_name": "RepositoryMetadata"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the output of a create repository operation.</simpara>\n      ",
        "documentation": "\n        <p>Represents the output of a create repository operation.</p>\n      ",
        "shape_name": "CreateRepositoryOutput"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified repository name already exists.</simpara>\n      ",
          "documentation": "\n        <p>The specified repository name already exists.</p>\n      ",
          "shape_name": "RepositoryNameExistsException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A repository name is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A repository name is required but was not specified.</p>\n      ",
          "shape_name": "RepositoryNameRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>At least one specified repository name is not valid.</simpara>\n        <note>\n            <simpara>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</simpara>\n         </note>\n      ",
          "documentation": "\n        <p>At least one specified repository name is not valid.</p>\n        <note>\n            <p>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</p>\n         </note>\n      ",
          "shape_name": "InvalidRepositoryNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified repository description is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified repository description is not valid.</p>\n      ",
          "shape_name": "InvalidRepositoryDescriptionException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A repository resource limit was exceeded.</simpara>\n      ",
          "documentation": "\n        <p>A repository resource limit was exceeded.</p>\n      ",
          "shape_name": "RepositoryLimitExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption integrity check failed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption integrity check failed.</p>\n      ",
          "shape_name": "EncryptionIntegrityChecksFailedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption key could not be accessed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption key could not be accessed.</p>\n      ",
          "shape_name": "EncryptionKeyAccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is disabled.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is disabled.</p>\n      ",
          "shape_name": "EncryptionKeyDisabledException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>No encryption key was found.</simpara>\n      ",
          "documentation": "\n        <p>No encryption key was found.</p>\n      ",
          "shape_name": "EncryptionKeyNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is not available.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is not available.</p>\n      ",
          "shape_name": "EncryptionKeyUnavailableException"
        }
      ],
      "documentation": "\n        <p>Creates a new, empty repository.</p>\n        \n        \n      "
    },
    "DeleteRepository": {
      "name": "DeleteRepository",
      "input": {
        "type": "structure",
        "members": {
          "repositoryName": {
            "type": "string",
            "pattern": "[\\w\\.-]+",
            "zonbookDocumentation": "\n        <simpara>The name of the repository to delete.</simpara>\n      ",
            "documentation": "\n        <p>The name of the repository to delete.</p>\n      ",
            "required": true,
            "shape_name": "RepositoryName",
            "min_length": 1,
            "max_length": 100
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the input of a delete repository operation.</simpara>\n      ",
        "documentation": "\n        <p>Represents the input of a delete repository operation.</p>\n      ",
        "shape_name": "DeleteRepositoryInput"
      },
      "output": {
        "type": "structure",
        "members": {
          "repositoryId": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The ID of the repository that was deleted.</simpara>\n      ",
            "documentation": "\n        <p>The ID of the repository that was deleted.</p>\n      ",
            "shape_name": "RepositoryId"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the output of a delete repository operation.</simpara>\n      ",
        "documentation": "\n        <p>Represents the output of a delete repository operation.</p>\n      ",
        "shape_name": "DeleteRepositoryOutput"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A repository name is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A repository name is required but was not specified.</p>\n      ",
          "shape_name": "RepositoryNameRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>At least one specified repository name is not valid.</simpara>\n        <note>\n            <simpara>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</simpara>\n         </note>\n      ",
          "documentation": "\n        <p>At least one specified repository name is not valid.</p>\n        <note>\n            <p>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</p>\n         </note>\n      ",
          "shape_name": "InvalidRepositoryNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption integrity check failed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption integrity check failed.</p>\n      ",
          "shape_name": "EncryptionIntegrityChecksFailedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption key could not be accessed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption key could not be accessed.</p>\n      ",
          "shape_name": "EncryptionKeyAccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is disabled.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is disabled.</p>\n      ",
          "shape_name": "EncryptionKeyDisabledException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>No encryption key was found.</simpara>\n      ",
          "documentation": "\n        <p>No encryption key was found.</p>\n      ",
          "shape_name": "EncryptionKeyNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is not available.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is not available.</p>\n      ",
          "shape_name": "EncryptionKeyUnavailableException"
        }
      ],
      "documentation": "\n        <p>Deletes a repository. If a specified repository was already deleted, a null repository ID will be returned.</p>\n        <important>\n            <p>Deleting a repository also deletes all associated objects and metadata. After a repository is deleted, all future push calls to the deleted repository will fail.</p>\n         </important>\n        \n      "
    },
    "GetRepository": {
      "name": "GetRepository",
      "input": {
        "type": "structure",
        "members": {
          "repositoryName": {
            "type": "string",
            "pattern": "[\\w\\.-]+",
            "zonbookDocumentation": "\n        <simpara>The name of the repository to get information about.</simpara>\n      ",
            "documentation": "\n        <p>The name of the repository to get information about.</p>\n      ",
            "required": true,
            "shape_name": "RepositoryName",
            "min_length": 1,
            "max_length": 100
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the input of a get repository operation.</simpara>\n      ",
        "documentation": "\n        <p>Represents the input of a get repository operation.</p>\n      ",
        "shape_name": "GetRepositoryInput"
      },
      "output": {
        "type": "structure",
        "members": {
          "repositoryMetadata": {
            "type": "structure",
            "members": {
              "accountId": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The ID of the AWS account associated with the repository.</simpara>\n      ",
                "documentation": "\n        <p>The ID of the AWS account associated with the repository.</p>\n      ",
                "shape_name": "AccountId"
              },
              "repositoryId": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The ID of the repository.</simpara>\n      ",
                "documentation": "\n        <p>The ID of the repository.</p>\n      ",
                "shape_name": "RepositoryId"
              },
              "repositoryName": {
                "type": "string",
                "pattern": "[\\w\\.-]+",
                "zonbookDocumentation": "\n        <simpara>The repository's name.</simpara>\n      ",
                "documentation": "\n        <p>The repository's name.</p>\n      ",
                "shape_name": "RepositoryName",
                "min_length": 1,
                "max_length": 100
              },
              "repositoryDescription": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>A comment or description about the repository.</simpara>\n      ",
                "documentation": "\n        <p>A comment or description about the repository.</p>\n      ",
                "shape_name": "RepositoryDescription",
                "max_length": 1000
              },
              "defaultBranch": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The repository's default branch name.</simpara>\n      ",
                "documentation": "\n        <p>The repository's default branch name.</p>\n      ",
                "shape_name": "BranchName",
                "min_length": 1,
                "max_length": 256
              },
              "lastModifiedDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date and time the repository was last modified, in timestamp format.</simpara>\n      ",
                "documentation": "\n        <p>The date and time the repository was last modified, in timestamp format.</p>\n      ",
                "shape_name": "LastModifiedDate"
              },
              "creationDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date and time the repository was created, in timestamp format.</simpara>\n      ",
                "documentation": "\n        <p>The date and time the repository was created, in timestamp format.</p>\n      ",
                "shape_name": "CreationDate"
              },
              "cloneUrlHttp": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The URL to use for cloning the repository over HTTPS.</simpara>\n      ",
                "documentation": "\n        <p>The URL to use for cloning the repository over HTTPS.</p>\n      ",
                "shape_name": "CloneUrlHttp"
              },
              "cloneUrlSsh": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The URL to use for cloning the repository over SSH.</simpara>\n      ",
                "documentation": "\n        <p>The URL to use for cloning the repository over SSH.</p>\n      ",
                "shape_name": "CloneUrlSsh"
              },
              "Arn": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of the repository.</simpara>\n      ",
                "documentation": "\n        <p>The Amazon Resource Name (ARN) of the repository.</p>\n      ",
                "shape_name": "Arn"
              }
            },
            "zonbookDocumentation": "\n        <simpara>Information about the repository.</simpara>\n      ",
            "documentation": "\n        <p>Information about the repository.</p>\n      ",
            "shape_name": "RepositoryMetadata"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the output of a get repository operation.</simpara>\n      ",
        "documentation": "\n        <p>Represents the output of a get repository operation.</p>\n      ",
        "shape_name": "GetRepositoryOutput"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A repository name is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A repository name is required but was not specified.</p>\n      ",
          "shape_name": "RepositoryNameRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified repository does not exist.</simpara>\n      ",
          "documentation": "\n        <p>The specified repository does not exist.</p>\n      ",
          "shape_name": "RepositoryDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>At least one specified repository name is not valid.</simpara>\n        <note>\n            <simpara>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</simpara>\n         </note>\n      ",
          "documentation": "\n        <p>At least one specified repository name is not valid.</p>\n        <note>\n            <p>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</p>\n         </note>\n      ",
          "shape_name": "InvalidRepositoryNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption integrity check failed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption integrity check failed.</p>\n      ",
          "shape_name": "EncryptionIntegrityChecksFailedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption key could not be accessed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption key could not be accessed.</p>\n      ",
          "shape_name": "EncryptionKeyAccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is disabled.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is disabled.</p>\n      ",
          "shape_name": "EncryptionKeyDisabledException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>No encryption key was found.</simpara>\n      ",
          "documentation": "\n        <p>No encryption key was found.</p>\n      ",
          "shape_name": "EncryptionKeyNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is not available.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is not available.</p>\n      ",
          "shape_name": "EncryptionKeyUnavailableException"
        }
      ],
      "documentation": "\n        <p>Returns information about a repository.</p>\n\n        <note>\n            <p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a web page could expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a web page.</p>\n         </note>\n        \n      "
    },
    "GetRepositoryTriggers": {
      "name": "GetRepositoryTriggers",
      "input": {
        "type": "structure",
        "members": {
          "repositoryName": {
            "type": "string",
            "pattern": "[\\w\\.-]+",
            "zonbookDocumentation": "\n        <simpara>The name of the repository for which the trigger is configured.</simpara>\n      ",
            "documentation": "\n        <p>The name of the repository for which the trigger is configured.</p>\n      ",
            "required": true,
            "shape_name": "RepositoryName",
            "min_length": 1,
            "max_length": 100
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the input of a get repository triggers operation.</simpara>\n      ",
        "documentation": "\n        <p>Represents the input of a get repository triggers operation.</p>\n      ",
        "shape_name": "GetRepositoryTriggersInput"
      },
      "output": {
        "type": "structure",
        "members": {
          "configurationId": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The system-generated unique ID for the trigger.</simpara>\n      ",
            "documentation": "\n        <p>The system-generated unique ID for the trigger.</p>\n      ",
            "shape_name": "RepositoryTriggersConfigurationId"
          },
          "triggers": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The JSON block of configuration information for each trigger.</simpara>\n      ",
            "documentation": "\n        <p>The JSON block of configuration information for each trigger.</p>\n      ",
            "shape_name": "RepositoryTriggersList",
            "members": {
              "type": "structure",
              "members": {
                "name": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>The name of the trigger.</simpara>\n      ",
                  "documentation": "\n        <p>The name of the trigger.</p>\n      ",
                  "required": true,
                  "shape_name": "RepositoryTriggerName"
                },
                "destinationArn": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>The ARN of the resource that is the target for a trigger. For example, the ARN of a topic in Amazon Simple Notification Service (SNS).</simpara>\n      ",
                  "documentation": "\n        <p>The ARN of the resource that is the target for a trigger. For example, the ARN of a topic in Amazon Simple Notification Service (SNS).</p>\n      ",
                  "required": true,
                  "shape_name": "Arn"
                },
                "customData": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>Any custom data associated with the trigger that will be included in the information sent to the target of the trigger.</simpara>\n      ",
                  "documentation": "\n        <p>Any custom data associated with the trigger that will be included in the information sent to the target of the trigger.</p>\n      ",
                  "shape_name": "RepositoryTriggerCustomData"
                },
                "branches": {
                  "type": "list",
                  "zonbookDocumentation": "\n        <simpara>The branches that will be included in the trigger configuration. If you specify an empty array, the trigger will apply to all branches.</simpara>\n        <note>\n            <simpara>While no content is required in the array, you must include the array itself.</simpara>\n        </note>\n      ",
                  "documentation": "\n        <p>The branches that will be included in the trigger configuration. If you specify an empty array, the trigger will apply to all branches.</p>\n        <note>\n            <p>While no content is required in the array, you must include the array itself.</p>\n        </note>\n      ",
                  "shape_name": "BranchNameList",
                  "members": {
                    "type": "string",
                    "shape_name": "BranchName",
                    "documentation": null,
                    "min_length": 1,
                    "max_length": 256
                  }
                },
                "events": {
                  "type": "list",
                  "zonbookDocumentation": "\n        <simpara>The repository events that will cause the trigger to run actions in another service, such as sending a notification through Amazon Simple Notification Service (SNS).  </simpara>\n         <note>\n            <simpara>The valid value \"all\" cannot be used with any other values.</simpara>\n         </note>\n      ",
                  "documentation": "\n        <p>The repository events that will cause the trigger to run actions in another service, such as sending a notification through Amazon Simple Notification Service (SNS).  </p>\n         <note>\n            <p>The valid value \"all\" cannot be used with any other values.</p>\n         </note>\n      ",
                  "required": true,
                  "shape_name": "RepositoryTriggerEventList",
                  "members": {
                    "type": "string",
                    "enum": [
                      "all",
                      "updateReference",
                      "createReference",
                      "deleteReference"
                    ],
                    "shape_name": "RepositoryTriggerEventEnum",
                    "documentation": null
                  }
                }
              },
              "zonbookDocumentation": "\n        <simpara>Information about a trigger for a repository.</simpara>\n      ",
              "documentation": "\n        <p>Information about a trigger for a repository.</p>\n      ",
              "shape_name": "RepositoryTrigger"
            }
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the output of a get repository triggers operation.</simpara>\n      ",
        "documentation": "\n        <p>Represents the output of a get repository triggers operation.</p>\n      ",
        "shape_name": "GetRepositoryTriggersOutput"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A repository name is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A repository name is required but was not specified.</p>\n      ",
          "shape_name": "RepositoryNameRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>At least one specified repository name is not valid.</simpara>\n        <note>\n            <simpara>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</simpara>\n         </note>\n      ",
          "documentation": "\n        <p>At least one specified repository name is not valid.</p>\n        <note>\n            <p>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</p>\n         </note>\n      ",
          "shape_name": "InvalidRepositoryNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified repository does not exist.</simpara>\n      ",
          "documentation": "\n        <p>The specified repository does not exist.</p>\n      ",
          "shape_name": "RepositoryDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption integrity check failed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption integrity check failed.</p>\n      ",
          "shape_name": "EncryptionIntegrityChecksFailedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption key could not be accessed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption key could not be accessed.</p>\n      ",
          "shape_name": "EncryptionKeyAccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is disabled.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is disabled.</p>\n      ",
          "shape_name": "EncryptionKeyDisabledException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>No encryption key was found.</simpara>\n      ",
          "documentation": "\n        <p>No encryption key was found.</p>\n      ",
          "shape_name": "EncryptionKeyNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is not available.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is not available.</p>\n      ",
          "shape_name": "EncryptionKeyUnavailableException"
        }
      ],
      "documentation": "\n        <p>Gets information about triggers configured for a repository.</p>\n        \n      "
    },
    "ListRepositories": {
      "name": "ListRepositories",
      "input": {
        "type": "structure",
        "members": {
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>An enumeration token that allows the operation to batch the results of the operation. \n            Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit,\n            another page of 1,000 records is retrieved.</simpara>\n      ",
            "documentation": "\n        <p>An enumeration token that allows the operation to batch the results of the operation. \n            Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit,\n            another page of 1,000 records is retrieved.</p>\n      ",
            "shape_name": "NextToken"
          },
          "sortBy": {
            "type": "string",
            "enum": [
              "repositoryName",
              "lastModifiedDate"
            ],
            "zonbookDocumentation": "\n        <simpara>The criteria used to sort the results of a list repositories operation.</simpara>\n      ",
            "documentation": "\n        <p>The criteria used to sort the results of a list repositories operation.</p>\n      ",
            "shape_name": "SortByEnum"
          },
          "order": {
            "type": "string",
            "enum": [
              "ascending",
              "descending"
            ],
            "zonbookDocumentation": "\n        <simpara>The order in which to sort the results of a list repositories operation.</simpara>\n      ",
            "documentation": "\n        <p>The order in which to sort the results of a list repositories operation.</p>\n      ",
            "shape_name": "OrderEnum"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the input of a list repositories operation.</simpara>\n      ",
        "documentation": "\n        <p>Represents the input of a list repositories operation.</p>\n      ",
        "shape_name": "ListRepositoriesInput"
      },
      "output": {
        "type": "structure",
        "members": {
          "repositories": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>Lists the repositories called by the list repositories operation.</simpara> \n      ",
            "documentation": "\n         <p>Lists the repositories called by the list repositories operation.</p> \n      ",
            "shape_name": "RepositoryNameIdPairList",
            "members": {
              "type": "structure",
              "members": {
                "repositoryName": {
                  "type": "string",
                  "pattern": "[\\w\\.-]+",
                  "zonbookDocumentation": "\n        <simpara>The name associated with the repository.</simpara>\n      ",
                  "documentation": "\n        <p>The name associated with the repository.</p>\n      ",
                  "shape_name": "RepositoryName",
                  "min_length": 1,
                  "max_length": 100
                },
                "repositoryId": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>The ID associated with the repository.</simpara>\n      ",
                  "documentation": "\n        <p>The ID associated with the repository.</p>\n      ",
                  "shape_name": "RepositoryId"
                }
              },
              "zonbookDocumentation": "\n        <simpara>Information about a repository name and ID.</simpara>\n      ",
              "documentation": "\n        <p>Information about a repository name and ID.</p>\n      ",
              "shape_name": "RepositoryNameIdPair"
            }
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>An enumeration token that allows the operation to batch the results of the operation. \n            Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, \n            another page of 1,000 records is retrieved.</simpara>\n      ",
            "documentation": "\n        <p>An enumeration token that allows the operation to batch the results of the operation. \n            Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, \n            another page of 1,000 records is retrieved.</p>\n      ",
            "shape_name": "NextToken"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the output of a list repositories operation.</simpara>\n      ",
        "documentation": "\n        <p>Represents the output of a list repositories operation.</p>\n      ",
        "shape_name": "ListRepositoriesOutput"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified sort by value is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified sort by value is not valid.</p>\n      ",
          "shape_name": "InvalidSortByException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified sort order is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified sort order is not valid.</p>\n      ",
          "shape_name": "InvalidOrderException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified continuation token is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified continuation token is not valid.</p>\n      ",
          "shape_name": "InvalidContinuationTokenException"
        }
      ],
      "documentation": "\n        <p>Gets information about one or more repositories.</p>\n        \n      "
    },
    "PutRepositoryTriggers": {
      "name": "PutRepositoryTriggers",
      "input": {
        "type": "structure",
        "members": {
          "repositoryName": {
            "type": "string",
            "pattern": "[\\w\\.-]+",
            "zonbookDocumentation": "\n        <simpara>The name of the repository where you want to create or update the trigger.</simpara>\n      ",
            "documentation": "\n        <p>The name of the repository where you want to create or update the trigger.</p>\n      ",
            "required": true,
            "shape_name": "RepositoryName",
            "min_length": 1,
            "max_length": 100
          },
          "triggers": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The JSON block of configuration information for each trigger.</simpara>\n      ",
            "documentation": "\n        <p>The JSON block of configuration information for each trigger.</p>\n      ",
            "required": true,
            "shape_name": "RepositoryTriggersList",
            "members": {
              "type": "structure",
              "members": {
                "name": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>The name of the trigger.</simpara>\n      ",
                  "documentation": "\n        <p>The name of the trigger.</p>\n      ",
                  "required": true,
                  "shape_name": "RepositoryTriggerName"
                },
                "destinationArn": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>The ARN of the resource that is the target for a trigger. For example, the ARN of a topic in Amazon Simple Notification Service (SNS).</simpara>\n      ",
                  "documentation": "\n        <p>The ARN of the resource that is the target for a trigger. For example, the ARN of a topic in Amazon Simple Notification Service (SNS).</p>\n      ",
                  "required": true,
                  "shape_name": "Arn"
                },
                "customData": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>Any custom data associated with the trigger that will be included in the information sent to the target of the trigger.</simpara>\n      ",
                  "documentation": "\n        <p>Any custom data associated with the trigger that will be included in the information sent to the target of the trigger.</p>\n      ",
                  "shape_name": "RepositoryTriggerCustomData"
                },
                "branches": {
                  "type": "list",
                  "zonbookDocumentation": "\n        <simpara>The branches that will be included in the trigger configuration. If you specify an empty array, the trigger will apply to all branches.</simpara>\n        <note>\n            <simpara>While no content is required in the array, you must include the array itself.</simpara>\n        </note>\n      ",
                  "documentation": "\n        <p>The branches that will be included in the trigger configuration. If you specify an empty array, the trigger will apply to all branches.</p>\n        <note>\n            <p>While no content is required in the array, you must include the array itself.</p>\n        </note>\n      ",
                  "shape_name": "BranchNameList",
                  "members": {
                    "type": "string",
                    "shape_name": "BranchName",
                    "documentation": null,
                    "min_length": 1,
                    "max_length": 256
                  }
                },
                "events": {
                  "type": "list",
                  "zonbookDocumentation": "\n        <simpara>The repository events that will cause the trigger to run actions in another service, such as sending a notification through Amazon Simple Notification Service (SNS).  </simpara>\n         <note>\n            <simpara>The valid value \"all\" cannot be used with any other values.</simpara>\n         </note>\n      ",
                  "documentation": "\n        <p>The repository events that will cause the trigger to run actions in another service, such as sending a notification through Amazon Simple Notification Service (SNS).  </p>\n         <note>\n            <p>The valid value \"all\" cannot be used with any other values.</p>\n         </note>\n      ",
                  "required": true,
                  "shape_name": "RepositoryTriggerEventList",
                  "members": {
                    "type": "string",
                    "enum": [
                      "all",
                      "updateReference",
                      "createReference",
                      "deleteReference"
                    ],
                    "shape_name": "RepositoryTriggerEventEnum",
                    "documentation": null
                  }
                }
              },
              "zonbookDocumentation": "\n        <simpara>Information about a trigger for a repository.</simpara>\n      ",
              "documentation": "\n        <p>Information about a trigger for a repository.</p>\n      ",
              "shape_name": "RepositoryTrigger"
            }
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the input ofa put repository triggers operation.</simpara>\n      ",
        "documentation": "\n        <p>Represents the input ofa put repository triggers operation.</p>\n      ",
        "shape_name": "PutRepositoryTriggersInput"
      },
      "output": {
        "type": "structure",
        "members": {
          "configurationId": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The system-generated unique ID for the create or update operation.</simpara>\n      ",
            "documentation": "\n        <p>The system-generated unique ID for the create or update operation.</p>\n      ",
            "shape_name": "RepositoryTriggersConfigurationId"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the output of a put repository triggers operation.</simpara>\n      ",
        "documentation": "\n        <p>Represents the output of a put repository triggers operation.</p>\n      ",
        "shape_name": "PutRepositoryTriggersOutput"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified repository does not exist.</simpara>\n      ",
          "documentation": "\n        <p>The specified repository does not exist.</p>\n      ",
          "shape_name": "RepositoryDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A repository name is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A repository name is required but was not specified.</p>\n      ",
          "shape_name": "RepositoryNameRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>At least one specified repository name is not valid.</simpara>\n        <note>\n            <simpara>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</simpara>\n         </note>\n      ",
          "documentation": "\n        <p>At least one specified repository name is not valid.</p>\n        <note>\n            <p>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</p>\n         </note>\n      ",
          "shape_name": "InvalidRepositoryNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The list of triggers for the repository is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>The list of triggers for the repository is required but was not specified.</p>\n      ",
          "shape_name": "RepositoryTriggersListRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The number of triggers allowed for the repository was exceeded.</simpara>\n      ",
          "documentation": "\n        <p>The number of triggers allowed for the repository was exceeded.</p>\n      ",
          "shape_name": "MaximumRepositoryTriggersExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The name of the trigger is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The name of the trigger is not valid.</p>\n      ",
          "shape_name": "InvalidRepositoryTriggerNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) for the trigger is not valid for the specified destination. The most common reason for this error is that the ARN does not meet the requirements for the service type.</simpara>\n      ",
          "documentation": "\n        <p>The Amazon Resource Name (ARN) for the trigger is not valid for the specified destination. The most common reason for this error is that the ARN does not meet the requirements for the service type.</p>\n      ",
          "shape_name": "InvalidRepositoryTriggerDestinationArnException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The region for the trigger target does not match the region for the repository. Triggers must be created in the same region as the target for the trigger.</simpara>\n      ",
          "documentation": "\n        <p>The region for the trigger target does not match the region for the repository. Triggers must be created in the same region as the target for the trigger.</p>\n      ",
          "shape_name": "InvalidRepositoryTriggerRegionException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The custom data provided for the trigger is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The custom data provided for the trigger is not valid.</p>\n      ",
          "shape_name": "InvalidRepositoryTriggerCustomDataException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The number of branches for the trigger was exceeded.</simpara>\n      ",
          "documentation": "\n        <p>The number of branches for the trigger was exceeded.</p>\n      ",
          "shape_name": "MaximumBranchesExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>One or more branch names specified for the trigger is not valid.</simpara>\n      ",
          "documentation": "\n        <p>One or more branch names specified for the trigger is not valid.</p>\n      ",
          "shape_name": "InvalidRepositoryTriggerBranchNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>One or more events specified for the trigger is not valid. Check to make sure that all events specified match the requirements for allowed events.</simpara>\n      ",
          "documentation": "\n        <p>One or more events specified for the trigger is not valid. Check to make sure that all events specified match the requirements for allowed events.</p>\n      ",
          "shape_name": "InvalidRepositoryTriggerEventsException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A name for the trigger is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A name for the trigger is required but was not specified.</p>\n      ",
          "shape_name": "RepositoryTriggerNameRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A destination ARN for the target service for the trigger is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A destination ARN for the target service for the trigger is required but was not specified.</p>\n      ",
          "shape_name": "RepositoryTriggerDestinationArnRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>At least one branch name is required but was not specified in the trigger configuration.</simpara>\n      ",
          "documentation": "\n        <p>At least one branch name is required but was not specified in the trigger configuration.</p>\n      ",
          "shape_name": "RepositoryTriggerBranchNameListRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>At least one event for the trigger is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>At least one event for the trigger is required but was not specified.</p>\n      ",
          "shape_name": "RepositoryTriggerEventsListRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption integrity check failed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption integrity check failed.</p>\n      ",
          "shape_name": "EncryptionIntegrityChecksFailedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption key could not be accessed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption key could not be accessed.</p>\n      ",
          "shape_name": "EncryptionKeyAccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is disabled.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is disabled.</p>\n      ",
          "shape_name": "EncryptionKeyDisabledException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>No encryption key was found.</simpara>\n      ",
          "documentation": "\n        <p>No encryption key was found.</p>\n      ",
          "shape_name": "EncryptionKeyNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is not available.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is not available.</p>\n      ",
          "shape_name": "EncryptionKeyUnavailableException"
        }
      ],
      "documentation": "\n        <p>Replaces all triggers for a repository. This can be used to create or delete triggers.</p>\n        \n      "
    },
    "TestRepositoryTriggers": {
      "name": "TestRepositoryTriggers",
      "input": {
        "type": "structure",
        "members": {
          "repositoryName": {
            "type": "string",
            "pattern": "[\\w\\.-]+",
            "zonbookDocumentation": "\n        <simpara>The name of the repository in which to test the triggers.</simpara>\n      ",
            "documentation": "\n        <p>The name of the repository in which to test the triggers.</p>\n      ",
            "required": true,
            "shape_name": "RepositoryName",
            "min_length": 1,
            "max_length": 100
          },
          "triggers": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The list of triggers to test.</simpara>\n      ",
            "documentation": "\n        <p>The list of triggers to test.</p>\n      ",
            "required": true,
            "shape_name": "RepositoryTriggersList",
            "members": {
              "type": "structure",
              "members": {
                "name": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>The name of the trigger.</simpara>\n      ",
                  "documentation": "\n        <p>The name of the trigger.</p>\n      ",
                  "required": true,
                  "shape_name": "RepositoryTriggerName"
                },
                "destinationArn": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>The ARN of the resource that is the target for a trigger. For example, the ARN of a topic in Amazon Simple Notification Service (SNS).</simpara>\n      ",
                  "documentation": "\n        <p>The ARN of the resource that is the target for a trigger. For example, the ARN of a topic in Amazon Simple Notification Service (SNS).</p>\n      ",
                  "required": true,
                  "shape_name": "Arn"
                },
                "customData": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>Any custom data associated with the trigger that will be included in the information sent to the target of the trigger.</simpara>\n      ",
                  "documentation": "\n        <p>Any custom data associated with the trigger that will be included in the information sent to the target of the trigger.</p>\n      ",
                  "shape_name": "RepositoryTriggerCustomData"
                },
                "branches": {
                  "type": "list",
                  "zonbookDocumentation": "\n        <simpara>The branches that will be included in the trigger configuration. If you specify an empty array, the trigger will apply to all branches.</simpara>\n        <note>\n            <simpara>While no content is required in the array, you must include the array itself.</simpara>\n        </note>\n      ",
                  "documentation": "\n        <p>The branches that will be included in the trigger configuration. If you specify an empty array, the trigger will apply to all branches.</p>\n        <note>\n            <p>While no content is required in the array, you must include the array itself.</p>\n        </note>\n      ",
                  "shape_name": "BranchNameList",
                  "members": {
                    "type": "string",
                    "shape_name": "BranchName",
                    "documentation": null,
                    "min_length": 1,
                    "max_length": 256
                  }
                },
                "events": {
                  "type": "list",
                  "zonbookDocumentation": "\n        <simpara>The repository events that will cause the trigger to run actions in another service, such as sending a notification through Amazon Simple Notification Service (SNS).  </simpara>\n         <note>\n            <simpara>The valid value \"all\" cannot be used with any other values.</simpara>\n         </note>\n      ",
                  "documentation": "\n        <p>The repository events that will cause the trigger to run actions in another service, such as sending a notification through Amazon Simple Notification Service (SNS).  </p>\n         <note>\n            <p>The valid value \"all\" cannot be used with any other values.</p>\n         </note>\n      ",
                  "required": true,
                  "shape_name": "RepositoryTriggerEventList",
                  "members": {
                    "type": "string",
                    "enum": [
                      "all",
                      "updateReference",
                      "createReference",
                      "deleteReference"
                    ],
                    "shape_name": "RepositoryTriggerEventEnum",
                    "documentation": null
                  }
                }
              },
              "zonbookDocumentation": "\n        <simpara>Information about a trigger for a repository.</simpara>\n      ",
              "documentation": "\n        <p>Information about a trigger for a repository.</p>\n      ",
              "shape_name": "RepositoryTrigger"
            }
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the input of a test repository triggers operation.</simpara>\n      ",
        "documentation": "\n        <p>Represents the input of a test repository triggers operation.</p>\n      ",
        "shape_name": "TestRepositoryTriggersInput"
      },
      "output": {
        "type": "structure",
        "members": {
          "successfulExecutions": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The list of triggers that were successfully tested. This list provides the names of the triggers that were successfully tested, separated by commas.</simpara>\n      ",
            "documentation": "\n        <p>The list of triggers that were successfully tested. This list provides the names of the triggers that were successfully tested, separated by commas.</p>\n      ",
            "shape_name": "RepositoryTriggerNameList",
            "members": {
              "type": "string",
              "shape_name": "RepositoryTriggerName",
              "documentation": null
            }
          },
          "failedExecutions": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The list of triggers that were not able to be tested. This list provides the names of the triggers that could not be tested, separated by commas.</simpara>\n      ",
            "documentation": "\n        <p>The list of triggers that were not able to be tested. This list provides the names of the triggers that could not be tested, separated by commas.</p>\n      ",
            "shape_name": "RepositoryTriggerExecutionFailureList",
            "members": {
              "type": "structure",
              "members": {
                "trigger": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>The name of the trigger that did not run.</simpara>\n      ",
                  "documentation": "\n        <p>The name of the trigger that did not run.</p>\n      ",
                  "shape_name": "RepositoryTriggerName"
                },
                "failureMessage": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>Additional message information about the trigger that did not run.</simpara>\n      ",
                  "documentation": "\n        <p>Additional message information about the trigger that did not run.</p>\n      ",
                  "shape_name": "RepositoryTriggerExecutionFailureMessage"
                }
              },
              "zonbookDocumentation": "\n        <simpara>A trigger failed to run.</simpara>\n      ",
              "documentation": "\n        <p>A trigger failed to run.</p>\n      ",
              "shape_name": "RepositoryTriggerExecutionFailure"
            }
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the output of a test repository triggers operation.</simpara>\n      ",
        "documentation": "\n        <p>Represents the output of a test repository triggers operation.</p>\n      ",
        "shape_name": "TestRepositoryTriggersOutput"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified repository does not exist.</simpara>\n      ",
          "documentation": "\n        <p>The specified repository does not exist.</p>\n      ",
          "shape_name": "RepositoryDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A repository name is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A repository name is required but was not specified.</p>\n      ",
          "shape_name": "RepositoryNameRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>At least one specified repository name is not valid.</simpara>\n        <note>\n            <simpara>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</simpara>\n         </note>\n      ",
          "documentation": "\n        <p>At least one specified repository name is not valid.</p>\n        <note>\n            <p>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</p>\n         </note>\n      ",
          "shape_name": "InvalidRepositoryNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The list of triggers for the repository is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>The list of triggers for the repository is required but was not specified.</p>\n      ",
          "shape_name": "RepositoryTriggersListRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The number of triggers allowed for the repository was exceeded.</simpara>\n      ",
          "documentation": "\n        <p>The number of triggers allowed for the repository was exceeded.</p>\n      ",
          "shape_name": "MaximumRepositoryTriggersExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The name of the trigger is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The name of the trigger is not valid.</p>\n      ",
          "shape_name": "InvalidRepositoryTriggerNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) for the trigger is not valid for the specified destination. The most common reason for this error is that the ARN does not meet the requirements for the service type.</simpara>\n      ",
          "documentation": "\n        <p>The Amazon Resource Name (ARN) for the trigger is not valid for the specified destination. The most common reason for this error is that the ARN does not meet the requirements for the service type.</p>\n      ",
          "shape_name": "InvalidRepositoryTriggerDestinationArnException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The region for the trigger target does not match the region for the repository. Triggers must be created in the same region as the target for the trigger.</simpara>\n      ",
          "documentation": "\n        <p>The region for the trigger target does not match the region for the repository. Triggers must be created in the same region as the target for the trigger.</p>\n      ",
          "shape_name": "InvalidRepositoryTriggerRegionException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The custom data provided for the trigger is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The custom data provided for the trigger is not valid.</p>\n      ",
          "shape_name": "InvalidRepositoryTriggerCustomDataException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The number of branches for the trigger was exceeded.</simpara>\n      ",
          "documentation": "\n        <p>The number of branches for the trigger was exceeded.</p>\n      ",
          "shape_name": "MaximumBranchesExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>One or more branch names specified for the trigger is not valid.</simpara>\n      ",
          "documentation": "\n        <p>One or more branch names specified for the trigger is not valid.</p>\n      ",
          "shape_name": "InvalidRepositoryTriggerBranchNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>One or more events specified for the trigger is not valid. Check to make sure that all events specified match the requirements for allowed events.</simpara>\n      ",
          "documentation": "\n        <p>One or more events specified for the trigger is not valid. Check to make sure that all events specified match the requirements for allowed events.</p>\n      ",
          "shape_name": "InvalidRepositoryTriggerEventsException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A name for the trigger is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A name for the trigger is required but was not specified.</p>\n      ",
          "shape_name": "RepositoryTriggerNameRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A destination ARN for the target service for the trigger is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A destination ARN for the target service for the trigger is required but was not specified.</p>\n      ",
          "shape_name": "RepositoryTriggerDestinationArnRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>At least one branch name is required but was not specified in the trigger configuration.</simpara>\n      ",
          "documentation": "\n        <p>At least one branch name is required but was not specified in the trigger configuration.</p>\n      ",
          "shape_name": "RepositoryTriggerBranchNameListRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>At least one event for the trigger is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>At least one event for the trigger is required but was not specified.</p>\n      ",
          "shape_name": "RepositoryTriggerEventsListRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption integrity check failed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption integrity check failed.</p>\n      ",
          "shape_name": "EncryptionIntegrityChecksFailedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption key could not be accessed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption key could not be accessed.</p>\n      ",
          "shape_name": "EncryptionKeyAccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is disabled.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is disabled.</p>\n      ",
          "shape_name": "EncryptionKeyDisabledException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>No encryption key was found.</simpara>\n      ",
          "documentation": "\n        <p>No encryption key was found.</p>\n      ",
          "shape_name": "EncryptionKeyNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is not available.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is not available.</p>\n      ",
          "shape_name": "EncryptionKeyUnavailableException"
        }
      ],
      "documentation": "\n        <p>Tests the functionality of repository triggers by sending information to the trigger target. If real data is available in the repository, \n            the test will send data from the last commit. If no data is available, sample data will be generated.</p>\n        \n      "
    },
    "UpdateRepositoryDescription": {
      "name": "UpdateRepositoryDescription",
      "input": {
        "type": "structure",
        "members": {
          "repositoryName": {
            "type": "string",
            "pattern": "[\\w\\.-]+",
            "zonbookDocumentation": "\n        <simpara>The name of the repository to set or change the comment or description for.</simpara>\n      ",
            "documentation": "\n        <p>The name of the repository to set or change the comment or description for.</p>\n      ",
            "required": true,
            "shape_name": "RepositoryName",
            "min_length": 1,
            "max_length": 100
          },
          "repositoryDescription": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The new comment or description for the specified repository. Repository descriptions are limited to 1,000 characters.</simpara>\n        \n      ",
            "documentation": "\n        <p>The new comment or description for the specified repository. Repository descriptions are limited to 1,000 characters.</p>\n        \n      ",
            "shape_name": "RepositoryDescription",
            "max_length": 1000
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the input of an update repository description operation.</simpara>\n      ",
        "documentation": "\n        <p>Represents the input of an update repository description operation.</p>\n      ",
        "shape_name": "UpdateRepositoryDescriptionInput"
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A repository name is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A repository name is required but was not specified.</p>\n      ",
          "shape_name": "RepositoryNameRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified repository does not exist.</simpara>\n      ",
          "documentation": "\n        <p>The specified repository does not exist.</p>\n      ",
          "shape_name": "RepositoryDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>At least one specified repository name is not valid.</simpara>\n        <note>\n            <simpara>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</simpara>\n         </note>\n      ",
          "documentation": "\n        <p>At least one specified repository name is not valid.</p>\n        <note>\n            <p>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</p>\n         </note>\n      ",
          "shape_name": "InvalidRepositoryNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified repository description is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified repository description is not valid.</p>\n      ",
          "shape_name": "InvalidRepositoryDescriptionException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption integrity check failed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption integrity check failed.</p>\n      ",
          "shape_name": "EncryptionIntegrityChecksFailedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption key could not be accessed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption key could not be accessed.</p>\n      ",
          "shape_name": "EncryptionKeyAccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is disabled.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is disabled.</p>\n      ",
          "shape_name": "EncryptionKeyDisabledException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>No encryption key was found.</simpara>\n      ",
          "documentation": "\n        <p>No encryption key was found.</p>\n      ",
          "shape_name": "EncryptionKeyNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is not available.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is not available.</p>\n      ",
          "shape_name": "EncryptionKeyUnavailableException"
        }
      ],
      "documentation": "\n        <p>Sets or changes the comment or description for a repository.</p>\n        <note>\n            <p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a web page could expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a web page.</p>\n         </note>\n        \n      "
    },
    "UpdateRepositoryName": {
      "name": "UpdateRepositoryName",
      "input": {
        "type": "structure",
        "members": {
          "oldName": {
            "type": "string",
            "pattern": "[\\w\\.-]+",
            "zonbookDocumentation": "\n        <simpara>The existing name of the repository.</simpara>\n      ",
            "documentation": "\n        <p>The existing name of the repository.</p>\n      ",
            "required": true,
            "shape_name": "RepositoryName",
            "min_length": 1,
            "max_length": 100
          },
          "newName": {
            "type": "string",
            "pattern": "[\\w\\.-]+",
            "zonbookDocumentation": "\n        <simpara>The new name for the repository.</simpara>\n        \n      ",
            "documentation": "\n        <p>The new name for the repository.</p>\n        \n      ",
            "required": true,
            "shape_name": "RepositoryName",
            "min_length": 1,
            "max_length": 100
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the input of an update repository description operation.</simpara>\n      ",
        "documentation": "\n        <p>Represents the input of an update repository description operation.</p>\n      ",
        "shape_name": "UpdateRepositoryNameInput"
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified repository does not exist.</simpara>\n      ",
          "documentation": "\n        <p>The specified repository does not exist.</p>\n      ",
          "shape_name": "RepositoryDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified repository name already exists.</simpara>\n      ",
          "documentation": "\n        <p>The specified repository name already exists.</p>\n      ",
          "shape_name": "RepositoryNameExistsException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A repository name is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A repository name is required but was not specified.</p>\n      ",
          "shape_name": "RepositoryNameRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>At least one specified repository name is not valid.</simpara>\n        <note>\n            <simpara>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</simpara>\n         </note>\n      ",
          "documentation": "\n        <p>At least one specified repository name is not valid.</p>\n        <note>\n            <p>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</p>\n         </note>\n      ",
          "shape_name": "InvalidRepositoryNameException"
        }
      ],
      "documentation": "\n        <p>Renames a repository. The repository name must be unique across the calling AWS account. In addition, repository names are limited to 100 \n            alphanumeric, dash, and underscore characters, and cannot include certain characters. \n            The suffix \".git\" is prohibited.  For a full description of the limits on repository names, see \n            <a href=\"http://docs.aws.amazon.com/codecommit/latest/userguide/limits.html\">Limits</a> in the AWS CodeCommit User Guide.</p>\n        \n         \n      "
    },
    "UpdateDefaultBranch": {
      "name": "UpdateDefaultBranch",
      "input": {
        "type": "structure",
        "members": {
          "repositoryName": {
            "type": "string",
            "pattern": "[\\w\\.-]+",
            "zonbookDocumentation": "\n        <simpara>The name of the repository to set or change the default branch for.</simpara>\n      ",
            "documentation": "\n        <p>The name of the repository to set or change the default branch for.</p>\n      ",
            "required": true,
            "shape_name": "RepositoryName",
            "min_length": 1,
            "max_length": 100
          },
          "defaultBranchName": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The name of the branch to set as the default.</simpara>\n      ",
            "documentation": "\n        <p>The name of the branch to set as the default.</p>\n      ",
            "required": true,
            "shape_name": "BranchName",
            "min_length": 1,
            "max_length": 256
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the input of an update default branch operation.</simpara>\n      ",
        "documentation": "\n        <p>Represents the input of an update default branch operation.</p>\n      ",
        "shape_name": "UpdateDefaultBranchInput"
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A repository name is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A repository name is required but was not specified.</p>\n      ",
          "shape_name": "RepositoryNameRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified repository does not exist.</simpara>\n      ",
          "documentation": "\n        <p>The specified repository does not exist.</p>\n      ",
          "shape_name": "RepositoryDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>At least one specified repository name is not valid.</simpara>\n        <note>\n            <simpara>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</simpara>\n         </note>\n      ",
          "documentation": "\n        <p>At least one specified repository name is not valid.</p>\n        <note>\n            <p>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</p>\n         </note>\n      ",
          "shape_name": "InvalidRepositoryNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A branch name is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A branch name is required but was not specified.</p>\n      ",
          "shape_name": "BranchNameRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified reference name is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified reference name is not valid.</p>\n      ",
          "shape_name": "InvalidBranchNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified branch does not exist.</simpara>\n      ",
          "documentation": "\n        <p>The specified branch does not exist.</p>\n      ",
          "shape_name": "BranchDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption integrity check failed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption integrity check failed.</p>\n      ",
          "shape_name": "EncryptionIntegrityChecksFailedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption key could not be accessed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption key could not be accessed.</p>\n      ",
          "shape_name": "EncryptionKeyAccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is disabled.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is disabled.</p>\n      ",
          "shape_name": "EncryptionKeyDisabledException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>No encryption key was found.</simpara>\n      ",
          "documentation": "\n        <p>No encryption key was found.</p>\n      ",
          "shape_name": "EncryptionKeyNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is not available.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is not available.</p>\n      ",
          "shape_name": "EncryptionKeyUnavailableException"
        }
      ],
      "documentation": "\n        <p>Sets or changes the default branch name for the specified repository.</p> \n        <note>\n            <p>If you use this operation to change the default branch name to the current default branch name, a success message is returned even though the default branch did not change.</p>\n         </note>\n        \n      "
    },
    "GetBlob": {
      "name": "GetBlob",
      "input": {
        "type": "structure",
        "members": {
          "repositoryName": {
            "type": "string",
            "pattern": "[\\w\\.-]+",
            "zonbookDocumentation": "\n        <simpara>The name of the repository that contains the blob.</simpara>\n      ",
            "documentation": "\n        <p>The name of the repository that contains the blob.</p>\n      ",
            "required": true,
            "shape_name": "RepositoryName",
            "min_length": 1,
            "max_length": 100
          },
          "blobId": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The ID of the blob, which is its SHA-1 pointer.</simpara>\n      ",
            "documentation": "\n        <p>The ID of the blob, which is its SHA-1 pointer.</p>\n      ",
            "required": true,
            "shape_name": "ObjectId"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the input of a get blob operation.</simpara>\n      ",
        "documentation": "\n        <p>Represents the input of a get blob operation.</p>\n      ",
        "shape_name": "GetBlobInput"
      },
      "output": {
        "type": "structure",
        "members": {
          "content": {
            "type": "blob",
            "zonbookDocumentation": "\n        <simpara>The content of the blob, usually a file.</simpara>\n      ",
            "documentation": "\n        <p>The content of the blob, usually a file.</p>\n      ",
            "required": true,
            "shape_name": "blob"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the output of a get blob operation.</simpara>\n      ",
        "documentation": "\n        <p>Represents the output of a get blob operation.</p>\n      ",
        "shape_name": "GetBlobOutput"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A repository name is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A repository name is required but was not specified.</p>\n      ",
          "shape_name": "RepositoryNameRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>At least one specified repository name is not valid.</simpara>\n        <note>\n            <simpara>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</simpara>\n         </note>\n      ",
          "documentation": "\n        <p>At least one specified repository name is not valid.</p>\n        <note>\n            <p>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</p>\n         </note>\n      ",
          "shape_name": "InvalidRepositoryNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified repository does not exist.</simpara>\n      ",
          "documentation": "\n        <p>The specified repository does not exist.</p>\n      ",
          "shape_name": "RepositoryDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A blob ID is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A blob ID is required but was not specified.</p>\n      ",
          "shape_name": "BlobIdRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified blob is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified blob is not valid.</p>\n      ",
          "shape_name": "InvalidBlobIdException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified blob does not exist.</simpara>\n      ",
          "documentation": "\n        <p>The specified blob does not exist.</p>\n      ",
          "shape_name": "BlobIdDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption integrity check failed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption integrity check failed.</p>\n      ",
          "shape_name": "EncryptionIntegrityChecksFailedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption key could not be accessed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption key could not be accessed.</p>\n      ",
          "shape_name": "EncryptionKeyAccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is disabled.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is disabled.</p>\n      ",
          "shape_name": "EncryptionKeyDisabledException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>No encryption key was found.</simpara>\n      ",
          "documentation": "\n        <p>No encryption key was found.</p>\n      ",
          "shape_name": "EncryptionKeyNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is not available.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is not available.</p>\n      ",
          "shape_name": "EncryptionKeyUnavailableException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified file exceeds the file size limit for AWS CodeCommit. For more information about limits in AWS CodeCommit, see\n            <ulink url=\"http://docs.aws.amazon.com/codecommit/latest/userguide/limits.html\">AWS CodeCommit User Guide</ulink>.</simpara>\n      ",
          "documentation": "\n        <p>The specified file exceeds the file size limit for AWS CodeCommit. For more information about limits in AWS CodeCommit, see\n            <a href=\"http://docs.aws.amazon.com/codecommit/latest/userguide/limits.html\">AWS CodeCommit User Guide</a>.</p>\n      ",
          "shape_name": "FileTooLargeException"
        }
      ],
      "documentation": "\n        <p>Returns the base-64 encoded content of an individual blob within a repository.</p>\n      "
    },
    "GetFile": {
      "name": "GetFile",
      "input": {
        "type": "structure",
        "members": {
          "repositoryName": {
            "type": "string",
            "pattern": "[\\w\\.-]+",
            "zonbookDocumentation": "\n        <para>The name of the repository that contains the file.</para>\n      ",
            "documentation": "\n        <p>The name of the repository that contains the file.</p>\n      ",
            "required": true,
            "shape_name": "RepositoryName",
            "min_length": 1,
            "max_length": 100
          },
          "commitSpecifier": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>The fully-quaified reference that identifies the commit that contains the file. For example, you could specify a full commit ID,\n        a tag, a branch name, or a reference such as refs/heads/master. If none is provided, then the head commit will be used.</para>\n      ",
            "documentation": "\n        <p>The fully-quaified reference that identifies the commit that contains the file. For example, you could specify a full commit ID,\n        a tag, a branch name, or a reference such as refs/heads/master. If none is provided, then the head commit will be used.</p>\n      ",
            "shape_name": "CommitName"
          },
          "filePath": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>The fully-qualified path to the file, including the full name and extension of the file. For example, /examples/file.md\n             is the fully-qualified path to a file named file.md in a folder named examples.</para>\n      ",
            "documentation": "\n        <p>The fully-qualified path to the file, including the full name and extension of the file. For example, /examples/file.md\n             is the fully-qualified path to a file named file.md in a folder named examples.</p>\n      ",
            "required": true,
            "shape_name": "Path"
          }
        },
        "shape_name": "GetFileInput",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "commitId": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>The full commit ID of the commit that contains the content returned by GetFile.</para>\n      ",
            "documentation": "\n        <p>The full commit ID of the commit that contains the content returned by GetFile.</p>\n      ",
            "required": true,
            "shape_name": "ObjectId"
          },
          "blobId": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>The blob ID of the object that represents the file content.</para>\n      ",
            "documentation": "\n        <p>The blob ID of the object that represents the file content.</p>\n      ",
            "required": true,
            "shape_name": "ObjectId"
          },
          "filePath": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>The fully qualified path to the specified file. This returns the name and extension of the file.</para>\n      ",
            "documentation": "\n        <p>The fully qualified path to the specified file. This returns the name and extension of the file.</p>\n      ",
            "required": true,
            "shape_name": "Path"
          },
          "fileMode": {
            "type": "string",
            "enum": [
              "EXECUTABLE",
              "NORMAL",
              "SYMLINK"
            ],
            "zonbookDocumentation": "\n        <para>The extrapolated file mode permissions of the blob. Valid values include strings such as EXECUTABLE and not numeric values.</para>\n        <note>\n            <para>The file mode permissions returned by this API are not the standard file mode permission values, such as 100644, but rather \n            extrapolated values. See below for a full list of supported return values.</para>\n        </note>\n      ",
            "documentation": "\n        <p>The extrapolated file mode permissions of the blob. Valid values include strings such as EXECUTABLE and not numeric values.</p>\n        <note>\n            <p>The file mode permissions returned by this API are not the standard file mode permission values, such as 100644, but rather \n            extrapolated values. See below for a full list of supported return values.</p>\n        </note>\n      ",
            "required": true,
            "shape_name": "FileModeTypeEnum"
          },
          "fileSize": {
            "type": "long",
            "zonbookDocumentation": "\n        <para>The size of the contents of the file, in bytes.</para>\n      ",
            "documentation": "\n        <p>The size of the contents of the file, in bytes.</p>\n      ",
            "required": true,
            "shape_name": "ObjectSize"
          },
          "fileContent": {
            "type": "blob",
            "zonbookDocumentation": "\n        <para>The base-64 encoded binary data object that represents the content of the file.</para>\n      ",
            "documentation": "\n        <p>The base-64 encoded binary data object that represents the content of the file.</p>\n      ",
            "required": true,
            "shape_name": "FileContent",
            "max_length": 6291456
          }
        },
        "shape_name": "GetFileOutput",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A repository name is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A repository name is required but was not specified.</p>\n      ",
          "shape_name": "RepositoryNameRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>At least one specified repository name is not valid.</simpara>\n        <note>\n            <simpara>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</simpara>\n         </note>\n      ",
          "documentation": "\n        <p>At least one specified repository name is not valid.</p>\n        <note>\n            <p>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</p>\n         </note>\n      ",
          "shape_name": "InvalidRepositoryNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified repository does not exist.</simpara>\n      ",
          "documentation": "\n        <p>The specified repository does not exist.</p>\n      ",
          "shape_name": "RepositoryDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified commit is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified commit is not valid.</p>\n      ",
          "shape_name": "InvalidCommitException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified commit does not exist or no commit was specified, and the specified repository has no default branch.</simpara>\n      ",
          "documentation": "\n        <p>The specified commit does not exist or no commit was specified, and the specified repository has no default branch.</p>\n      ",
          "shape_name": "CommitDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The folderPath for a location cannot be null.</simpara>\n      ",
          "documentation": "\n        <p>The folderPath for a location cannot be null.</p>\n      ",
          "shape_name": "PathRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified path is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified path is not valid.</p>\n      ",
          "shape_name": "InvalidPathException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The specified file does not exist. Verify that you have provided the correct name of the file, including its full path and extension.</para>\n      ",
          "documentation": "\n        <p>The specified file does not exist. Verify that you have provided the correct name of the file, including its full path and extension.</p>\n      ",
          "shape_name": "FileDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption integrity check failed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption integrity check failed.</p>\n      ",
          "shape_name": "EncryptionIntegrityChecksFailedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption key could not be accessed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption key could not be accessed.</p>\n      ",
          "shape_name": "EncryptionKeyAccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is disabled.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is disabled.</p>\n      ",
          "shape_name": "EncryptionKeyDisabledException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>No encryption key was found.</simpara>\n      ",
          "documentation": "\n        <p>No encryption key was found.</p>\n      ",
          "shape_name": "EncryptionKeyNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is not available.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is not available.</p>\n      ",
          "shape_name": "EncryptionKeyUnavailableException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified file exceeds the file size limit for AWS CodeCommit. For more information about limits in AWS CodeCommit, see\n            <ulink url=\"http://docs.aws.amazon.com/codecommit/latest/userguide/limits.html\">AWS CodeCommit User Guide</ulink>.</simpara>\n      ",
          "documentation": "\n        <p>The specified file exceeds the file size limit for AWS CodeCommit. For more information about limits in AWS CodeCommit, see\n            <a href=\"http://docs.aws.amazon.com/codecommit/latest/userguide/limits.html\">AWS CodeCommit User Guide</a>.</p>\n      ",
          "shape_name": "FileTooLargeException"
        }
      ],
      "documentation": "\n        <p>Returns the base-64 encoded contents of a specified file and its metadata.</p>\n        \n        \n      "
    },
    "GetCommit": {
      "name": "GetCommit",
      "input": {
        "type": "structure",
        "members": {
          "repositoryName": {
            "type": "string",
            "pattern": "[\\w\\.-]+",
            "zonbookDocumentation": "\n        <simpara>The name of the repository to which the commit was made.</simpara>\n      ",
            "documentation": "\n        <p>The name of the repository to which the commit was made.</p>\n      ",
            "required": true,
            "shape_name": "RepositoryName",
            "min_length": 1,
            "max_length": 100
          },
          "commitId": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The commit ID. Commit IDs are the full SHA of the commit.</simpara>\n      ",
            "documentation": "\n        <p>The commit ID. Commit IDs are the full SHA of the commit.</p>\n      ",
            "required": true,
            "shape_name": "ObjectId"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the input of a get commit operation.</simpara>\n      ",
        "documentation": "\n        <p>Represents the input of a get commit operation.</p>\n      ",
        "shape_name": "GetCommitInput"
      },
      "output": {
        "type": "structure",
        "members": {
          "commit": {
            "type": "structure",
            "members": {
              "commitId": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The full SHA of the specified commit. </simpara>\n      ",
                "documentation": "\n        <p>The full SHA of the specified commit. </p>\n      ",
                "shape_name": "ObjectId"
              },
              "treeId": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>Tree information for the specified commit.</simpara>\n      ",
                "documentation": "\n        <p>Tree information for the specified commit.</p>\n      ",
                "shape_name": "ObjectId"
              },
              "parents": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>A list of parent commits for the specified commit. Each parent commit ID is the full commit ID.</simpara>\n      ",
                "documentation": "\n        <p>A list of parent commits for the specified commit. Each parent commit ID is the full commit ID.</p>\n      ",
                "shape_name": "ParentList",
                "members": {
                  "type": "string",
                  "shape_name": "ObjectId",
                  "documentation": null
                }
              },
              "message": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The commit message associated with the specified commit.</simpara>\n      ",
                "documentation": "\n        <p>The commit message associated with the specified commit.</p>\n      ",
                "shape_name": "Message"
              },
              "author": {
                "type": "structure",
                "members": {
                  "name": {
                    "type": "string",
                    "zonbookDocumentation": "\n        <simpara>The name of the user who made the specified commit.</simpara>\n      ",
                    "documentation": "\n        <p>The name of the user who made the specified commit.</p>\n      ",
                    "shape_name": "Name"
                  },
                  "email": {
                    "type": "string",
                    "zonbookDocumentation": "\n        <simpara>The email address associated with the user who made the commit, if any.</simpara>\n      ",
                    "documentation": "\n        <p>The email address associated with the user who made the commit, if any.</p>\n      ",
                    "shape_name": "Email"
                  },
                  "date": {
                    "type": "string",
                    "zonbookDocumentation": "\n        <simpara>The date when the specified commit was commited, in timestamp format with GMT offset.</simpara>\n      ",
                    "documentation": "\n        <p>The date when the specified commit was commited, in timestamp format with GMT offset.</p>\n      ",
                    "shape_name": "Date"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>Information about the author of the specified commit. Information includes \n            the date in timestamp format with GMT offset, the name of the author, and the email address for the author, as configured \n            in Git.</simpara>\n      ",
                "documentation": "\n        <p>Information about the author of the specified commit. Information includes \n            the date in timestamp format with GMT offset, the name of the author, and the email address for the author, as configured \n            in Git.</p>\n      ",
                "shape_name": "UserInfo"
              },
              "committer": {
                "type": "structure",
                "members": {
                  "name": {
                    "type": "string",
                    "zonbookDocumentation": "\n        <simpara>The name of the user who made the specified commit.</simpara>\n      ",
                    "documentation": "\n        <p>The name of the user who made the specified commit.</p>\n      ",
                    "shape_name": "Name"
                  },
                  "email": {
                    "type": "string",
                    "zonbookDocumentation": "\n        <simpara>The email address associated with the user who made the commit, if any.</simpara>\n      ",
                    "documentation": "\n        <p>The email address associated with the user who made the commit, if any.</p>\n      ",
                    "shape_name": "Email"
                  },
                  "date": {
                    "type": "string",
                    "zonbookDocumentation": "\n        <simpara>The date when the specified commit was commited, in timestamp format with GMT offset.</simpara>\n      ",
                    "documentation": "\n        <p>The date when the specified commit was commited, in timestamp format with GMT offset.</p>\n      ",
                    "shape_name": "Date"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>Information about the person who committed the specified commit, also known as the committer. Information includes \n        the date in timestamp format with GMT offset, the name of the committer, and the email address for the committer, as configured \n        in Git.</simpara>\n        <simpara>For more information\n            about the difference between an author and a committer in Git, see <ulink url=\"http://git-scm.com/book/ch2-3.html\">Viewing the Commit History</ulink> in Pro Git\n            by Scott Chacon and Ben Straub.</simpara>\n      ",
                "documentation": "\n        <p>Information about the person who committed the specified commit, also known as the committer. Information includes \n        the date in timestamp format with GMT offset, the name of the committer, and the email address for the committer, as configured \n        in Git.</p>\n        <p>For more information\n            about the difference between an author and a committer in Git, see <a href=\"http://git-scm.com/book/ch2-3.html\">Viewing the Commit History</a> in Pro Git\n            by Scott Chacon and Ben Straub.</p>\n      ",
                "shape_name": "UserInfo"
              },
              "additionalData": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>Any additional data associated with the specified commit.</simpara>\n      ",
                "documentation": "\n        <p>Any additional data associated with the specified commit.</p>\n      ",
                "shape_name": "AdditionalData"
              }
            },
            "zonbookDocumentation": "\n        <simpara>A commit data type object that contains information about the specified commit.</simpara>\n      ",
            "documentation": "\n        <p>A commit data type object that contains information about the specified commit.</p>\n      ",
            "required": true,
            "shape_name": "Commit"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the output of a get commit operation.</simpara>\n      ",
        "documentation": "\n        <p>Represents the output of a get commit operation.</p>\n      ",
        "shape_name": "GetCommitOutput"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A repository name is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A repository name is required but was not specified.</p>\n      ",
          "shape_name": "RepositoryNameRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>At least one specified repository name is not valid.</simpara>\n        <note>\n            <simpara>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</simpara>\n         </note>\n      ",
          "documentation": "\n        <p>At least one specified repository name is not valid.</p>\n        <note>\n            <p>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</p>\n         </note>\n      ",
          "shape_name": "InvalidRepositoryNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified repository does not exist.</simpara>\n      ",
          "documentation": "\n        <p>The specified repository does not exist.</p>\n      ",
          "shape_name": "RepositoryDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A commit ID was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A commit ID was not specified.</p>\n      ",
          "shape_name": "CommitIdRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified commit ID is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified commit ID is not valid.</p>\n      ",
          "shape_name": "InvalidCommitIdException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified commit ID does not exist.</simpara>\n      ",
          "documentation": "\n        <p>The specified commit ID does not exist.</p>\n      ",
          "shape_name": "CommitIdDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption integrity check failed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption integrity check failed.</p>\n      ",
          "shape_name": "EncryptionIntegrityChecksFailedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption key could not be accessed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption key could not be accessed.</p>\n      ",
          "shape_name": "EncryptionKeyAccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is disabled.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is disabled.</p>\n      ",
          "shape_name": "EncryptionKeyDisabledException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>No encryption key was found.</simpara>\n      ",
          "documentation": "\n        <p>No encryption key was found.</p>\n      ",
          "shape_name": "EncryptionKeyNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is not available.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is not available.</p>\n      ",
          "shape_name": "EncryptionKeyUnavailableException"
        }
      ],
      "documentation": "\n        <p>Returns information about a commit, including commit message and committer information.</p>\n        \n      "
    },
    "GetDifferences": {
      "name": "GetDifferences",
      "input": {
        "type": "structure",
        "members": {
          "repositoryName": {
            "type": "string",
            "pattern": "[\\w\\.-]+",
            "zonbookDocumentation": "\n        <simpara>The name of the repository where you want to get differences.</simpara>\n      ",
            "documentation": "\n        <p>The name of the repository where you want to get differences.</p>\n      ",
            "required": true,
            "shape_name": "RepositoryName",
            "min_length": 1,
            "max_length": 100
          },
          "beforeCommitSpecifier": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, the full \n        commit ID. Optional. If not specified, all changes prior to the <code>afterCommitSpecifier</code> value will be shown. \n            If you do not use <code>beforeCommitSpecifier</code> in your request, consider limiting \n        the results with <code>maxResults</code>.</simpara>\n      ",
            "documentation": "\n        <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, the full \n        commit ID. Optional. If not specified, all changes prior to the <code>afterCommitSpecifier</code> value will be shown. \n            If you do not use <code>beforeCommitSpecifier</code> in your request, consider limiting \n        the results with <code>maxResults</code>.</p>\n      ",
            "shape_name": "CommitName"
          },
          "afterCommitSpecifier": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The branch, tag, HEAD, or other fully qualified reference used to identify a commit.</simpara>\n      ",
            "documentation": "\n        <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit.</p>\n      ",
            "required": true,
            "shape_name": "CommitName"
          },
          "beforePath": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The file path in which to check for differences. Limits the results to this path. Can also be used to specify the previous \n        name of a directory or folder. If <code>beforePath</code> and <code>afterPath</code> are not specified, differences will be shown for all paths.</simpara>\n      ",
            "documentation": "\n        <p>The file path in which to check for differences. Limits the results to this path. Can also be used to specify the previous \n        name of a directory or folder. If <code>beforePath</code> and <code>afterPath</code> are not specified, differences will be shown for all paths.</p>\n      ",
            "shape_name": "Path"
          },
          "afterPath": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The file path in which to check differences. Limits the results to this path. Can also be used to specify the changed name \n            of a directory or folder, if it has changed. If not specified, differences will be shown for all paths.</simpara>\n      ",
            "documentation": "\n        <p>The file path in which to check differences. Limits the results to this path. Can also be used to specify the changed name \n            of a directory or folder, if it has changed. If not specified, differences will be shown for all paths.</p>\n      ",
            "shape_name": "Path"
          },
          "MaxResults": {
            "type": "integer",
            "box": true,
            "zonbookDocumentation": "\n        <simpara>A non-negative integer used to limit the number of returned results.</simpara>\n      ",
            "documentation": "\n        <p>A non-negative integer used to limit the number of returned results.</p>\n      ",
            "shape_name": "Limit"
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>An enumeration token that when provided in a request, returns the next batch of the results.</simpara>\n      ",
            "documentation": "\n        <p>An enumeration token that when provided in a request, returns the next batch of the results.</p>\n      ",
            "shape_name": "NextToken"
          }
        },
        "shape_name": "GetDifferencesInput",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "differences": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>A differences data type object that contains information about the differences, including whether the difference is added, \n            modified, or deleted (A, D, M).</simpara>\n      ",
            "documentation": "\n        <p>A differences data type object that contains information about the differences, including whether the difference is added, \n            modified, or deleted (A, D, M).</p>\n      ",
            "shape_name": "DifferenceList",
            "members": {
              "type": "structure",
              "members": {
                "beforeBlob": {
                  "type": "structure",
                  "members": {
                    "blobId": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The full ID of the blob.</simpara>\n      ",
                      "documentation": "\n        <p>The full ID of the blob.</p>\n      ",
                      "shape_name": "ObjectId"
                    },
                    "path": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The path to the blob and any associated file name, if any.</simpara>\n      ",
                      "documentation": "\n        <p>The path to the blob and any associated file name, if any.</p>\n      ",
                      "shape_name": "Path"
                    },
                    "mode": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The file mode permissions of the blob. File mode permission codes include:</simpara>\n        <itemizedlist>\n            <listitem>\n               <simpara>\n                  <code>100644</code> indicates read/write</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>100755</code> indicates read/write/execute</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>160000</code> indicates a submodule</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>120000</code> indicates a symlink</simpara>\n            </listitem>\n        </itemizedlist>\n      ",
                      "documentation": "\n        <p>The file mode permissions of the blob. File mode permission codes include:</p>\n        <ul>\n            <li>\n               <p>\n                  <code>100644</code> indicates read/write</p>\n            </li>\n            <li>\n               <p>\n                  <code>100755</code> indicates read/write/execute</p>\n            </li>\n            <li>\n               <p>\n                  <code>160000</code> indicates a submodule</p>\n            </li>\n            <li>\n               <p>\n                  <code>120000</code> indicates a symlink</p>\n            </li>\n         </ul>\n      ",
                      "shape_name": "Mode"
                    }
                  },
                  "zonbookDocumentation": "\n        <simpara>Information about a <code>beforeBlob</code> data type object, including the ID, \n            the file mode permission code, and the path.</simpara>\n      ",
                  "documentation": "\n        <p>Information about a <code>beforeBlob</code> data type object, including the ID, \n            the file mode permission code, and the path.</p>\n      ",
                  "shape_name": "BlobMetadata"
                },
                "afterBlob": {
                  "type": "structure",
                  "members": {
                    "blobId": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The full ID of the blob.</simpara>\n      ",
                      "documentation": "\n        <p>The full ID of the blob.</p>\n      ",
                      "shape_name": "ObjectId"
                    },
                    "path": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The path to the blob and any associated file name, if any.</simpara>\n      ",
                      "documentation": "\n        <p>The path to the blob and any associated file name, if any.</p>\n      ",
                      "shape_name": "Path"
                    },
                    "mode": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The file mode permissions of the blob. File mode permission codes include:</simpara>\n        <itemizedlist>\n            <listitem>\n               <simpara>\n                  <code>100644</code> indicates read/write</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>100755</code> indicates read/write/execute</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>160000</code> indicates a submodule</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>120000</code> indicates a symlink</simpara>\n            </listitem>\n        </itemizedlist>\n      ",
                      "documentation": "\n        <p>The file mode permissions of the blob. File mode permission codes include:</p>\n        <ul>\n            <li>\n               <p>\n                  <code>100644</code> indicates read/write</p>\n            </li>\n            <li>\n               <p>\n                  <code>100755</code> indicates read/write/execute</p>\n            </li>\n            <li>\n               <p>\n                  <code>160000</code> indicates a submodule</p>\n            </li>\n            <li>\n               <p>\n                  <code>120000</code> indicates a symlink</p>\n            </li>\n         </ul>\n      ",
                      "shape_name": "Mode"
                    }
                  },
                  "zonbookDocumentation": "\n        <simpara>Information about an <code>afterBlob</code> data type object, including the ID, \n            the file mode permission code, and the path.</simpara>\n      ",
                  "documentation": "\n        <p>Information about an <code>afterBlob</code> data type object, including the ID, \n            the file mode permission code, and the path.</p>\n      ",
                  "shape_name": "BlobMetadata"
                },
                "changeType": {
                  "type": "string",
                  "enum": [
                    "A",
                    "M",
                    "D"
                  ],
                  "zonbookDocumentation": "\n        <simpara>Whether the change type of the difference is an addition (A), deletion (D), or modification (M).</simpara>\n      ",
                  "documentation": "\n        <p>Whether the change type of the difference is an addition (A), deletion (D), or modification (M).</p>\n      ",
                  "shape_name": "ChangeTypeEnum"
                }
              },
              "zonbookDocumentation": "\n        <simpara>Returns information about a set of differences for a commit specifier.</simpara>\n      ",
              "documentation": "\n        <p>Returns information about a set of differences for a commit specifier.</p>\n      ",
              "shape_name": "Difference"
            }
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>An enumeration token that can be used in a request to return the next batch of the results.</simpara>\n      ",
            "documentation": "\n        <p>An enumeration token that can be used in a request to return the next batch of the results.</p>\n      ",
            "shape_name": "NextToken"
          }
        },
        "shape_name": "GetDifferencesOutput",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A repository name is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A repository name is required but was not specified.</p>\n      ",
          "shape_name": "RepositoryNameRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified repository does not exist.</simpara>\n      ",
          "documentation": "\n        <p>The specified repository does not exist.</p>\n      ",
          "shape_name": "RepositoryDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>At least one specified repository name is not valid.</simpara>\n        <note>\n            <simpara>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</simpara>\n         </note>\n      ",
          "documentation": "\n        <p>At least one specified repository name is not valid.</p>\n        <note>\n            <p>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</p>\n         </note>\n      ",
          "shape_name": "InvalidRepositoryNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified continuation token is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified continuation token is not valid.</p>\n      ",
          "shape_name": "InvalidContinuationTokenException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified number of maximum results is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified number of maximum results is not valid.</p>\n      ",
          "shape_name": "InvalidMaxResultsException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified commit ID is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified commit ID is not valid.</p>\n      ",
          "shape_name": "InvalidCommitIdException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A commit was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A commit was not specified.</p>\n      ",
          "shape_name": "CommitRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified commit is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified commit is not valid.</p>\n      ",
          "shape_name": "InvalidCommitException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified commit does not exist or no commit was specified, and the specified repository has no default branch.</simpara>\n      ",
          "documentation": "\n        <p>The specified commit does not exist or no commit was specified, and the specified repository has no default branch.</p>\n      ",
          "shape_name": "CommitDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified path is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified path is not valid.</p>\n      ",
          "shape_name": "InvalidPathException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified path does not exist.</simpara>\n      ",
          "documentation": "\n        <p>The specified path does not exist.</p>\n      ",
          "shape_name": "PathDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption integrity check failed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption integrity check failed.</p>\n      ",
          "shape_name": "EncryptionIntegrityChecksFailedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption key could not be accessed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption key could not be accessed.</p>\n      ",
          "shape_name": "EncryptionKeyAccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is disabled.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is disabled.</p>\n      ",
          "shape_name": "EncryptionKeyDisabledException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>No encryption key was found.</simpara>\n      ",
          "documentation": "\n        <p>No encryption key was found.</p>\n      ",
          "shape_name": "EncryptionKeyNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is not available.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is not available.</p>\n      ",
          "shape_name": "EncryptionKeyUnavailableException"
        }
      ],
      "documentation": "\n        <p>Returns information about the differences in a valid commit specifier \n            (such as a branch, tag, HEAD, commit ID or other fully qualified reference). Results can be limited to a specified path.</p>\n        \n        \n      "
    },
    "PutFile": {
      "name": "PutFile",
      "input": {
        "type": "structure",
        "members": {
          "repositoryName": {
            "type": "string",
            "pattern": "[\\w\\.-]+",
            "zonbookDocumentation": "\n        <para>The name of the repository where you want to add or update the file.</para>\n      ",
            "documentation": "\n        <p>The name of the repository where you want to add or update the file.</p>\n      ",
            "required": true,
            "shape_name": "RepositoryName",
            "min_length": 1,
            "max_length": 100
          },
          "branchName": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>The name of the branch where you want to add or update the file. If this is an empty repository,\n        this branch will be created.</para>\n      ",
            "documentation": "\n        <p>The name of the branch where you want to add or update the file. If this is an empty repository,\n        this branch will be created.</p>\n      ",
            "required": true,
            "shape_name": "BranchName",
            "min_length": 1,
            "max_length": 256
          },
          "fileContent": {
            "type": "blob",
            "zonbookDocumentation": "\n        <para>The content of the file, in binary object format. </para>\n\n      ",
            "documentation": "\n        <p>The content of the file, in binary object format. </p>\n\n      ",
            "required": true,
            "shape_name": "FileContent",
            "max_length": 6291456
          },
          "filePath": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>The name of the file you want to add or update, including the relative path to the file in the repository.</para>\n        <note>\n            <para>If the path does not currently exist in the repository, the path will be created as part of adding the file.</para>\n         </note>\n      ",
            "documentation": "\n        <p>The name of the file you want to add or update, including the relative path to the file in the repository.</p>\n        <note>\n            <p>If the path does not currently exist in the repository, the path will be created as part of adding the file.</p>\n         </note>\n      ",
            "required": true,
            "shape_name": "Path"
          },
          "fileMode": {
            "type": "string",
            "enum": [
              "EXECUTABLE",
              "NORMAL",
              "SYMLINK"
            ],
            "zonbookDocumentation": "\n        <para>The file mode permissions of the blob. Valid file mode permissions are listed below.</para>\n      ",
            "documentation": "\n        <p>The file mode permissions of the blob. Valid file mode permissions are listed below.</p>\n      ",
            "shape_name": "FileModeTypeEnum"
          },
          "parentCommitId": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>The full commit ID of the head commit in the branch where you want to add or update the file. If this is an empty repository, \n            no commit ID is required. If this is not an empty repository, a commit ID is required. </para>\n        <para>The commit ID must match the ID of the \n            head commit at the time of the operation, or an error will occur, and the file will not be added or updated.</para>\n      ",
            "documentation": "\n        <p>The full commit ID of the head commit in the branch where you want to add or update the file. If this is an empty repository, \n            no commit ID is required. If this is not an empty repository, a commit ID is required. </p>\n        <p>The commit ID must match the ID of the \n            head commit at the time of the operation, or an error will occur, and the file will not be added or updated.</p>\n      ",
            "shape_name": "CommitId"
          },
          "commitMessage": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>A message about why this file was added or updated. While optional, adding a message is strongly encouraged in order to provide a more useful\n        commit history for your repository.</para>\n      ",
            "documentation": "\n        <p>A message about why this file was added or updated. While optional, adding a message is strongly encouraged in order to provide a more useful\n        commit history for your repository.</p>\n      ",
            "shape_name": "Message"
          },
          "name": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>The name of the person adding or updating the file. While optional, adding a name is strongly encouraged in order to provide a more useful\n        commit history for your repository.</para>\n      ",
            "documentation": "\n        <p>The name of the person adding or updating the file. While optional, adding a name is strongly encouraged in order to provide a more useful\n        commit history for your repository.</p>\n      ",
            "shape_name": "Name"
          },
          "email": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>An email address for the person adding or updating the file.</para>\n      ",
            "documentation": "\n        <p>An email address for the person adding or updating the file.</p>\n      ",
            "shape_name": "Email"
          }
        },
        "shape_name": "PutFileInput",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "commitId": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>The full SHA of the commit that contains this file change.</para>\n      ",
            "documentation": "\n        <p>The full SHA of the commit that contains this file change.</p>\n      ",
            "required": true,
            "shape_name": "ObjectId"
          },
          "blobId": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>The ID of the blob, which is its SHA-1 pointer.</para>\n      ",
            "documentation": "\n        <p>The ID of the blob, which is its SHA-1 pointer.</p>\n      ",
            "required": true,
            "shape_name": "ObjectId"
          },
          "treeId": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>The full SHA-1 pointer of the tree information for the commit that contains this file change.</para>\n      ",
            "documentation": "\n        <p>The full SHA-1 pointer of the tree information for the commit that contains this file change.</p>\n      ",
            "required": true,
            "shape_name": "ObjectId"
          }
        },
        "shape_name": "PutFileOutput",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A repository name is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A repository name is required but was not specified.</p>\n      ",
          "shape_name": "RepositoryNameRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>At least one specified repository name is not valid.</simpara>\n        <note>\n            <simpara>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</simpara>\n         </note>\n      ",
          "documentation": "\n        <p>At least one specified repository name is not valid.</p>\n        <note>\n            <p>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</p>\n         </note>\n      ",
          "shape_name": "InvalidRepositoryNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified repository does not exist.</simpara>\n      ",
          "documentation": "\n        <p>The specified repository does not exist.</p>\n      ",
          "shape_name": "RepositoryDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>A parent commit ID is required. To view the full commit ID of a branch in a repository, use <xref linkend=\"GetBranch\"/> or a Git command \n        (for example, git pull or git log).</para>\n      ",
          "documentation": "\n        <p>A parent commit ID is required. To view the full commit ID of a branch in a repository, use <a>GetBranch</a> or a Git command \n        (for example, git pull or git log).</p>\n      ",
          "shape_name": "ParentCommitIdRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The parent commit ID is not valid. The commit ID cannot be empty, and must match the head commit ID for the branch of the repository where you \n        want to add or update a file.</para>\n      ",
          "documentation": "\n        <p>The parent commit ID is not valid. The commit ID cannot be empty, and must match the head commit ID for the branch of the repository where you \n        want to add or update a file.</p>\n      ",
          "shape_name": "InvalidParentCommitIdException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The parent commit ID is not valid because it does not exist. The specified parent commit ID does not exist in the specified branch of the repository.</para>\n      ",
          "documentation": "\n        <p>The parent commit ID is not valid because it does not exist. The specified parent commit ID does not exist in the specified branch of the repository.</p>\n      ",
          "shape_name": "ParentCommitDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The file could not be added because the provided parent commit ID is not the current tip of the specified branch. To view the full commit ID of the current head\n        of the branch, use <xref linkend=\"GetBranch\"/>.</para>\n      ",
          "documentation": "\n        <p>The file could not be added because the provided parent commit ID is not the current tip of the specified branch. To view the full commit ID of the current head\n        of the branch, use <a>GetBranch</a>.</p>\n      ",
          "shape_name": "ParentCommitIdOutdatedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The file cannot be added because it is empty. Empty files cannot be added to the repository with this API.</para>\n      ",
          "documentation": "\n        <p>The file cannot be added because it is empty. Empty files cannot be added to the repository with this API.</p>\n      ",
          "shape_name": "FileContentRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The file cannot be added because it is too large. The maximum file size that can be added using PutFile is 6 MB. For files larger\n        than 6 MB but smaller than 2 GB, add them using a Git client.</para>\n      ",
          "documentation": "\n        <p>The file cannot be added because it is too large. The maximum file size that can be added using PutFile is 6 MB. For files larger\n        than 6 MB but smaller than 2 GB, add them using a Git client.</p>\n      ",
          "shape_name": "FileContentSizeLimitExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The folderPath for a location cannot be null.</simpara>\n      ",
          "documentation": "\n        <p>The folderPath for a location cannot be null.</p>\n      ",
          "shape_name": "PathRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified path is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified path is not valid.</p>\n      ",
          "shape_name": "InvalidPathException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A branch name is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A branch name is required but was not specified.</p>\n      ",
          "shape_name": "BranchNameRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified reference name is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified reference name is not valid.</p>\n      ",
          "shape_name": "InvalidBranchNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified branch does not exist.</simpara>\n      ",
          "documentation": "\n        <p>The specified branch does not exist.</p>\n      ",
          "shape_name": "BranchDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The specified branch name is not valid because it is a tag name. Type the name of a current branch in the repository. For a list of valid branch names, \n        use <xref linkend=\"ListBranches\"/>.</para>\n      ",
          "documentation": "\n        <p>The specified branch name is not valid because it is a tag name. Type the name of a current branch in the repository. For a list of valid branch names, \n        use <a>ListBranches</a>.</p>\n      ",
          "shape_name": "BranchNameIsTagNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The specified file mode permission is not valid. For a list of valid file mode permissions, see <xref linkend=\"PutFile\"/>. </para>\n      ",
          "documentation": "\n        <p>The specified file mode permission is not valid. For a list of valid file mode permissions, see <a>PutFile</a>. </p>\n      ",
          "shape_name": "InvalidFileModeException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The user name is not valid because it has exceeded the character limit for file names. File names, including the path to the file, cannot \n            exceed the character limit. </para>\n      ",
          "documentation": "\n        <p>The user name is not valid because it has exceeded the character limit for file names. File names, including the path to the file, cannot \n            exceed the character limit. </p>\n      ",
          "shape_name": "NameLengthExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The specified email address either contains one or more characters that are not allowed, or it exceeds the maximum number of characters\n        allowed for an email address.</para>\n      ",
          "documentation": "\n        <p>The specified email address either contains one or more characters that are not allowed, or it exceeds the maximum number of characters\n        allowed for an email address.</p>\n      ",
          "shape_name": "InvalidEmailException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The commit message is too long. Provide a shorter string. </para>\n      ",
          "documentation": "\n        <p>The commit message is too long. Provide a shorter string. </p>\n      ",
          "shape_name": "CommitMessageLengthExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The specified deletion parameter is not valid.</para>\n      ",
          "documentation": "\n        <p>The specified deletion parameter is not valid.</p>\n      ",
          "shape_name": "InvalidDeletionParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption integrity check failed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption integrity check failed.</p>\n      ",
          "shape_name": "EncryptionIntegrityChecksFailedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption key could not be accessed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption key could not be accessed.</p>\n      ",
          "shape_name": "EncryptionKeyAccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is disabled.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is disabled.</p>\n      ",
          "shape_name": "EncryptionKeyDisabledException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>No encryption key was found.</simpara>\n      ",
          "documentation": "\n        <p>No encryption key was found.</p>\n      ",
          "shape_name": "EncryptionKeyNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is not available.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is not available.</p>\n      ",
          "shape_name": "EncryptionKeyUnavailableException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The file was not added or updated because the content of the file is exactly the same as the content of that file in the repository and branch\n        that you specified.</para>\n      ",
          "documentation": "\n        <p>The file was not added or updated because the content of the file is exactly the same as the content of that file in the repository and branch\n        that you specified.</p>\n      ",
          "shape_name": "SameFileContentException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>A file cannot be added to the repository because the specified file name has the same name as a directory in this repository. Either provide\n        another name for the file, or add the file in a directory that does not match the file name.</para>\n      ",
          "documentation": "\n        <p>A file cannot be added to the repository because the specified file name has the same name as a directory in this repository. Either provide\n        another name for the file, or add the file in a directory that does not match the file name.</p>\n      ",
          "shape_name": "FileNameConflictsWithDirectoryNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>A file cannot be added to the repository because the specified path name has the same name as a file that already exists in this repository. \n        Either provide a different name for the file, or specify a different path for the file.</para>\n      ",
          "documentation": "\n        <p>A file cannot be added to the repository because the specified path name has the same name as a file that already exists in this repository. \n        Either provide a different name for the file, or specify a different path for the file.</p>\n      ",
          "shape_name": "DirectoryNameConflictsWithFileNameException"
        }
      ],
      "documentation": "\n        <p>Adds or updates a file in a branch in an AWS CodeCommit repository, and generates a commit for the addition in the specified branch.</p>\n        \n      "
    },
    "DeleteFile": {
      "name": "DeleteFile",
      "input": {
        "type": "structure",
        "members": {
          "repositoryName": {
            "type": "string",
            "pattern": "[\\w\\.-]+",
            "zonbookDocumentation": "\n        <para>The name of the repository that contains the file to delete.</para>\n      ",
            "documentation": "\n        <p>The name of the repository that contains the file to delete.</p>\n      ",
            "required": true,
            "shape_name": "RepositoryName",
            "min_length": 1,
            "max_length": 100
          },
          "branchName": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>The name of the branch where the commit will be made deleting the file.</para>\n      ",
            "documentation": "\n        <p>The name of the branch where the commit will be made deleting the file.</p>\n      ",
            "required": true,
            "shape_name": "BranchName",
            "min_length": 1,
            "max_length": 256
          },
          "filePath": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>The fully-qualified path to the file that will be deleted, including the full name and extension of that file.\n        For example, /examples/file.md is a fully qualified path to a file named file.md in a folder named examples.</para>\n      ",
            "documentation": "\n        <p>The fully-qualified path to the file that will be deleted, including the full name and extension of that file.\n        For example, /examples/file.md is a fully qualified path to a file named file.md in a folder named examples.</p>\n      ",
            "required": true,
            "shape_name": "Path"
          },
          "parentCommitId": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>The ID of the commit that is the tip of the branch where you want to create the commit that will delete the file. \n        This must be the HEAD commit for the branch. The commit that deletes the file will be created from this commit ID.</para>\n      ",
            "documentation": "\n        <p>The ID of the commit that is the tip of the branch where you want to create the commit that will delete the file. \n        This must be the HEAD commit for the branch. The commit that deletes the file will be created from this commit ID.</p>\n      ",
            "required": true,
            "shape_name": "CommitId"
          },
          "keepEmptyFolders": {
            "type": "boolean",
            "zonbookDocumentation": "\n        <para>Specifies whether to delete the folder or directory that contains the file you want to delete if that file is the\n        only object in the folder or directory. By default, empty folders will be deleted. This includes empty folders that are \n        part of the directory structure. For example, if the path to a file is dir1/dir2/dir3/dir4, and dir2 and dir3 are empty, \n        deleting the last file in dir4 will also delete the empty folders dir4, dir3, and dir2.</para>\n      ",
            "documentation": "\n        <p>Specifies whether to delete the folder or directory that contains the file you want to delete if that file is the\n        only object in the folder or directory. By default, empty folders will be deleted. This includes empty folders that are \n        part of the directory structure. For example, if the path to a file is dir1/dir2/dir3/dir4, and dir2 and dir3 are empty, \n        deleting the last file in dir4 will also delete the empty folders dir4, dir3, and dir2.</p>\n      ",
            "shape_name": "KeepEmptyFolders"
          },
          "commitMessage": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>The commit message you want to include as part of deleting the file. Commit messages are \n            limited to 256 KB. If no message is specified, a default message will be used.</para>\n      ",
            "documentation": "\n        <p>The commit message you want to include as part of deleting the file. Commit messages are \n            limited to 256 KB. If no message is specified, a default message will be used.</p>\n      ",
            "shape_name": "Message"
          },
          "name": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>The name of the author of the commit that deletes the file. If no name is specified, the user's ARN will be used as the\n        author name and committer name.</para>\n      ",
            "documentation": "\n        <p>The name of the author of the commit that deletes the file. If no name is specified, the user's ARN will be used as the\n        author name and committer name.</p>\n      ",
            "shape_name": "Name"
          },
          "email": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>The email address for the commit that deletes the file. If no email address is specified, the email address will be left blank.</para>\n      ",
            "documentation": "\n        <p>The email address for the commit that deletes the file. If no email address is specified, the email address will be left blank.</p>\n      ",
            "shape_name": "Email"
          }
        },
        "shape_name": "DeleteFileInput",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "commitId": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>The full commit ID of the commit that contains the change that deletes the file.</para>\n      ",
            "documentation": "\n        <p>The full commit ID of the commit that contains the change that deletes the file.</p>\n      ",
            "required": true,
            "shape_name": "ObjectId"
          },
          "blobId": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>The blob ID removed from the tree as part of deleting the file.</para>\n      ",
            "documentation": "\n        <p>The blob ID removed from the tree as part of deleting the file.</p>\n      ",
            "required": true,
            "shape_name": "ObjectId"
          },
          "treeId": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>The full SHA-1 pointer of the tree information for the commit that contains the delete file change.</para>\n      ",
            "documentation": "\n        <p>The full SHA-1 pointer of the tree information for the commit that contains the delete file change.</p>\n      ",
            "required": true,
            "shape_name": "ObjectId"
          },
          "filePath": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>The fully-qualified path to the file that will be deleted, including the full name and extension of that file.</para>\n      ",
            "documentation": "\n        <p>The fully-qualified path to the file that will be deleted, including the full name and extension of that file.</p>\n      ",
            "required": true,
            "shape_name": "Path"
          }
        },
        "shape_name": "DeleteFileOutput",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A repository name is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A repository name is required but was not specified.</p>\n      ",
          "shape_name": "RepositoryNameRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>At least one specified repository name is not valid.</simpara>\n        <note>\n            <simpara>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</simpara>\n         </note>\n      ",
          "documentation": "\n        <p>At least one specified repository name is not valid.</p>\n        <note>\n            <p>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</p>\n         </note>\n      ",
          "shape_name": "InvalidRepositoryNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified repository does not exist.</simpara>\n      ",
          "documentation": "\n        <p>The specified repository does not exist.</p>\n      ",
          "shape_name": "RepositoryDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>A parent commit ID is required. To view the full commit ID of a branch in a repository, use <xref linkend=\"GetBranch\"/> or a Git command \n        (for example, git pull or git log).</para>\n      ",
          "documentation": "\n        <p>A parent commit ID is required. To view the full commit ID of a branch in a repository, use <a>GetBranch</a> or a Git command \n        (for example, git pull or git log).</p>\n      ",
          "shape_name": "ParentCommitIdRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The parent commit ID is not valid. The commit ID cannot be empty, and must match the head commit ID for the branch of the repository where you \n        want to add or update a file.</para>\n      ",
          "documentation": "\n        <p>The parent commit ID is not valid. The commit ID cannot be empty, and must match the head commit ID for the branch of the repository where you \n        want to add or update a file.</p>\n      ",
          "shape_name": "InvalidParentCommitIdException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The parent commit ID is not valid because it does not exist. The specified parent commit ID does not exist in the specified branch of the repository.</para>\n      ",
          "documentation": "\n        <p>The parent commit ID is not valid because it does not exist. The specified parent commit ID does not exist in the specified branch of the repository.</p>\n      ",
          "shape_name": "ParentCommitDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The file could not be added because the provided parent commit ID is not the current tip of the specified branch. To view the full commit ID of the current head\n        of the branch, use <xref linkend=\"GetBranch\"/>.</para>\n      ",
          "documentation": "\n        <p>The file could not be added because the provided parent commit ID is not the current tip of the specified branch. To view the full commit ID of the current head\n        of the branch, use <a>GetBranch</a>.</p>\n      ",
          "shape_name": "ParentCommitIdOutdatedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The folderPath for a location cannot be null.</simpara>\n      ",
          "documentation": "\n        <p>The folderPath for a location cannot be null.</p>\n      ",
          "shape_name": "PathRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified path is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified path is not valid.</p>\n      ",
          "shape_name": "InvalidPathException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The specified file does not exist. Verify that you have provided the correct name of the file, including its full path and extension.</para>\n      ",
          "documentation": "\n        <p>The specified file does not exist. Verify that you have provided the correct name of the file, including its full path and extension.</p>\n      ",
          "shape_name": "FileDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A branch name is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A branch name is required but was not specified.</p>\n      ",
          "shape_name": "BranchNameRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified reference name is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified reference name is not valid.</p>\n      ",
          "shape_name": "InvalidBranchNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified branch does not exist.</simpara>\n      ",
          "documentation": "\n        <p>The specified branch does not exist.</p>\n      ",
          "shape_name": "BranchDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The specified branch name is not valid because it is a tag name. Type the name of a current branch in the repository. For a list of valid branch names, \n        use <xref linkend=\"ListBranches\"/>.</para>\n      ",
          "documentation": "\n        <p>The specified branch name is not valid because it is a tag name. Type the name of a current branch in the repository. For a list of valid branch names, \n        use <a>ListBranches</a>.</p>\n      ",
          "shape_name": "BranchNameIsTagNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The user name is not valid because it has exceeded the character limit for file names. File names, including the path to the file, cannot \n            exceed the character limit. </para>\n      ",
          "documentation": "\n        <p>The user name is not valid because it has exceeded the character limit for file names. File names, including the path to the file, cannot \n            exceed the character limit. </p>\n      ",
          "shape_name": "NameLengthExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The specified email address either contains one or more characters that are not allowed, or it exceeds the maximum number of characters\n        allowed for an email address.</para>\n      ",
          "documentation": "\n        <p>The specified email address either contains one or more characters that are not allowed, or it exceeds the maximum number of characters\n        allowed for an email address.</p>\n      ",
          "shape_name": "InvalidEmailException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The commit message is too long. Provide a shorter string. </para>\n      ",
          "documentation": "\n        <p>The commit message is too long. Provide a shorter string. </p>\n      ",
          "shape_name": "CommitMessageLengthExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption integrity check failed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption integrity check failed.</p>\n      ",
          "shape_name": "EncryptionIntegrityChecksFailedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption key could not be accessed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption key could not be accessed.</p>\n      ",
          "shape_name": "EncryptionKeyAccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is disabled.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is disabled.</p>\n      ",
          "shape_name": "EncryptionKeyDisabledException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>No encryption key was found.</simpara>\n      ",
          "documentation": "\n        <p>No encryption key was found.</p>\n      ",
          "shape_name": "EncryptionKeyNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is not available.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is not available.</p>\n      ",
          "shape_name": "EncryptionKeyUnavailableException"
        }
      ],
      "documentation": "\n        <p>Deletes a specified file from a specified branch. A commit is created on the branch that contains the revision. The file \n        will still exist in the commits prior to the commit that contains the deletion.</p>\n        \n      "
    },
    "GetFolder": {
      "name": "GetFolder",
      "input": {
        "type": "structure",
        "members": {
          "repositoryName": {
            "type": "string",
            "pattern": "[\\w\\.-]+",
            "zonbookDocumentation": "\n        <para>The name of the repository.</para>\n      ",
            "documentation": "\n        <p>The name of the repository.</p>\n      ",
            "required": true,
            "shape_name": "RepositoryName",
            "min_length": 1,
            "max_length": 100
          },
          "commitSpecifier": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>A fully-qualified reference used to identify a commit that contains the version of the folder's content to return. \n        A fully-qualified reference can be a commit ID, branch name, tag, or reference such as HEAD. If no specifier is provided,\n        the folder content will be returned as it exists in the HEAD commit.</para>\n      ",
            "documentation": "\n        <p>A fully-qualified reference used to identify a commit that contains the version of the folder's content to return. \n        A fully-qualified reference can be a commit ID, branch name, tag, or reference such as HEAD. If no specifier is provided,\n        the folder content will be returned as it exists in the HEAD commit.</p>\n      ",
            "shape_name": "CommitName"
          },
          "folderPath": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>The fully-qualified path to the folder whose contents will be returned, including the folder name. For example,\n            /examples is a fully-qualified path to a folder named examples that was created off of the root directory (/) of a repository. </para>\n      ",
            "documentation": "\n        <p>The fully-qualified path to the folder whose contents will be returned, including the folder name. For example,\n            /examples is a fully-qualified path to a folder named examples that was created off of the root directory (/) of a repository. </p>\n      ",
            "required": true,
            "shape_name": "Path"
          }
        },
        "shape_name": "GetFolderInput",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "commitId": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>The full commit ID used as a reference for which version of the folder content is returned.</para>\n      ",
            "documentation": "\n        <p>The full commit ID used as a reference for which version of the folder content is returned.</p>\n      ",
            "required": true,
            "shape_name": "ObjectId"
          },
          "folderPath": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>The fully-qualified path of the folder whose contents are returned.</para>\n      ",
            "documentation": "\n        <p>The fully-qualified path of the folder whose contents are returned.</p>\n      ",
            "required": true,
            "shape_name": "Path"
          },
          "treeId": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>The full SHA-1 pointer of the tree information for the commit that contains the folder.</para>\n      ",
            "documentation": "\n        <p>The full SHA-1 pointer of the tree information for the commit that contains the folder.</p>\n      ",
            "shape_name": "ObjectId"
          },
          "subFolders": {
            "type": "list",
            "zonbookDocumentation": "\n        <para>The list of folders that exist beneath the specified folder, if any.</para>\n      ",
            "documentation": "\n        <p>The list of folders that exist beneath the specified folder, if any.</p>\n      ",
            "shape_name": "FolderList",
            "members": {
              "type": "structure",
              "members": {
                "treeId": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <para>The full SHA-1 pointer of the tree information for the commit that contains the folder.</para>\n      ",
                  "documentation": "\n        <p>The full SHA-1 pointer of the tree information for the commit that contains the folder.</p>\n      ",
                  "shape_name": "ObjectId"
                },
                "absolutePath": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <para>The fully-qualified path of the folder in the repository.</para>\n      ",
                  "documentation": "\n        <p>The fully-qualified path of the folder in the repository.</p>\n      ",
                  "shape_name": "Path"
                },
                "relativePath": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <para>The relative path of the specified folder from the folder where the query originated.</para>\n      ",
                  "documentation": "\n        <p>The relative path of the specified folder from the folder where the query originated.</p>\n      ",
                  "shape_name": "Path"
                }
              },
              "zonbookDocumentation": "\n        <para>Returns information about a folder in a repository.</para>\n      ",
              "documentation": "\n        <p>Returns information about a folder in a repository.</p>\n      ",
              "shape_name": "Folder"
            }
          },
          "files": {
            "type": "list",
            "zonbookDocumentation": "\n        <para>The list of files that exist in the specified folder, if any.</para>\n      ",
            "documentation": "\n        <p>The list of files that exist in the specified folder, if any.</p>\n      ",
            "shape_name": "FileList",
            "members": {
              "type": "structure",
              "members": {
                "blobId": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <para>The blob ID that contains the file information.</para>\n      ",
                  "documentation": "\n        <p>The blob ID that contains the file information.</p>\n      ",
                  "shape_name": "ObjectId"
                },
                "absolutePath": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <para>The fully-qualified path to the file in the repository.</para>\n      ",
                  "documentation": "\n        <p>The fully-qualified path to the file in the repository.</p>\n      ",
                  "shape_name": "Path"
                },
                "relativePath": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <para>The relative path of the file from the folder where the query originated.</para>\n      ",
                  "documentation": "\n        <p>The relative path of the file from the folder where the query originated.</p>\n      ",
                  "shape_name": "Path"
                },
                "fileMode": {
                  "type": "string",
                  "enum": [
                    "EXECUTABLE",
                    "NORMAL",
                    "SYMLINK"
                  ],
                  "zonbookDocumentation": "\n        <para>The extrapolated file mode permissions for the file. Valid values include EXECUTABLE and NORMAL.</para>\n      ",
                  "documentation": "\n        <p>The extrapolated file mode permissions for the file. Valid values include EXECUTABLE and NORMAL.</p>\n      ",
                  "shape_name": "FileModeTypeEnum"
                }
              },
              "zonbookDocumentation": "\n        <para>Returns information about a file in a repository.</para>\n      ",
              "documentation": "\n        <p>Returns information about a file in a repository.</p>\n      ",
              "shape_name": "File"
            }
          },
          "symbolicLinks": {
            "type": "list",
            "zonbookDocumentation": "\n        <para>The list of symbolic links to other files and folders that exist in the specified folder, if any.</para>\n      ",
            "documentation": "\n        <p>The list of symbolic links to other files and folders that exist in the specified folder, if any.</p>\n      ",
            "shape_name": "SymbolicLinkList",
            "members": {
              "type": "structure",
              "members": {
                "blobId": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <para>The blob ID that contains the information about the symbolic link.</para>\n      ",
                  "documentation": "\n        <p>The blob ID that contains the information about the symbolic link.</p>\n      ",
                  "shape_name": "ObjectId"
                },
                "absolutePath": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <para>The fully-qualified path to the folder that contains the symbolic link.</para>\n      ",
                  "documentation": "\n        <p>The fully-qualified path to the folder that contains the symbolic link.</p>\n      ",
                  "shape_name": "Path"
                },
                "relativePath": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <para>The relative path of the symbolic link from the folder where the query originated.</para>\n      ",
                  "documentation": "\n        <p>The relative path of the symbolic link from the folder where the query originated.</p>\n      ",
                  "shape_name": "Path"
                },
                "fileMode": {
                  "type": "string",
                  "enum": [
                    "EXECUTABLE",
                    "NORMAL",
                    "SYMLINK"
                  ],
                  "zonbookDocumentation": "\n        <para>The file mode permissions of the blob that cotains information about the symbolic link.</para>\n      ",
                  "documentation": "\n        <p>The file mode permissions of the blob that cotains information about the symbolic link.</p>\n      ",
                  "shape_name": "FileModeTypeEnum"
                }
              },
              "zonbookDocumentation": "\n        <para>Returns information about a symbolic link in a repository folder.</para>\n      ",
              "documentation": "\n        <p>Returns information about a symbolic link in a repository folder.</p>\n      ",
              "shape_name": "SymbolicLink"
            }
          },
          "subModules": {
            "type": "list",
            "zonbookDocumentation": "\n        <para>The list of submodules that exist in the specified folder, if any.</para>\n      ",
            "documentation": "\n        <p>The list of submodules that exist in the specified folder, if any.</p>\n      ",
            "shape_name": "SubModuleList",
            "members": {
              "type": "structure",
              "members": {
                "commitId": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <para>The commit ID that contains the reference to the submodule.</para>\n      ",
                  "documentation": "\n        <p>The commit ID that contains the reference to the submodule.</p>\n      ",
                  "shape_name": "ObjectId"
                },
                "absolutePath": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <para>The fully qualified path to the folder that contains the reference to the submodule.</para>\n      ",
                  "documentation": "\n        <p>The fully qualified path to the folder that contains the reference to the submodule.</p>\n      ",
                  "shape_name": "Path"
                },
                "relativePath": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <para>The relative path of the submodule from the folder where the query originated.</para>\n      ",
                  "documentation": "\n        <p>The relative path of the submodule from the folder where the query originated.</p>\n      ",
                  "shape_name": "Path"
                }
              },
              "zonbookDocumentation": "\n        <para>Returns information about a submodule reference in a repository folder.</para>\n      ",
              "documentation": "\n        <p>Returns information about a submodule reference in a repository folder.</p>\n      ",
              "shape_name": "SubModule"
            }
          }
        },
        "shape_name": "GetFolderOutput",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A repository name is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A repository name is required but was not specified.</p>\n      ",
          "shape_name": "RepositoryNameRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>At least one specified repository name is not valid.</simpara>\n        <note>\n            <simpara>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</simpara>\n         </note>\n      ",
          "documentation": "\n        <p>At least one specified repository name is not valid.</p>\n        <note>\n            <p>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</p>\n         </note>\n      ",
          "shape_name": "InvalidRepositoryNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified repository does not exist.</simpara>\n      ",
          "documentation": "\n        <p>The specified repository does not exist.</p>\n      ",
          "shape_name": "RepositoryDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified commit is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified commit is not valid.</p>\n      ",
          "shape_name": "InvalidCommitException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified commit does not exist or no commit was specified, and the specified repository has no default branch.</simpara>\n      ",
          "documentation": "\n        <p>The specified commit does not exist or no commit was specified, and the specified repository has no default branch.</p>\n      ",
          "shape_name": "CommitDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The folderPath for a location cannot be null.</simpara>\n      ",
          "documentation": "\n        <p>The folderPath for a location cannot be null.</p>\n      ",
          "shape_name": "PathRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified path is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified path is not valid.</p>\n      ",
          "shape_name": "InvalidPathException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The specified folder does not exist. Either the folder name is not correct, or you did not provide the full path to the folder.</para>\n      ",
          "documentation": "\n        <p>The specified folder does not exist. Either the folder name is not correct, or you did not provide the full path to the folder.</p>\n      ",
          "shape_name": "FolderDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption integrity check failed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption integrity check failed.</p>\n      ",
          "shape_name": "EncryptionIntegrityChecksFailedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption key could not be accessed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption key could not be accessed.</p>\n      ",
          "shape_name": "EncryptionKeyAccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is disabled.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is disabled.</p>\n      ",
          "shape_name": "EncryptionKeyDisabledException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>No encryption key was found.</simpara>\n      ",
          "documentation": "\n        <p>No encryption key was found.</p>\n      ",
          "shape_name": "EncryptionKeyNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is not available.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is not available.</p>\n      ",
          "shape_name": "EncryptionKeyUnavailableException"
        }
      ],
      "documentation": "\n        <p>Returns the contents of a specified folder in a repository.</p>\n        \n      "
    },
    "PostCommentForComparedCommit": {
      "name": "PostCommentForComparedCommit",
      "input": {
        "type": "structure",
        "members": {
          "repositoryName": {
            "type": "string",
            "pattern": "[\\w\\.-]+",
            "zonbookDocumentation": "\n        <simpara>The name of the repository where you want to post a comment on the comparison between commits.</simpara>\n      ",
            "documentation": "\n        <p>The name of the repository where you want to post a comment on the comparison between commits.</p>\n      ",
            "required": true,
            "shape_name": "RepositoryName",
            "min_length": 1,
            "max_length": 100
          },
          "beforeCommitId": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>To establish the directionality of the comparison, the full commit ID of the 'before' commit.</simpara>\n      ",
            "documentation": "\n        <p>To establish the directionality of the comparison, the full commit ID of the 'before' commit.</p>\n      ",
            "shape_name": "CommitId"
          },
          "afterCommitId": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>To establish the directionality of the comparison, the full commit ID of the 'after' commit.</simpara>\n      ",
            "documentation": "\n        <p>To establish the directionality of the comparison, the full commit ID of the 'after' commit.</p>\n      ",
            "required": true,
            "shape_name": "CommitId"
          },
          "location": {
            "type": "structure",
            "members": {
              "filePath": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The name of the file being compared, including its extension and subdirectory, if any.</simpara>\n      ",
                "documentation": "\n        <p>The name of the file being compared, including its extension and subdirectory, if any.</p>\n      ",
                "shape_name": "Path"
              },
              "filePosition": {
                "type": "long",
                "zonbookDocumentation": "\n        <simpara>The position of a change within a compared file, in line number format.</simpara>\n      ",
                "documentation": "\n        <p>The position of a change within a compared file, in line number format.</p>\n      ",
                "shape_name": "Position"
              },
              "relativeFileVersion": {
                "type": "string",
                "enum": [
                  "BEFORE",
                  "AFTER"
                ],
                "zonbookDocumentation": "\n        <simpara>In a comparison of commits or a pull request, whether the change is in the 'before' or 'after' of that comparison.</simpara>\n      ",
                "documentation": "\n        <p>In a comparison of commits or a pull request, whether the change is in the 'before' or 'after' of that comparison.</p>\n      ",
                "shape_name": "RelativeFileVersionEnum"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The location of the comparison where you want to comment.</simpara>\n      ",
            "documentation": "\n        <p>The location of the comparison where you want to comment.</p>\n      ",
            "shape_name": "Location"
          },
          "content": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The content of the comment you want to make.</simpara>\n      ",
            "documentation": "\n        <p>The content of the comment you want to make.</p>\n      ",
            "required": true,
            "shape_name": "Content"
          },
          "clientRequestToken": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</simpara>\n      ",
            "documentation": "\n        <p>A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</p>\n      ",
            "idempotencyToken": true,
            "shape_name": "ClientRequestToken"
          }
        },
        "shape_name": "PostCommentForComparedCommitInput",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "repositoryName": {
            "type": "string",
            "pattern": "[\\w\\.-]+",
            "zonbookDocumentation": "\n        <simpara>The name of the repository where you posted a comment on the comparison between commits.</simpara>\n      ",
            "documentation": "\n        <p>The name of the repository where you posted a comment on the comparison between commits.</p>\n      ",
            "shape_name": "RepositoryName",
            "min_length": 1,
            "max_length": 100
          },
          "beforeCommitId": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>In the directionality you established, the full commit ID of the 'before' commit.</simpara>\n      ",
            "documentation": "\n        <p>In the directionality you established, the full commit ID of the 'before' commit.</p>\n      ",
            "shape_name": "CommitId"
          },
          "afterCommitId": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>In the directionality you established, the full commit ID of the 'after' commit.</simpara>\n      ",
            "documentation": "\n        <p>In the directionality you established, the full commit ID of the 'after' commit.</p>\n      ",
            "shape_name": "CommitId"
          },
          "beforeBlobId": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>In the directionality you established, the blob ID of the 'before' blob.</simpara>\n      ",
            "documentation": "\n        <p>In the directionality you established, the blob ID of the 'before' blob.</p>\n      ",
            "shape_name": "ObjectId"
          },
          "afterBlobId": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>In the directionality you established, the blob ID of the 'after' blob.</simpara>\n      ",
            "documentation": "\n        <p>In the directionality you established, the blob ID of the 'after' blob.</p>\n      ",
            "shape_name": "ObjectId"
          },
          "location": {
            "type": "structure",
            "members": {
              "filePath": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The name of the file being compared, including its extension and subdirectory, if any.</simpara>\n      ",
                "documentation": "\n        <p>The name of the file being compared, including its extension and subdirectory, if any.</p>\n      ",
                "shape_name": "Path"
              },
              "filePosition": {
                "type": "long",
                "zonbookDocumentation": "\n        <simpara>The position of a change within a compared file, in line number format.</simpara>\n      ",
                "documentation": "\n        <p>The position of a change within a compared file, in line number format.</p>\n      ",
                "shape_name": "Position"
              },
              "relativeFileVersion": {
                "type": "string",
                "enum": [
                  "BEFORE",
                  "AFTER"
                ],
                "zonbookDocumentation": "\n        <simpara>In a comparison of commits or a pull request, whether the change is in the 'before' or 'after' of that comparison.</simpara>\n      ",
                "documentation": "\n        <p>In a comparison of commits or a pull request, whether the change is in the 'before' or 'after' of that comparison.</p>\n      ",
                "shape_name": "RelativeFileVersionEnum"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The location of the comment in the comparison between the two commits.</simpara>\n      ",
            "documentation": "\n        <p>The location of the comment in the comparison between the two commits.</p>\n      ",
            "shape_name": "Location"
          },
          "comment": {
            "type": "structure",
            "members": {
              "commentId": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The system-generated comment ID.</simpara>\n      ",
                "documentation": "\n        <p>The system-generated comment ID.</p>\n      ",
                "shape_name": "CommentId"
              },
              "content": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The content of the comment.</simpara>\n      ",
                "documentation": "\n        <p>The content of the comment.</p>\n      ",
                "shape_name": "Content"
              },
              "inReplyTo": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The ID of the comment for which this comment is a reply, if any.</simpara>\n      ",
                "documentation": "\n        <p>The ID of the comment for which this comment is a reply, if any.</p>\n      ",
                "shape_name": "CommentId"
              },
              "creationDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date and time the comment was created, in timestamp format.</simpara>\n      ",
                "documentation": "\n        <p>The date and time the comment was created, in timestamp format.</p>\n      ",
                "shape_name": "CreationDate"
              },
              "lastModifiedDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date and time the comment was most recently modified, in timestamp format.</simpara>\n      ",
                "documentation": "\n        <p>The date and time the comment was most recently modified, in timestamp format.</p>\n      ",
                "shape_name": "LastModifiedDate"
              },
              "authorArn": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of the person who posted the comment.</simpara>\n      ",
                "documentation": "\n        <p>The Amazon Resource Name (ARN) of the person who posted the comment.</p>\n      ",
                "shape_name": "Arn"
              },
              "deleted": {
                "type": "boolean",
                "zonbookDocumentation": "\n        <simpara>A Boolean value indicating whether the comment has been deleted.</simpara>\n      ",
                "documentation": "\n        <p>A Boolean value indicating whether the comment has been deleted.</p>\n      ",
                "shape_name": "IsCommentDeleted"
              },
              "clientRequestToken": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</simpara>\n      ",
                "documentation": "\n        <p>A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</p>\n      ",
                "shape_name": "ClientRequestToken"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The content of the comment you posted.</simpara>\n      ",
            "documentation": "\n        <p>The content of the comment you posted.</p>\n      ",
            "shape_name": "Comment"
          }
        },
        "shape_name": "PostCommentForComparedCommitOutput",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A repository name is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A repository name is required but was not specified.</p>\n      ",
          "shape_name": "RepositoryNameRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified repository does not exist.</simpara>\n      ",
          "documentation": "\n        <p>The specified repository does not exist.</p>\n      ",
          "shape_name": "RepositoryDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>At least one specified repository name is not valid.</simpara>\n        <note>\n            <simpara>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</simpara>\n         </note>\n      ",
          "documentation": "\n        <p>At least one specified repository name is not valid.</p>\n        <note>\n            <p>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</p>\n         </note>\n      ",
          "shape_name": "InvalidRepositoryNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A client request token is required. A client request token is an unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</simpara>\n      ",
          "documentation": "\n        <p>A client request token is required. A client request token is an unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</p>\n      ",
          "shape_name": "ClientRequestTokenRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The client request token is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The client request token is not valid.</p>\n      ",
          "shape_name": "InvalidClientRequestTokenException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The client request token is not valid. Either the token is not in a valid format, or the token has been used in a previous request and cannot be re-used.</simpara>\n      ",
          "documentation": "\n        <p>The client request token is not valid. Either the token is not in a valid format, or the token has been used in a previous request and cannot be re-used.</p>\n      ",
          "shape_name": "IdempotencyParameterMismatchException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The comment is empty. You must provide some content for a comment. The content cannot be null.</simpara>\n      ",
          "documentation": "\n        <p>The comment is empty. You must provide some content for a comment. The content cannot be null.</p>\n      ",
          "shape_name": "CommentContentRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The comment is too large. Comments are limited to 1,000 characters.</simpara>\n      ",
          "documentation": "\n        <p>The comment is too large. Comments are limited to 1,000 characters.</p>\n      ",
          "shape_name": "CommentContentSizeLimitExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The location of the file is not valid. Make sure that you include the extension of the file as well as the file name.</simpara>\n      ",
          "documentation": "\n        <p>The location of the file is not valid. Make sure that you include the extension of the file as well as the file name.</p>\n      ",
          "shape_name": "InvalidFileLocationException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>Either the enum is not in a valid format, or the specified file version enum is not valid in respect to the current file version.</simpara>\n      ",
          "documentation": "\n        <p>Either the enum is not in a valid format, or the specified file version enum is not valid in respect to the current file version.</p>\n      ",
          "shape_name": "InvalidRelativeFileVersionEnumException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The folderPath for a location cannot be null.</simpara>\n      ",
          "documentation": "\n        <p>The folderPath for a location cannot be null.</p>\n      ",
          "shape_name": "PathRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The position is not valid. Make sure that the line number exists in the version of the file you want to comment on.</simpara>\n      ",
          "documentation": "\n        <p>The position is not valid. Make sure that the line number exists in the version of the file you want to comment on.</p>\n      ",
          "shape_name": "InvalidFilePositionException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A commit ID was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A commit ID was not specified.</p>\n      ",
          "shape_name": "CommitIdRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified commit ID is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified commit ID is not valid.</p>\n      ",
          "shape_name": "InvalidCommitIdException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption integrity check failed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption integrity check failed.</p>\n      ",
          "shape_name": "EncryptionIntegrityChecksFailedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption key could not be accessed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption key could not be accessed.</p>\n      ",
          "shape_name": "EncryptionKeyAccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is disabled.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is disabled.</p>\n      ",
          "shape_name": "EncryptionKeyDisabledException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>No encryption key was found.</simpara>\n      ",
          "documentation": "\n        <p>No encryption key was found.</p>\n      ",
          "shape_name": "EncryptionKeyNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is not available.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is not available.</p>\n      ",
          "shape_name": "EncryptionKeyUnavailableException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The before commit ID and the after commit ID are the same, which is not valid. The before commit ID and the after commit ID must be different commit IDs.</para>\n      ",
          "documentation": "\n        <p>The before commit ID and the after commit ID are the same, which is not valid. The before commit ID and the after commit ID must be different commit IDs.</p>\n      ",
          "shape_name": "BeforeCommitIdAndAfterCommitIdAreSameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified commit does not exist or no commit was specified, and the specified repository has no default branch.</simpara>\n      ",
          "documentation": "\n        <p>The specified commit does not exist or no commit was specified, and the specified repository has no default branch.</p>\n      ",
          "shape_name": "CommitDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified path is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified path is not valid.</p>\n      ",
          "shape_name": "InvalidPathException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified path does not exist.</simpara>\n      ",
          "documentation": "\n        <p>The specified path does not exist.</p>\n      ",
          "shape_name": "PathDoesNotExistException"
        }
      ],
      "documentation": "\n        <p>Posts a comment on the comparison between two commits.</p>\n        \n      "
    },
    "PostCommentForPullRequest": {
      "name": "PostCommentForPullRequest",
      "input": {
        "type": "structure",
        "members": {
          "pullRequestId": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The system-generated ID of the pull request. To get this ID, use <xref linkend=\"ListPullRequests\"/>.</simpara>\n      ",
            "documentation": "\n        <p>The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.</p>\n      ",
            "required": true,
            "shape_name": "PullRequestId"
          },
          "repositoryName": {
            "type": "string",
            "pattern": "[\\w\\.-]+",
            "zonbookDocumentation": "\n        <simpara>The name of the repository where you want to post a comment on a pull request.</simpara>\n      ",
            "documentation": "\n        <p>The name of the repository where you want to post a comment on a pull request.</p>\n      ",
            "required": true,
            "shape_name": "RepositoryName",
            "min_length": 1,
            "max_length": 100
          },
          "beforeCommitId": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The full commit ID of the commit in the destination branch that was the tip of the branch at the time the pull request was created.</simpara>\n      ",
            "documentation": "\n        <p>The full commit ID of the commit in the destination branch that was the tip of the branch at the time the pull request was created.</p>\n      ",
            "required": true,
            "shape_name": "CommitId"
          },
          "afterCommitId": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The full commit ID of the commit in the source branch that is the current tip of the branch for the pull request when you post the comment.</simpara>\n      ",
            "documentation": "\n        <p>The full commit ID of the commit in the source branch that is the current tip of the branch for the pull request when you post the comment.</p>\n      ",
            "required": true,
            "shape_name": "CommitId"
          },
          "location": {
            "type": "structure",
            "members": {
              "filePath": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The name of the file being compared, including its extension and subdirectory, if any.</simpara>\n      ",
                "documentation": "\n        <p>The name of the file being compared, including its extension and subdirectory, if any.</p>\n      ",
                "shape_name": "Path"
              },
              "filePosition": {
                "type": "long",
                "zonbookDocumentation": "\n        <simpara>The position of a change within a compared file, in line number format.</simpara>\n      ",
                "documentation": "\n        <p>The position of a change within a compared file, in line number format.</p>\n      ",
                "shape_name": "Position"
              },
              "relativeFileVersion": {
                "type": "string",
                "enum": [
                  "BEFORE",
                  "AFTER"
                ],
                "zonbookDocumentation": "\n        <simpara>In a comparison of commits or a pull request, whether the change is in the 'before' or 'after' of that comparison.</simpara>\n      ",
                "documentation": "\n        <p>In a comparison of commits or a pull request, whether the change is in the 'before' or 'after' of that comparison.</p>\n      ",
                "shape_name": "RelativeFileVersionEnum"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The location of the change where you want to post your comment. If no location is provided, the comment will be posted as a general comment\n        on the pull request difference between the before commit ID and the after commit ID.</simpara>\n      ",
            "documentation": "\n        <p>The location of the change where you want to post your comment. If no location is provided, the comment will be posted as a general comment\n        on the pull request difference between the before commit ID and the after commit ID.</p>\n      ",
            "shape_name": "Location"
          },
          "content": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The content of your comment on the change.</simpara>\n      ",
            "documentation": "\n        <p>The content of your comment on the change.</p>\n      ",
            "required": true,
            "shape_name": "Content"
          },
          "clientRequestToken": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</simpara>\n      ",
            "documentation": "\n        <p>A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</p>\n      ",
            "idempotencyToken": true,
            "shape_name": "ClientRequestToken"
          }
        },
        "shape_name": "PostCommentForPullRequestInput",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "repositoryName": {
            "type": "string",
            "pattern": "[\\w\\.-]+",
            "zonbookDocumentation": "\n        <simpara>The name of the repository where you posted a comment on a pull request.</simpara>\n      ",
            "documentation": "\n        <p>The name of the repository where you posted a comment on a pull request.</p>\n      ",
            "shape_name": "RepositoryName",
            "min_length": 1,
            "max_length": 100
          },
          "pullRequestId": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The system-generated ID of the pull request. </simpara>\n      ",
            "documentation": "\n        <p>The system-generated ID of the pull request. </p>\n      ",
            "shape_name": "PullRequestId"
          },
          "beforeCommitId": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The full commit ID of the commit in the source branch used to create the pull request, \n            or in the case of an updated pull request, the full commit ID of the commit used to update the pull request.</simpara>\n      ",
            "documentation": "\n        <p>The full commit ID of the commit in the source branch used to create the pull request, \n            or in the case of an updated pull request, the full commit ID of the commit used to update the pull request.</p>\n      ",
            "shape_name": "CommitId"
          },
          "afterCommitId": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The full commit ID of the commit in the destination branch where the pull request will be merged.</simpara>\n      ",
            "documentation": "\n        <p>The full commit ID of the commit in the destination branch where the pull request will be merged.</p>\n      ",
            "shape_name": "CommitId"
          },
          "beforeBlobId": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>In the directionality of the pull request, the blob ID of the 'before' blob.</simpara>\n      ",
            "documentation": "\n        <p>In the directionality of the pull request, the blob ID of the 'before' blob.</p>\n      ",
            "shape_name": "ObjectId"
          },
          "afterBlobId": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>In the directionality of the pull request, the blob ID of the 'after' blob.</simpara>\n      ",
            "documentation": "\n        <p>In the directionality of the pull request, the blob ID of the 'after' blob.</p>\n      ",
            "shape_name": "ObjectId"
          },
          "location": {
            "type": "structure",
            "members": {
              "filePath": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The name of the file being compared, including its extension and subdirectory, if any.</simpara>\n      ",
                "documentation": "\n        <p>The name of the file being compared, including its extension and subdirectory, if any.</p>\n      ",
                "shape_name": "Path"
              },
              "filePosition": {
                "type": "long",
                "zonbookDocumentation": "\n        <simpara>The position of a change within a compared file, in line number format.</simpara>\n      ",
                "documentation": "\n        <p>The position of a change within a compared file, in line number format.</p>\n      ",
                "shape_name": "Position"
              },
              "relativeFileVersion": {
                "type": "string",
                "enum": [
                  "BEFORE",
                  "AFTER"
                ],
                "zonbookDocumentation": "\n        <simpara>In a comparison of commits or a pull request, whether the change is in the 'before' or 'after' of that comparison.</simpara>\n      ",
                "documentation": "\n        <p>In a comparison of commits or a pull request, whether the change is in the 'before' or 'after' of that comparison.</p>\n      ",
                "shape_name": "RelativeFileVersionEnum"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The location of the change where you posted your comment.</simpara>\n      ",
            "documentation": "\n        <p>The location of the change where you posted your comment.</p>\n      ",
            "shape_name": "Location"
          },
          "comment": {
            "type": "structure",
            "members": {
              "commentId": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The system-generated comment ID.</simpara>\n      ",
                "documentation": "\n        <p>The system-generated comment ID.</p>\n      ",
                "shape_name": "CommentId"
              },
              "content": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The content of the comment.</simpara>\n      ",
                "documentation": "\n        <p>The content of the comment.</p>\n      ",
                "shape_name": "Content"
              },
              "inReplyTo": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The ID of the comment for which this comment is a reply, if any.</simpara>\n      ",
                "documentation": "\n        <p>The ID of the comment for which this comment is a reply, if any.</p>\n      ",
                "shape_name": "CommentId"
              },
              "creationDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date and time the comment was created, in timestamp format.</simpara>\n      ",
                "documentation": "\n        <p>The date and time the comment was created, in timestamp format.</p>\n      ",
                "shape_name": "CreationDate"
              },
              "lastModifiedDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date and time the comment was most recently modified, in timestamp format.</simpara>\n      ",
                "documentation": "\n        <p>The date and time the comment was most recently modified, in timestamp format.</p>\n      ",
                "shape_name": "LastModifiedDate"
              },
              "authorArn": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of the person who posted the comment.</simpara>\n      ",
                "documentation": "\n        <p>The Amazon Resource Name (ARN) of the person who posted the comment.</p>\n      ",
                "shape_name": "Arn"
              },
              "deleted": {
                "type": "boolean",
                "zonbookDocumentation": "\n        <simpara>A Boolean value indicating whether the comment has been deleted.</simpara>\n      ",
                "documentation": "\n        <p>A Boolean value indicating whether the comment has been deleted.</p>\n      ",
                "shape_name": "IsCommentDeleted"
              },
              "clientRequestToken": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</simpara>\n      ",
                "documentation": "\n        <p>A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</p>\n      ",
                "shape_name": "ClientRequestToken"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The content of the comment you posted.</simpara>\n      ",
            "documentation": "\n        <p>The content of the comment you posted.</p>\n      ",
            "shape_name": "Comment"
          }
        },
        "shape_name": "PostCommentForPullRequestOutput",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The pull request ID could not be found. Make sure that you have specified the correct repository name and pull request ID, and then try again.</simpara>\n      ",
          "documentation": "\n        <p>The pull request ID could not be found. Make sure that you have specified the correct repository name and pull request ID, and then try again.</p>\n      ",
          "shape_name": "PullRequestDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The pull request ID is not valid. Make sure that you have provided the full ID and that the pull request is in the specified repository, and then try again.</simpara>\n      ",
          "documentation": "\n        <p>The pull request ID is not valid. Make sure that you have provided the full ID and that the pull request is in the specified repository, and then try again.</p>\n      ",
          "shape_name": "InvalidPullRequestIdException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A pull request ID is required, but none was provided.</simpara>\n      ",
          "documentation": "\n        <p>A pull request ID is required, but none was provided.</p>\n      ",
          "shape_name": "PullRequestIdRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The repository does not contain any pull requests with that pull request ID. Check to make sure you have provided the correct repository name for the pull request.</simpara>\n      ",
          "documentation": "\n        <p>The repository does not contain any pull requests with that pull request ID. Check to make sure you have provided the correct repository name for the pull request.</p>\n      ",
          "shape_name": "RepositoryNotAssociatedWithPullRequestException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A repository name is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A repository name is required but was not specified.</p>\n      ",
          "shape_name": "RepositoryNameRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified repository does not exist.</simpara>\n      ",
          "documentation": "\n        <p>The specified repository does not exist.</p>\n      ",
          "shape_name": "RepositoryDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>At least one specified repository name is not valid.</simpara>\n        <note>\n            <simpara>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</simpara>\n         </note>\n      ",
          "documentation": "\n        <p>At least one specified repository name is not valid.</p>\n        <note>\n            <p>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</p>\n         </note>\n      ",
          "shape_name": "InvalidRepositoryNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A client request token is required. A client request token is an unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</simpara>\n      ",
          "documentation": "\n        <p>A client request token is required. A client request token is an unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</p>\n      ",
          "shape_name": "ClientRequestTokenRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The client request token is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The client request token is not valid.</p>\n      ",
          "shape_name": "InvalidClientRequestTokenException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The client request token is not valid. Either the token is not in a valid format, or the token has been used in a previous request and cannot be re-used.</simpara>\n      ",
          "documentation": "\n        <p>The client request token is not valid. Either the token is not in a valid format, or the token has been used in a previous request and cannot be re-used.</p>\n      ",
          "shape_name": "IdempotencyParameterMismatchException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The comment is empty. You must provide some content for a comment. The content cannot be null.</simpara>\n      ",
          "documentation": "\n        <p>The comment is empty. You must provide some content for a comment. The content cannot be null.</p>\n      ",
          "shape_name": "CommentContentRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The comment is too large. Comments are limited to 1,000 characters.</simpara>\n      ",
          "documentation": "\n        <p>The comment is too large. Comments are limited to 1,000 characters.</p>\n      ",
          "shape_name": "CommentContentSizeLimitExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The location of the file is not valid. Make sure that you include the extension of the file as well as the file name.</simpara>\n      ",
          "documentation": "\n        <p>The location of the file is not valid. Make sure that you include the extension of the file as well as the file name.</p>\n      ",
          "shape_name": "InvalidFileLocationException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>Either the enum is not in a valid format, or the specified file version enum is not valid in respect to the current file version.</simpara>\n      ",
          "documentation": "\n        <p>Either the enum is not in a valid format, or the specified file version enum is not valid in respect to the current file version.</p>\n      ",
          "shape_name": "InvalidRelativeFileVersionEnumException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The folderPath for a location cannot be null.</simpara>\n      ",
          "documentation": "\n        <p>The folderPath for a location cannot be null.</p>\n      ",
          "shape_name": "PathRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The position is not valid. Make sure that the line number exists in the version of the file you want to comment on.</simpara>\n      ",
          "documentation": "\n        <p>The position is not valid. Make sure that the line number exists in the version of the file you want to comment on.</p>\n      ",
          "shape_name": "InvalidFilePositionException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A commit ID was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A commit ID was not specified.</p>\n      ",
          "shape_name": "CommitIdRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified commit ID is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified commit ID is not valid.</p>\n      ",
          "shape_name": "InvalidCommitIdException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption integrity check failed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption integrity check failed.</p>\n      ",
          "shape_name": "EncryptionIntegrityChecksFailedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption key could not be accessed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption key could not be accessed.</p>\n      ",
          "shape_name": "EncryptionKeyAccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is disabled.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is disabled.</p>\n      ",
          "shape_name": "EncryptionKeyDisabledException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>No encryption key was found.</simpara>\n      ",
          "documentation": "\n        <p>No encryption key was found.</p>\n      ",
          "shape_name": "EncryptionKeyNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is not available.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is not available.</p>\n      ",
          "shape_name": "EncryptionKeyUnavailableException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified commit does not exist or no commit was specified, and the specified repository has no default branch.</simpara>\n      ",
          "documentation": "\n        <p>The specified commit does not exist or no commit was specified, and the specified repository has no default branch.</p>\n      ",
          "shape_name": "CommitDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified path is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified path is not valid.</p>\n      ",
          "shape_name": "InvalidPathException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified path does not exist.</simpara>\n      ",
          "documentation": "\n        <p>The specified path does not exist.</p>\n      ",
          "shape_name": "PathDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The folderPath for a location cannot be null.</simpara>\n      ",
          "documentation": "\n        <p>The folderPath for a location cannot be null.</p>\n      ",
          "shape_name": "PathRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The before commit ID and the after commit ID are the same, which is not valid. The before commit ID and the after commit ID must be different commit IDs.</para>\n      ",
          "documentation": "\n        <p>The before commit ID and the after commit ID are the same, which is not valid. The before commit ID and the after commit ID must be different commit IDs.</p>\n      ",
          "shape_name": "BeforeCommitIdAndAfterCommitIdAreSameException"
        }
      ],
      "documentation": "\n        <p>Posts a comment on a pull request.</p>\n        \n      "
    },
    "PostCommentReply": {
      "name": "PostCommentReply",
      "input": {
        "type": "structure",
        "members": {
          "inReplyTo": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The system-generated ID of the comment to which you want to reply. To get this ID, use <xref linkend=\"GetCommentsForComparedCommit\"/> \n        or <xref linkend=\"GetCommentsForPullRequest\"/>.</simpara>\n      ",
            "documentation": "\n        <p>The system-generated ID of the comment to which you want to reply. To get this ID, use <a>GetCommentsForComparedCommit</a> \n        or <a>GetCommentsForPullRequest</a>.</p>\n      ",
            "required": true,
            "shape_name": "CommentId"
          },
          "clientRequestToken": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</simpara>\n      ",
            "documentation": "\n        <p>A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</p>\n      ",
            "idempotencyToken": true,
            "shape_name": "ClientRequestToken"
          },
          "content": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The contents of your reply to a comment.</simpara>\n      ",
            "documentation": "\n        <p>The contents of your reply to a comment.</p>\n      ",
            "required": true,
            "shape_name": "Content"
          }
        },
        "shape_name": "PostCommentReplyInput",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "comment": {
            "type": "structure",
            "members": {
              "commentId": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The system-generated comment ID.</simpara>\n      ",
                "documentation": "\n        <p>The system-generated comment ID.</p>\n      ",
                "shape_name": "CommentId"
              },
              "content": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The content of the comment.</simpara>\n      ",
                "documentation": "\n        <p>The content of the comment.</p>\n      ",
                "shape_name": "Content"
              },
              "inReplyTo": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The ID of the comment for which this comment is a reply, if any.</simpara>\n      ",
                "documentation": "\n        <p>The ID of the comment for which this comment is a reply, if any.</p>\n      ",
                "shape_name": "CommentId"
              },
              "creationDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date and time the comment was created, in timestamp format.</simpara>\n      ",
                "documentation": "\n        <p>The date and time the comment was created, in timestamp format.</p>\n      ",
                "shape_name": "CreationDate"
              },
              "lastModifiedDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date and time the comment was most recently modified, in timestamp format.</simpara>\n      ",
                "documentation": "\n        <p>The date and time the comment was most recently modified, in timestamp format.</p>\n      ",
                "shape_name": "LastModifiedDate"
              },
              "authorArn": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of the person who posted the comment.</simpara>\n      ",
                "documentation": "\n        <p>The Amazon Resource Name (ARN) of the person who posted the comment.</p>\n      ",
                "shape_name": "Arn"
              },
              "deleted": {
                "type": "boolean",
                "zonbookDocumentation": "\n        <simpara>A Boolean value indicating whether the comment has been deleted.</simpara>\n      ",
                "documentation": "\n        <p>A Boolean value indicating whether the comment has been deleted.</p>\n      ",
                "shape_name": "IsCommentDeleted"
              },
              "clientRequestToken": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</simpara>\n      ",
                "documentation": "\n        <p>A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</p>\n      ",
                "shape_name": "ClientRequestToken"
              }
            },
            "zonbookDocumentation": "\n        <simpara>Information about the reply to a comment.</simpara>\n      ",
            "documentation": "\n        <p>Information about the reply to a comment.</p>\n      ",
            "shape_name": "Comment"
          }
        },
        "shape_name": "PostCommentReplyOutput",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A client request token is required. A client request token is an unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</simpara>\n      ",
          "documentation": "\n        <p>A client request token is required. A client request token is an unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</p>\n      ",
          "shape_name": "ClientRequestTokenRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The client request token is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The client request token is not valid.</p>\n      ",
          "shape_name": "InvalidClientRequestTokenException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The client request token is not valid. Either the token is not in a valid format, or the token has been used in a previous request and cannot be re-used.</simpara>\n      ",
          "documentation": "\n        <p>The client request token is not valid. Either the token is not in a valid format, or the token has been used in a previous request and cannot be re-used.</p>\n      ",
          "shape_name": "IdempotencyParameterMismatchException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The comment is empty. You must provide some content for a comment. The content cannot be null.</simpara>\n      ",
          "documentation": "\n        <p>The comment is empty. You must provide some content for a comment. The content cannot be null.</p>\n      ",
          "shape_name": "CommentContentRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The comment is too large. Comments are limited to 1,000 characters.</simpara>\n      ",
          "documentation": "\n        <p>The comment is too large. Comments are limited to 1,000 characters.</p>\n      ",
          "shape_name": "CommentContentSizeLimitExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>No comment exists with the provided ID. Verify that you have provided the correct ID, and then try again.</simpara>\n      ",
          "documentation": "\n        <p>No comment exists with the provided ID. Verify that you have provided the correct ID, and then try again.</p>\n      ",
          "shape_name": "CommentDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The comment ID is missing or null. A comment ID is required.</simpara>\n      ",
          "documentation": "\n        <p>The comment ID is missing or null. A comment ID is required.</p>\n      ",
          "shape_name": "CommentIdRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The comment ID is not in a valid format. Make sure that you have provided the full comment ID.</simpara>\n      ",
          "documentation": "\n        <p>The comment ID is not in a valid format. Make sure that you have provided the full comment ID.</p>\n      ",
          "shape_name": "InvalidCommentIdException"
        }
      ],
      "documentation": "\n        <p>Posts a comment in reply to an existing comment on a comparison between commits or a pull request.</p>\n        \n      "
    },
    "UpdateComment": {
      "name": "UpdateComment",
      "input": {
        "type": "structure",
        "members": {
          "commentId": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The system-generated ID of the comment you want to update. To get this ID, use <xref linkend=\"GetCommentsForComparedCommit\"/> \n            or <xref linkend=\"GetCommentsForPullRequest\"/>.</simpara>\n      ",
            "documentation": "\n        <p>The system-generated ID of the comment you want to update. To get this ID, use <a>GetCommentsForComparedCommit</a> \n            or <a>GetCommentsForPullRequest</a>.</p>\n      ",
            "required": true,
            "shape_name": "CommentId"
          },
          "content": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The updated content with which you want to replace the existing content of the comment.</simpara>\n      ",
            "documentation": "\n        <p>The updated content with which you want to replace the existing content of the comment.</p>\n      ",
            "required": true,
            "shape_name": "Content"
          }
        },
        "shape_name": "UpdateCommentInput",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "comment": {
            "type": "structure",
            "members": {
              "commentId": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The system-generated comment ID.</simpara>\n      ",
                "documentation": "\n        <p>The system-generated comment ID.</p>\n      ",
                "shape_name": "CommentId"
              },
              "content": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The content of the comment.</simpara>\n      ",
                "documentation": "\n        <p>The content of the comment.</p>\n      ",
                "shape_name": "Content"
              },
              "inReplyTo": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The ID of the comment for which this comment is a reply, if any.</simpara>\n      ",
                "documentation": "\n        <p>The ID of the comment for which this comment is a reply, if any.</p>\n      ",
                "shape_name": "CommentId"
              },
              "creationDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date and time the comment was created, in timestamp format.</simpara>\n      ",
                "documentation": "\n        <p>The date and time the comment was created, in timestamp format.</p>\n      ",
                "shape_name": "CreationDate"
              },
              "lastModifiedDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date and time the comment was most recently modified, in timestamp format.</simpara>\n      ",
                "documentation": "\n        <p>The date and time the comment was most recently modified, in timestamp format.</p>\n      ",
                "shape_name": "LastModifiedDate"
              },
              "authorArn": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of the person who posted the comment.</simpara>\n      ",
                "documentation": "\n        <p>The Amazon Resource Name (ARN) of the person who posted the comment.</p>\n      ",
                "shape_name": "Arn"
              },
              "deleted": {
                "type": "boolean",
                "zonbookDocumentation": "\n        <simpara>A Boolean value indicating whether the comment has been deleted.</simpara>\n      ",
                "documentation": "\n        <p>A Boolean value indicating whether the comment has been deleted.</p>\n      ",
                "shape_name": "IsCommentDeleted"
              },
              "clientRequestToken": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</simpara>\n      ",
                "documentation": "\n        <p>A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</p>\n      ",
                "shape_name": "ClientRequestToken"
              }
            },
            "zonbookDocumentation": "\n        <simpara>Information about the updated comment.</simpara>\n      ",
            "documentation": "\n        <p>Information about the updated comment.</p>\n      ",
            "shape_name": "Comment"
          }
        },
        "shape_name": "UpdateCommentOutput",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The comment is empty. You must provide some content for a comment. The content cannot be null.</simpara>\n      ",
          "documentation": "\n        <p>The comment is empty. You must provide some content for a comment. The content cannot be null.</p>\n      ",
          "shape_name": "CommentContentRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The comment is too large. Comments are limited to 1,000 characters.</simpara>\n      ",
          "documentation": "\n        <p>The comment is too large. Comments are limited to 1,000 characters.</p>\n      ",
          "shape_name": "CommentContentSizeLimitExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>No comment exists with the provided ID. Verify that you have provided the correct ID, and then try again.</simpara>\n      ",
          "documentation": "\n        <p>No comment exists with the provided ID. Verify that you have provided the correct ID, and then try again.</p>\n      ",
          "shape_name": "CommentDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The comment ID is missing or null. A comment ID is required.</simpara>\n      ",
          "documentation": "\n        <p>The comment ID is missing or null. A comment ID is required.</p>\n      ",
          "shape_name": "CommentIdRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The comment ID is not in a valid format. Make sure that you have provided the full comment ID.</simpara>\n      ",
          "documentation": "\n        <p>The comment ID is not in a valid format. Make sure that you have provided the full comment ID.</p>\n      ",
          "shape_name": "InvalidCommentIdException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>You cannot modify or delete this comment. Only comment authors can modify or delete their comments.</simpara>\n      ",
          "documentation": "\n        <p>You cannot modify or delete this comment. Only comment authors can modify or delete their comments.</p>\n      ",
          "shape_name": "CommentNotCreatedByCallerException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>This comment has already been deleted. You cannot edit or delete a deleted comment.</simpara>\n      ",
          "documentation": "\n        <p>This comment has already been deleted. You cannot edit or delete a deleted comment.</p>\n      ",
          "shape_name": "CommentDeletedException"
        }
      ],
      "documentation": "\n        <p>Replaces the contents of a comment.</p>\n        \n        \n        \n      "
    },
    "GetCommentsForComparedCommit": {
      "name": "GetCommentsForComparedCommit",
      "input": {
        "type": "structure",
        "members": {
          "repositoryName": {
            "type": "string",
            "pattern": "[\\w\\.-]+",
            "zonbookDocumentation": "\n        <simpara>The name of the repository where you want to compare commits.</simpara>\n      ",
            "documentation": "\n        <p>The name of the repository where you want to compare commits.</p>\n      ",
            "required": true,
            "shape_name": "RepositoryName",
            "min_length": 1,
            "max_length": 100
          },
          "beforeCommitId": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>To establish the directionality of the comparison, the full commit ID of the 'before' commit.</simpara>\n      ",
            "documentation": "\n        <p>To establish the directionality of the comparison, the full commit ID of the 'before' commit.</p>\n      ",
            "shape_name": "CommitId"
          },
          "afterCommitId": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>To establish the directionality of the comparison, the full commit ID of the 'after' commit.</simpara>\n      ",
            "documentation": "\n        <p>To establish the directionality of the comparison, the full commit ID of the 'after' commit.</p>\n      ",
            "required": true,
            "shape_name": "CommitId"
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>An enumeration token that when provided in a request, returns the next batch of the results. </simpara>\n      ",
            "documentation": "\n        <p>An enumeration token that when provided in a request, returns the next batch of the results. </p>\n      ",
            "paginationToken": true,
            "shape_name": "NextToken"
          },
          "maxResults": {
            "type": "integer",
            "zonbookDocumentation": "\n        <simpara>A non-negative integer used to limit the number of returned results. \n            The default is 100 comments, and is configurable up to 500.</simpara>\n      ",
            "documentation": "\n        <p>A non-negative integer used to limit the number of returned results. \n            The default is 100 comments, and is configurable up to 500.</p>\n      ",
            "pageSize": true,
            "shape_name": "MaxResults"
          }
        },
        "shape_name": "GetCommentsForComparedCommitInput",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "commentsForComparedCommitData": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>A list of comment objects on the compared commit.</simpara>\n      ",
            "documentation": "\n        <p>A list of comment objects on the compared commit.</p>\n      ",
            "shape_name": "CommentsForComparedCommitData",
            "members": {
              "type": "structure",
              "members": {
                "repositoryName": {
                  "type": "string",
                  "pattern": "[\\w\\.-]+",
                  "zonbookDocumentation": "\n        <simpara>The name of the repository that contains the compared commits.</simpara>\n      ",
                  "documentation": "\n        <p>The name of the repository that contains the compared commits.</p>\n      ",
                  "shape_name": "RepositoryName",
                  "min_length": 1,
                  "max_length": 100
                },
                "beforeCommitId": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>The full commit ID of the commit used to establish the 'before' of the comparison.</simpara>\n      ",
                  "documentation": "\n        <p>The full commit ID of the commit used to establish the 'before' of the comparison.</p>\n      ",
                  "shape_name": "CommitId"
                },
                "afterCommitId": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>The full commit ID of the commit used to establish the 'after' of the comparison.</simpara>\n      ",
                  "documentation": "\n        <p>The full commit ID of the commit used to establish the 'after' of the comparison.</p>\n      ",
                  "shape_name": "CommitId"
                },
                "beforeBlobId": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>The full blob ID of the commit used to establish the 'before' of the comparison.</simpara>\n      ",
                  "documentation": "\n        <p>The full blob ID of the commit used to establish the 'before' of the comparison.</p>\n      ",
                  "shape_name": "ObjectId"
                },
                "afterBlobId": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>The full blob ID of the commit used to establish the 'after' of the comparison.</simpara>\n      ",
                  "documentation": "\n        <p>The full blob ID of the commit used to establish the 'after' of the comparison.</p>\n      ",
                  "shape_name": "ObjectId"
                },
                "location": {
                  "type": "structure",
                  "members": {
                    "filePath": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The name of the file being compared, including its extension and subdirectory, if any.</simpara>\n      ",
                      "documentation": "\n        <p>The name of the file being compared, including its extension and subdirectory, if any.</p>\n      ",
                      "shape_name": "Path"
                    },
                    "filePosition": {
                      "type": "long",
                      "zonbookDocumentation": "\n        <simpara>The position of a change within a compared file, in line number format.</simpara>\n      ",
                      "documentation": "\n        <p>The position of a change within a compared file, in line number format.</p>\n      ",
                      "shape_name": "Position"
                    },
                    "relativeFileVersion": {
                      "type": "string",
                      "enum": [
                        "BEFORE",
                        "AFTER"
                      ],
                      "zonbookDocumentation": "\n        <simpara>In a comparison of commits or a pull request, whether the change is in the 'before' or 'after' of that comparison.</simpara>\n      ",
                      "documentation": "\n        <p>In a comparison of commits or a pull request, whether the change is in the 'before' or 'after' of that comparison.</p>\n      ",
                      "shape_name": "RelativeFileVersionEnum"
                    }
                  },
                  "zonbookDocumentation": "\n        <simpara>Location information about the comment on the comparison, including the file name, line number, and whether \n        the version of the file where the comment was made is 'BEFORE' or 'AFTER'.</simpara>\n      ",
                  "documentation": "\n        <p>Location information about the comment on the comparison, including the file name, line number, and whether \n        the version of the file where the comment was made is 'BEFORE' or 'AFTER'.</p>\n      ",
                  "shape_name": "Location"
                },
                "comments": {
                  "type": "list",
                  "zonbookDocumentation": "\n        <simpara>An array of comment objects. Each comment object contains information about a comment on the comparison\n         between commits.</simpara>\n      ",
                  "documentation": "\n        <p>An array of comment objects. Each comment object contains information about a comment on the comparison\n         between commits.</p>\n      ",
                  "shape_name": "Comments",
                  "members": {
                    "type": "structure",
                    "members": {
                      "commentId": {
                        "type": "string",
                        "zonbookDocumentation": "\n        <simpara>The system-generated comment ID.</simpara>\n      ",
                        "documentation": "\n        <p>The system-generated comment ID.</p>\n      ",
                        "shape_name": "CommentId"
                      },
                      "content": {
                        "type": "string",
                        "zonbookDocumentation": "\n        <simpara>The content of the comment.</simpara>\n      ",
                        "documentation": "\n        <p>The content of the comment.</p>\n      ",
                        "shape_name": "Content"
                      },
                      "inReplyTo": {
                        "type": "string",
                        "zonbookDocumentation": "\n        <simpara>The ID of the comment for which this comment is a reply, if any.</simpara>\n      ",
                        "documentation": "\n        <p>The ID of the comment for which this comment is a reply, if any.</p>\n      ",
                        "shape_name": "CommentId"
                      },
                      "creationDate": {
                        "type": "timestamp",
                        "zonbookDocumentation": "\n        <simpara>The date and time the comment was created, in timestamp format.</simpara>\n      ",
                        "documentation": "\n        <p>The date and time the comment was created, in timestamp format.</p>\n      ",
                        "shape_name": "CreationDate"
                      },
                      "lastModifiedDate": {
                        "type": "timestamp",
                        "zonbookDocumentation": "\n        <simpara>The date and time the comment was most recently modified, in timestamp format.</simpara>\n      ",
                        "documentation": "\n        <p>The date and time the comment was most recently modified, in timestamp format.</p>\n      ",
                        "shape_name": "LastModifiedDate"
                      },
                      "authorArn": {
                        "type": "string",
                        "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of the person who posted the comment.</simpara>\n      ",
                        "documentation": "\n        <p>The Amazon Resource Name (ARN) of the person who posted the comment.</p>\n      ",
                        "shape_name": "Arn"
                      },
                      "deleted": {
                        "type": "boolean",
                        "zonbookDocumentation": "\n        <simpara>A Boolean value indicating whether the comment has been deleted.</simpara>\n      ",
                        "documentation": "\n        <p>A Boolean value indicating whether the comment has been deleted.</p>\n      ",
                        "shape_name": "IsCommentDeleted"
                      },
                      "clientRequestToken": {
                        "type": "string",
                        "zonbookDocumentation": "\n        <simpara>A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</simpara>\n      ",
                        "documentation": "\n        <p>A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</p>\n      ",
                        "shape_name": "ClientRequestToken"
                      }
                    },
                    "zonbookDocumentation": "\n        <simpara>Returns information about a specific comment.</simpara>\n      ",
                    "documentation": "\n        <p>Returns information about a specific comment.</p>\n      ",
                    "shape_name": "Comment"
                  }
                }
              },
              "zonbookDocumentation": "\n        <simpara>Returns information about comments on the comparison between two commits.</simpara>\n      ",
              "documentation": "\n        <p>Returns information about comments on the comparison between two commits.</p>\n      ",
              "shape_name": "CommentsForComparedCommit"
            }
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>An enumeration token that can be used in a request to return the next batch of the results.</simpara>\n      ",
            "documentation": "\n        <p>An enumeration token that can be used in a request to return the next batch of the results.</p>\n      ",
            "paginationToken": true,
            "shape_name": "NextToken"
          }
        },
        "shape_name": "GetCommentsForComparedCommitOutput",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A repository name is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A repository name is required but was not specified.</p>\n      ",
          "shape_name": "RepositoryNameRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified repository does not exist.</simpara>\n      ",
          "documentation": "\n        <p>The specified repository does not exist.</p>\n      ",
          "shape_name": "RepositoryDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>At least one specified repository name is not valid.</simpara>\n        <note>\n            <simpara>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</simpara>\n         </note>\n      ",
          "documentation": "\n        <p>At least one specified repository name is not valid.</p>\n        <note>\n            <p>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</p>\n         </note>\n      ",
          "shape_name": "InvalidRepositoryNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A commit ID was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A commit ID was not specified.</p>\n      ",
          "shape_name": "CommitIdRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified commit ID is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified commit ID is not valid.</p>\n      ",
          "shape_name": "InvalidCommitIdException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified commit does not exist or no commit was specified, and the specified repository has no default branch.</simpara>\n      ",
          "documentation": "\n        <p>The specified commit does not exist or no commit was specified, and the specified repository has no default branch.</p>\n      ",
          "shape_name": "CommitDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified number of maximum results is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified number of maximum results is not valid.</p>\n      ",
          "shape_name": "InvalidMaxResultsException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified continuation token is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified continuation token is not valid.</p>\n      ",
          "shape_name": "InvalidContinuationTokenException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption integrity check failed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption integrity check failed.</p>\n      ",
          "shape_name": "EncryptionIntegrityChecksFailedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption key could not be accessed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption key could not be accessed.</p>\n      ",
          "shape_name": "EncryptionKeyAccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is disabled.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is disabled.</p>\n      ",
          "shape_name": "EncryptionKeyDisabledException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>No encryption key was found.</simpara>\n      ",
          "documentation": "\n        <p>No encryption key was found.</p>\n      ",
          "shape_name": "EncryptionKeyNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is not available.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is not available.</p>\n      ",
          "shape_name": "EncryptionKeyUnavailableException"
        }
      ],
      "documentation": "\n        <p>Returns information about comments made on the comparison between two commits.</p>\n        \n      "
    },
    "GetCommentsForPullRequest": {
      "name": "GetCommentsForPullRequest",
      "input": {
        "type": "structure",
        "members": {
          "pullRequestId": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The system-generated ID of the pull request. To get this ID, use <xref linkend=\"ListPullRequests\"/>.</simpara>\n      ",
            "documentation": "\n        <p>The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.</p>\n      ",
            "required": true,
            "shape_name": "PullRequestId"
          },
          "repositoryName": {
            "type": "string",
            "pattern": "[\\w\\.-]+",
            "zonbookDocumentation": "\n        <simpara>The name of the repository that contains the pull request.</simpara>\n      ",
            "documentation": "\n        <p>The name of the repository that contains the pull request.</p>\n      ",
            "shape_name": "RepositoryName",
            "min_length": 1,
            "max_length": 100
          },
          "beforeCommitId": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The full commit ID of the commit in the destination branch that was the tip of the branch at the time the pull request was created.</simpara>\n      ",
            "documentation": "\n        <p>The full commit ID of the commit in the destination branch that was the tip of the branch at the time the pull request was created.</p>\n      ",
            "shape_name": "CommitId"
          },
          "afterCommitId": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The full commit ID of the commit in the source branch that was the tip of the branch at the time the comment was made.</simpara>\n      ",
            "documentation": "\n        <p>The full commit ID of the commit in the source branch that was the tip of the branch at the time the comment was made.</p>\n      ",
            "shape_name": "CommitId"
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>An enumeration token that when provided in a request, returns the next batch of the results.</simpara>\n      ",
            "documentation": "\n        <p>An enumeration token that when provided in a request, returns the next batch of the results.</p>\n      ",
            "paginationToken": true,
            "shape_name": "NextToken"
          },
          "maxResults": {
            "type": "integer",
            "zonbookDocumentation": "\n        <simpara>A non-negative integer used to limit the number of returned results. The default is 100 comments.\n            You can return up to 500 comments with a single request.</simpara>\n      ",
            "documentation": "\n        <p>A non-negative integer used to limit the number of returned results. The default is 100 comments.\n            You can return up to 500 comments with a single request.</p>\n      ",
            "pageSize": true,
            "shape_name": "MaxResults"
          }
        },
        "shape_name": "GetCommentsForPullRequestInput",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "commentsForPullRequestData": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>An array of comment objects on the pull request.</simpara>\n      ",
            "documentation": "\n        <p>An array of comment objects on the pull request.</p>\n      ",
            "shape_name": "CommentsForPullRequestData",
            "members": {
              "type": "structure",
              "members": {
                "pullRequestId": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <para>The system-generated ID of the pull request.</para>\n      ",
                  "documentation": "\n        <p>The system-generated ID of the pull request.</p>\n      ",
                  "shape_name": "PullRequestId"
                },
                "repositoryName": {
                  "type": "string",
                  "pattern": "[\\w\\.-]+",
                  "zonbookDocumentation": "\n        <para>The name of the repository that contains the pull request.</para>\n      ",
                  "documentation": "\n        <p>The name of the repository that contains the pull request.</p>\n      ",
                  "shape_name": "RepositoryName",
                  "min_length": 1,
                  "max_length": 100
                },
                "beforeCommitId": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <para>The full commit ID of the commit that was the tip of the destination branch when the pull request was created.\n        This commit will be superceded by the after commit in the source branch when and if you merge the source branch into the destination branch.</para>\n      ",
                  "documentation": "\n        <p>The full commit ID of the commit that was the tip of the destination branch when the pull request was created.\n        This commit will be superceded by the after commit in the source branch when and if you merge the source branch into the destination branch.</p>\n      ",
                  "shape_name": "CommitId"
                },
                "afterCommitId": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <para>he full commit ID of the commit that was the tip of the source branch at the time the comment was made.\n            </para>\n      ",
                  "documentation": "\n        <p>he full commit ID of the commit that was the tip of the source branch at the time the comment was made.\n            </p>\n      ",
                  "shape_name": "CommitId"
                },
                "beforeBlobId": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <para>The full blob ID of the file on which you want to comment on the destination commit.</para>\n      ",
                  "documentation": "\n        <p>The full blob ID of the file on which you want to comment on the destination commit.</p>\n      ",
                  "shape_name": "ObjectId"
                },
                "afterBlobId": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <para>The full blob ID of the file on which you want to comment on the source commit.</para>\n      ",
                  "documentation": "\n        <p>The full blob ID of the file on which you want to comment on the source commit.</p>\n      ",
                  "shape_name": "ObjectId"
                },
                "location": {
                  "type": "structure",
                  "members": {
                    "filePath": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The name of the file being compared, including its extension and subdirectory, if any.</simpara>\n      ",
                      "documentation": "\n        <p>The name of the file being compared, including its extension and subdirectory, if any.</p>\n      ",
                      "shape_name": "Path"
                    },
                    "filePosition": {
                      "type": "long",
                      "zonbookDocumentation": "\n        <simpara>The position of a change within a compared file, in line number format.</simpara>\n      ",
                      "documentation": "\n        <p>The position of a change within a compared file, in line number format.</p>\n      ",
                      "shape_name": "Position"
                    },
                    "relativeFileVersion": {
                      "type": "string",
                      "enum": [
                        "BEFORE",
                        "AFTER"
                      ],
                      "zonbookDocumentation": "\n        <simpara>In a comparison of commits or a pull request, whether the change is in the 'before' or 'after' of that comparison.</simpara>\n      ",
                      "documentation": "\n        <p>In a comparison of commits or a pull request, whether the change is in the 'before' or 'after' of that comparison.</p>\n      ",
                      "shape_name": "RelativeFileVersionEnum"
                    }
                  },
                  "zonbookDocumentation": "\n        <para>Location information about the comment on the pull request, including the file name, line number, and whether \n            the version of the file where the comment was made is 'BEFORE' (destination branch) or 'AFTER' (source branch).</para>\n      ",
                  "documentation": "\n        <p>Location information about the comment on the pull request, including the file name, line number, and whether \n            the version of the file where the comment was made is 'BEFORE' (destination branch) or 'AFTER' (source branch).</p>\n      ",
                  "shape_name": "Location"
                },
                "comments": {
                  "type": "list",
                  "zonbookDocumentation": "\n        <para>An array of comment objects. Each comment object contains information about a comment on the pull request.</para>\n      ",
                  "documentation": "\n        <p>An array of comment objects. Each comment object contains information about a comment on the pull request.</p>\n      ",
                  "shape_name": "Comments",
                  "members": {
                    "type": "structure",
                    "members": {
                      "commentId": {
                        "type": "string",
                        "zonbookDocumentation": "\n        <simpara>The system-generated comment ID.</simpara>\n      ",
                        "documentation": "\n        <p>The system-generated comment ID.</p>\n      ",
                        "shape_name": "CommentId"
                      },
                      "content": {
                        "type": "string",
                        "zonbookDocumentation": "\n        <simpara>The content of the comment.</simpara>\n      ",
                        "documentation": "\n        <p>The content of the comment.</p>\n      ",
                        "shape_name": "Content"
                      },
                      "inReplyTo": {
                        "type": "string",
                        "zonbookDocumentation": "\n        <simpara>The ID of the comment for which this comment is a reply, if any.</simpara>\n      ",
                        "documentation": "\n        <p>The ID of the comment for which this comment is a reply, if any.</p>\n      ",
                        "shape_name": "CommentId"
                      },
                      "creationDate": {
                        "type": "timestamp",
                        "zonbookDocumentation": "\n        <simpara>The date and time the comment was created, in timestamp format.</simpara>\n      ",
                        "documentation": "\n        <p>The date and time the comment was created, in timestamp format.</p>\n      ",
                        "shape_name": "CreationDate"
                      },
                      "lastModifiedDate": {
                        "type": "timestamp",
                        "zonbookDocumentation": "\n        <simpara>The date and time the comment was most recently modified, in timestamp format.</simpara>\n      ",
                        "documentation": "\n        <p>The date and time the comment was most recently modified, in timestamp format.</p>\n      ",
                        "shape_name": "LastModifiedDate"
                      },
                      "authorArn": {
                        "type": "string",
                        "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of the person who posted the comment.</simpara>\n      ",
                        "documentation": "\n        <p>The Amazon Resource Name (ARN) of the person who posted the comment.</p>\n      ",
                        "shape_name": "Arn"
                      },
                      "deleted": {
                        "type": "boolean",
                        "zonbookDocumentation": "\n        <simpara>A Boolean value indicating whether the comment has been deleted.</simpara>\n      ",
                        "documentation": "\n        <p>A Boolean value indicating whether the comment has been deleted.</p>\n      ",
                        "shape_name": "IsCommentDeleted"
                      },
                      "clientRequestToken": {
                        "type": "string",
                        "zonbookDocumentation": "\n        <simpara>A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</simpara>\n      ",
                        "documentation": "\n        <p>A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</p>\n      ",
                        "shape_name": "ClientRequestToken"
                      }
                    },
                    "zonbookDocumentation": "\n        <simpara>Returns information about a specific comment.</simpara>\n      ",
                    "documentation": "\n        <p>Returns information about a specific comment.</p>\n      ",
                    "shape_name": "Comment"
                  }
                }
              },
              "zonbookDocumentation": "\n        <para>Returns information about comments on a pull request.</para>\n      ",
              "documentation": "\n        <p>Returns information about comments on a pull request.</p>\n      ",
              "shape_name": "CommentsForPullRequest"
            }
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>An enumeration token that can be used in a request to return the next batch of the results.</simpara>\n      ",
            "documentation": "\n        <p>An enumeration token that can be used in a request to return the next batch of the results.</p>\n      ",
            "paginationToken": true,
            "shape_name": "NextToken"
          }
        },
        "shape_name": "GetCommentsForPullRequestOutput",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A pull request ID is required, but none was provided.</simpara>\n      ",
          "documentation": "\n        <p>A pull request ID is required, but none was provided.</p>\n      ",
          "shape_name": "PullRequestIdRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The pull request ID could not be found. Make sure that you have specified the correct repository name and pull request ID, and then try again.</simpara>\n      ",
          "documentation": "\n        <p>The pull request ID could not be found. Make sure that you have specified the correct repository name and pull request ID, and then try again.</p>\n      ",
          "shape_name": "PullRequestDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The pull request ID is not valid. Make sure that you have provided the full ID and that the pull request is in the specified repository, and then try again.</simpara>\n      ",
          "documentation": "\n        <p>The pull request ID is not valid. Make sure that you have provided the full ID and that the pull request is in the specified repository, and then try again.</p>\n      ",
          "shape_name": "InvalidPullRequestIdException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A repository name is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A repository name is required but was not specified.</p>\n      ",
          "shape_name": "RepositoryNameRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified repository does not exist.</simpara>\n      ",
          "documentation": "\n        <p>The specified repository does not exist.</p>\n      ",
          "shape_name": "RepositoryDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>At least one specified repository name is not valid.</simpara>\n        <note>\n            <simpara>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</simpara>\n         </note>\n      ",
          "documentation": "\n        <p>At least one specified repository name is not valid.</p>\n        <note>\n            <p>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</p>\n         </note>\n      ",
          "shape_name": "InvalidRepositoryNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A commit ID was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A commit ID was not specified.</p>\n      ",
          "shape_name": "CommitIdRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified commit ID is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified commit ID is not valid.</p>\n      ",
          "shape_name": "InvalidCommitIdException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified commit does not exist or no commit was specified, and the specified repository has no default branch.</simpara>\n      ",
          "documentation": "\n        <p>The specified commit does not exist or no commit was specified, and the specified repository has no default branch.</p>\n      ",
          "shape_name": "CommitDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified number of maximum results is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified number of maximum results is not valid.</p>\n      ",
          "shape_name": "InvalidMaxResultsException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified continuation token is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified continuation token is not valid.</p>\n      ",
          "shape_name": "InvalidContinuationTokenException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The repository does not contain any pull requests with that pull request ID. Check to make sure you have provided the correct repository name for the pull request.</simpara>\n      ",
          "documentation": "\n        <p>The repository does not contain any pull requests with that pull request ID. Check to make sure you have provided the correct repository name for the pull request.</p>\n      ",
          "shape_name": "RepositoryNotAssociatedWithPullRequestException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption integrity check failed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption integrity check failed.</p>\n      ",
          "shape_name": "EncryptionIntegrityChecksFailedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption key could not be accessed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption key could not be accessed.</p>\n      ",
          "shape_name": "EncryptionKeyAccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is disabled.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is disabled.</p>\n      ",
          "shape_name": "EncryptionKeyDisabledException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>No encryption key was found.</simpara>\n      ",
          "documentation": "\n        <p>No encryption key was found.</p>\n      ",
          "shape_name": "EncryptionKeyNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is not available.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is not available.</p>\n      ",
          "shape_name": "EncryptionKeyUnavailableException"
        }
      ],
      "documentation": "\n        <p>Returns comments made on a pull request.</p>\n        \n      "
    },
    "DeleteCommentContent": {
      "name": "DeleteCommentContent",
      "input": {
        "type": "structure",
        "members": {
          "commentId": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The unique, system-generated ID of the comment. To get this ID, use  <xref linkend=\"GetCommentsForComparedCommit\"/>\n         or <xref linkend=\"GetCommentsForPullRequest\"/>.</simpara>\n      ",
            "documentation": "\n        <p>The unique, system-generated ID of the comment. To get this ID, use  <a>GetCommentsForComparedCommit</a>\n         or <a>GetCommentsForPullRequest</a>.</p>\n      ",
            "required": true,
            "shape_name": "CommentId"
          }
        },
        "shape_name": "DeleteCommentContentInput",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "comment": {
            "type": "structure",
            "members": {
              "commentId": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The system-generated comment ID.</simpara>\n      ",
                "documentation": "\n        <p>The system-generated comment ID.</p>\n      ",
                "shape_name": "CommentId"
              },
              "content": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The content of the comment.</simpara>\n      ",
                "documentation": "\n        <p>The content of the comment.</p>\n      ",
                "shape_name": "Content"
              },
              "inReplyTo": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The ID of the comment for which this comment is a reply, if any.</simpara>\n      ",
                "documentation": "\n        <p>The ID of the comment for which this comment is a reply, if any.</p>\n      ",
                "shape_name": "CommentId"
              },
              "creationDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date and time the comment was created, in timestamp format.</simpara>\n      ",
                "documentation": "\n        <p>The date and time the comment was created, in timestamp format.</p>\n      ",
                "shape_name": "CreationDate"
              },
              "lastModifiedDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date and time the comment was most recently modified, in timestamp format.</simpara>\n      ",
                "documentation": "\n        <p>The date and time the comment was most recently modified, in timestamp format.</p>\n      ",
                "shape_name": "LastModifiedDate"
              },
              "authorArn": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of the person who posted the comment.</simpara>\n      ",
                "documentation": "\n        <p>The Amazon Resource Name (ARN) of the person who posted the comment.</p>\n      ",
                "shape_name": "Arn"
              },
              "deleted": {
                "type": "boolean",
                "zonbookDocumentation": "\n        <simpara>A Boolean value indicating whether the comment has been deleted.</simpara>\n      ",
                "documentation": "\n        <p>A Boolean value indicating whether the comment has been deleted.</p>\n      ",
                "shape_name": "IsCommentDeleted"
              },
              "clientRequestToken": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</simpara>\n      ",
                "documentation": "\n        <p>A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</p>\n      ",
                "shape_name": "ClientRequestToken"
              }
            },
            "zonbookDocumentation": "\n        <simpara>Information about the comment you just deleted.</simpara>\n      ",
            "documentation": "\n        <p>Information about the comment you just deleted.</p>\n      ",
            "shape_name": "Comment"
          }
        },
        "shape_name": "DeleteCommentContentOutput",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>No comment exists with the provided ID. Verify that you have provided the correct ID, and then try again.</simpara>\n      ",
          "documentation": "\n        <p>No comment exists with the provided ID. Verify that you have provided the correct ID, and then try again.</p>\n      ",
          "shape_name": "CommentDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The comment ID is missing or null. A comment ID is required.</simpara>\n      ",
          "documentation": "\n        <p>The comment ID is missing or null. A comment ID is required.</p>\n      ",
          "shape_name": "CommentIdRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The comment ID is not in a valid format. Make sure that you have provided the full comment ID.</simpara>\n      ",
          "documentation": "\n        <p>The comment ID is not in a valid format. Make sure that you have provided the full comment ID.</p>\n      ",
          "shape_name": "InvalidCommentIdException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>This comment has already been deleted. You cannot edit or delete a deleted comment.</simpara>\n      ",
          "documentation": "\n        <p>This comment has already been deleted. You cannot edit or delete a deleted comment.</p>\n      ",
          "shape_name": "CommentDeletedException"
        }
      ],
      "documentation": "\n        <p>Deletes the content of a comment made on a change, file, or commit in a repository.</p>\n        \n      "
    },
    "GetComment": {
      "name": "GetComment",
      "input": {
        "type": "structure",
        "members": {
          "commentId": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The unique, system-generated ID of the comment. To get this ID, use  <xref linkend=\"GetCommentsForComparedCommit\"/>\n            or <xref linkend=\"GetCommentsForPullRequest\"/>.</simpara>\n      ",
            "documentation": "\n        <p>The unique, system-generated ID of the comment. To get this ID, use  <a>GetCommentsForComparedCommit</a>\n            or <a>GetCommentsForPullRequest</a>.</p>\n      ",
            "required": true,
            "shape_name": "CommentId"
          }
        },
        "shape_name": "GetCommentInput",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "comment": {
            "type": "structure",
            "members": {
              "commentId": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The system-generated comment ID.</simpara>\n      ",
                "documentation": "\n        <p>The system-generated comment ID.</p>\n      ",
                "shape_name": "CommentId"
              },
              "content": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The content of the comment.</simpara>\n      ",
                "documentation": "\n        <p>The content of the comment.</p>\n      ",
                "shape_name": "Content"
              },
              "inReplyTo": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The ID of the comment for which this comment is a reply, if any.</simpara>\n      ",
                "documentation": "\n        <p>The ID of the comment for which this comment is a reply, if any.</p>\n      ",
                "shape_name": "CommentId"
              },
              "creationDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date and time the comment was created, in timestamp format.</simpara>\n      ",
                "documentation": "\n        <p>The date and time the comment was created, in timestamp format.</p>\n      ",
                "shape_name": "CreationDate"
              },
              "lastModifiedDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date and time the comment was most recently modified, in timestamp format.</simpara>\n      ",
                "documentation": "\n        <p>The date and time the comment was most recently modified, in timestamp format.</p>\n      ",
                "shape_name": "LastModifiedDate"
              },
              "authorArn": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of the person who posted the comment.</simpara>\n      ",
                "documentation": "\n        <p>The Amazon Resource Name (ARN) of the person who posted the comment.</p>\n      ",
                "shape_name": "Arn"
              },
              "deleted": {
                "type": "boolean",
                "zonbookDocumentation": "\n        <simpara>A Boolean value indicating whether the comment has been deleted.</simpara>\n      ",
                "documentation": "\n        <p>A Boolean value indicating whether the comment has been deleted.</p>\n      ",
                "shape_name": "IsCommentDeleted"
              },
              "clientRequestToken": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</simpara>\n      ",
                "documentation": "\n        <p>A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</p>\n      ",
                "shape_name": "ClientRequestToken"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The contents of the comment.</simpara>\n      ",
            "documentation": "\n        <p>The contents of the comment.</p>\n      ",
            "shape_name": "Comment"
          }
        },
        "shape_name": "GetCommentOutput",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>No comment exists with the provided ID. Verify that you have provided the correct ID, and then try again.</simpara>\n      ",
          "documentation": "\n        <p>No comment exists with the provided ID. Verify that you have provided the correct ID, and then try again.</p>\n      ",
          "shape_name": "CommentDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The comment ID is missing or null. A comment ID is required.</simpara>\n      ",
          "documentation": "\n        <p>The comment ID is missing or null. A comment ID is required.</p>\n      ",
          "shape_name": "CommentIdRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The comment ID is not in a valid format. Make sure that you have provided the full comment ID.</simpara>\n      ",
          "documentation": "\n        <p>The comment ID is not in a valid format. Make sure that you have provided the full comment ID.</p>\n      ",
          "shape_name": "InvalidCommentIdException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>This comment has already been deleted. You cannot edit or delete a deleted comment.</simpara>\n      ",
          "documentation": "\n        <p>This comment has already been deleted. You cannot edit or delete a deleted comment.</p>\n      ",
          "shape_name": "CommentDeletedException"
        }
      ],
      "documentation": "\n        <p>Returns the content of a comment made on a change, file, or commit in a repository.</p>\n        \n      "
    },
    "CreatePullRequest": {
      "name": "CreatePullRequest",
      "input": {
        "type": "structure",
        "members": {
          "title": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The title of the pull request. This title will be used to identify the pull request to other\n        users in the repository.</simpara>\n      ",
            "documentation": "\n        <p>The title of the pull request. This title will be used to identify the pull request to other\n        users in the repository.</p>\n      ",
            "required": true,
            "shape_name": "Title",
            "max_length": 150
          },
          "description": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>A description of the pull request.</simpara>\n      ",
            "documentation": "\n        <p>A description of the pull request.</p>\n      ",
            "shape_name": "Description",
            "max_length": 10240
          },
          "targets": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The targets for the pull request, including the source of the code to be reviewed (the source branch), \n        and the destination where the creator of the pull request intends the code to be merged after the pull request is closed \n        (the destination branch).</simpara>\n      ",
            "documentation": "\n        <p>The targets for the pull request, including the source of the code to be reviewed (the source branch), \n        and the destination where the creator of the pull request intends the code to be merged after the pull request is closed \n        (the destination branch).</p>\n      ",
            "required": true,
            "shape_name": "TargetList",
            "members": {
              "type": "structure",
              "members": {
                "repositoryName": {
                  "type": "string",
                  "pattern": "[\\w\\.-]+",
                  "zonbookDocumentation": "\n        <simpara>The name of the repository that contains the pull request.</simpara>\n      ",
                  "documentation": "\n        <p>The name of the repository that contains the pull request.</p>\n      ",
                  "required": true,
                  "shape_name": "RepositoryName",
                  "min_length": 1,
                  "max_length": 100
                },
                "sourceReference": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>The branch of the repository that contains the changes for the pull request. Also known as the source branch.</simpara>\n      ",
                  "documentation": "\n        <p>The branch of the repository that contains the changes for the pull request. Also known as the source branch.</p>\n      ",
                  "required": true,
                  "shape_name": "ReferenceName"
                },
                "destinationReference": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>The branch of the repository where the pull request changes will be merged into. Also known as the destination branch.</simpara>\n      ",
                  "documentation": "\n        <p>The branch of the repository where the pull request changes will be merged into. Also known as the destination branch.</p>\n      ",
                  "shape_name": "ReferenceName"
                }
              },
              "zonbookDocumentation": "\n        <simpara>Returns information about a target for a pull request.</simpara>\n      ",
              "documentation": "\n        <p>Returns information about a target for a pull request.</p>\n      ",
              "shape_name": "Target"
            }
          },
          "clientRequestToken": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n        If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n        that token.</simpara>\n        <note>\n            <simpara>The AWS SDKs prepopulate client request tokens. If using an AWS SDK, you do not have to generate an idempotency token, as this \n            will be done for you.</simpara>\n        </note>\n      ",
            "documentation": "\n        <p>A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n        If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n        that token.</p>\n        <note>\n            <p>The AWS SDKs prepopulate client request tokens. If using an AWS SDK, you do not have to generate an idempotency token, as this \n            will be done for you.</p>\n        </note>\n      ",
            "idempotencyToken": true,
            "shape_name": "ClientRequestToken"
          }
        },
        "shape_name": "CreatePullRequestInput",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "pullRequest": {
            "type": "structure",
            "members": {
              "pullRequestId": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The system-generated ID of the pull request. </simpara>\n      ",
                "documentation": "\n        <p>The system-generated ID of the pull request. </p>\n      ",
                "shape_name": "PullRequestId"
              },
              "title": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The user-defined title of the pull request. This title is displayed in the list of pull requests to other users of the repository.</simpara>\n      ",
                "documentation": "\n        <p>The user-defined title of the pull request. This title is displayed in the list of pull requests to other users of the repository.</p>\n      ",
                "shape_name": "Title",
                "max_length": 150
              },
              "description": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The user-defined description of the pull request. This description can be used to clarify what should be reviewed and other details of the request.</simpara>\n      ",
                "documentation": "\n        <p>The user-defined description of the pull request. This description can be used to clarify what should be reviewed and other details of the request.</p>\n      ",
                "shape_name": "Description",
                "max_length": 10240
              },
              "lastActivityDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The day and time of the last user or system activity on the pull request, in timestamp format.</simpara>\n      ",
                "documentation": "\n        <p>The day and time of the last user or system activity on the pull request, in timestamp format.</p>\n      ",
                "shape_name": "LastModifiedDate"
              },
              "creationDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date and time the pull request was originally created, in timestamp format.</simpara>\n      ",
                "documentation": "\n        <p>The date and time the pull request was originally created, in timestamp format.</p>\n      ",
                "shape_name": "CreationDate"
              },
              "pullRequestStatus": {
                "type": "string",
                "enum": [
                  "OPEN",
                  "CLOSED"
                ],
                "zonbookDocumentation": "\n        <simpara>The status of the pull request. Pull request status can only change from <code>OPEN</code> to <code>CLOSED</code>.</simpara>\n      ",
                "documentation": "\n        <p>The status of the pull request. Pull request status can only change from <code>OPEN</code> to <code>CLOSED</code>.</p>\n      ",
                "shape_name": "PullRequestStatusEnum"
              },
              "authorArn": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of the user who created the pull request.</simpara>\n      ",
                "documentation": "\n        <p>The Amazon Resource Name (ARN) of the user who created the pull request.</p>\n      ",
                "shape_name": "Arn"
              },
              "pullRequestTargets": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>The targets of the pull request, including the source branch and destination branch for the pull request.</simpara>\n      ",
                "documentation": "\n        <p>The targets of the pull request, including the source branch and destination branch for the pull request.</p>\n      ",
                "shape_name": "PullRequestTargetList",
                "members": {
                  "type": "structure",
                  "members": {
                    "repositoryName": {
                      "type": "string",
                      "pattern": "[\\w\\.-]+",
                      "zonbookDocumentation": "\n        <simpara>The name of the repository that contains the pull request source and destination branches.</simpara>\n      ",
                      "documentation": "\n        <p>The name of the repository that contains the pull request source and destination branches.</p>\n      ",
                      "shape_name": "RepositoryName",
                      "min_length": 1,
                      "max_length": 100
                    },
                    "sourceReference": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The branch of the repository that contains the changes for the pull request. Also known as the source branch.</simpara>\n      ",
                      "documentation": "\n        <p>The branch of the repository that contains the changes for the pull request. Also known as the source branch.</p>\n      ",
                      "shape_name": "ReferenceName"
                    },
                    "destinationReference": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The branch of the repository where the pull request changes will be merged into. Also known as the destination branch. </simpara>\n      ",
                      "documentation": "\n        <p>The branch of the repository where the pull request changes will be merged into. Also known as the destination branch. </p>\n      ",
                      "shape_name": "ReferenceName"
                    },
                    "destinationCommit": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The full commit ID that is the tip of the destination branch. This is the commit where the pull request was or will be merged.</simpara>\n      ",
                      "documentation": "\n        <p>The full commit ID that is the tip of the destination branch. This is the commit where the pull request was or will be merged.</p>\n      ",
                      "shape_name": "CommitId"
                    },
                    "sourceCommit": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The full commit ID of the tip of the source branch used to create the pull request. If the pull request branch is updated by a push \n        while the pull request is open, the commit ID will change to reflect the new tip of the branch.</simpara>\n      ",
                      "documentation": "\n        <p>The full commit ID of the tip of the source branch used to create the pull request. If the pull request branch is updated by a push \n        while the pull request is open, the commit ID will change to reflect the new tip of the branch.</p>\n      ",
                      "shape_name": "CommitId"
                    },
                    "mergeBase": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <para>The commit ID of the most recent commit that the source branch and the destination branch have in common.</para>\n      ",
                      "documentation": "\n        <p>The commit ID of the most recent commit that the source branch and the destination branch have in common.</p>\n      ",
                      "shape_name": "CommitId"
                    },
                    "mergeMetadata": {
                      "type": "structure",
                      "members": {
                        "isMerged": {
                          "type": "boolean",
                          "zonbookDocumentation": "\n        <simpara>A Boolean value indicating whether the merge has been made.</simpara>\n      ",
                          "documentation": "\n        <p>A Boolean value indicating whether the merge has been made.</p>\n      ",
                          "shape_name": "IsMerged"
                        },
                        "mergedBy": {
                          "type": "string",
                          "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of the user who merged the branches.</simpara>\n      ",
                          "documentation": "\n        <p>The Amazon Resource Name (ARN) of the user who merged the branches.</p>\n      ",
                          "shape_name": "Arn"
                        }
                      },
                      "zonbookDocumentation": "\n        <simpara>Returns metadata about the state of the merge, including whether the merge has been made.</simpara>\n      ",
                      "documentation": "\n        <p>Returns metadata about the state of the merge, including whether the merge has been made.</p>\n      ",
                      "shape_name": "MergeMetadata"
                    }
                  },
                  "zonbookDocumentation": "\n        <simpara>Returns information about a pull request target.</simpara>\n      ",
                  "documentation": "\n        <p>Returns information about a pull request target.</p>\n      ",
                  "shape_name": "PullRequestTarget"
                }
              },
              "clientRequestToken": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</simpara>\n      ",
                "documentation": "\n        <p>A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</p>\n      ",
                "shape_name": "ClientRequestToken"
              }
            },
            "zonbookDocumentation": "\n        <simpara>Information about the newly created pull request.</simpara>\n      ",
            "documentation": "\n        <p>Information about the newly created pull request.</p>\n      ",
            "required": true,
            "shape_name": "PullRequest"
          }
        },
        "shape_name": "CreatePullRequestOutput",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A repository name is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A repository name is required but was not specified.</p>\n      ",
          "shape_name": "RepositoryNameRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>At least one specified repository name is not valid.</simpara>\n        <note>\n            <simpara>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</simpara>\n         </note>\n      ",
          "documentation": "\n        <p>At least one specified repository name is not valid.</p>\n        <note>\n            <p>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</p>\n         </note>\n      ",
          "shape_name": "InvalidRepositoryNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified repository does not exist.</simpara>\n      ",
          "documentation": "\n        <p>The specified repository does not exist.</p>\n      ",
          "shape_name": "RepositoryDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption integrity check failed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption integrity check failed.</p>\n      ",
          "shape_name": "EncryptionIntegrityChecksFailedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption key could not be accessed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption key could not be accessed.</p>\n      ",
          "shape_name": "EncryptionKeyAccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is disabled.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is disabled.</p>\n      ",
          "shape_name": "EncryptionKeyDisabledException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>No encryption key was found.</simpara>\n      ",
          "documentation": "\n        <p>No encryption key was found.</p>\n      ",
          "shape_name": "EncryptionKeyNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is not available.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is not available.</p>\n      ",
          "shape_name": "EncryptionKeyUnavailableException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A client request token is required. A client request token is an unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</simpara>\n      ",
          "documentation": "\n        <p>A client request token is required. A client request token is an unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</p>\n      ",
          "shape_name": "ClientRequestTokenRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The client request token is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The client request token is not valid.</p>\n      ",
          "shape_name": "InvalidClientRequestTokenException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The client request token is not valid. Either the token is not in a valid format, or the token has been used in a previous request and cannot be re-used.</simpara>\n      ",
          "documentation": "\n        <p>The client request token is not valid. Either the token is not in a valid format, or the token has been used in a previous request and cannot be re-used.</p>\n      ",
          "shape_name": "IdempotencyParameterMismatchException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>A reference name is required, but none was provided.</para>\n      ",
          "documentation": "\n        <p>A reference name is required, but none was provided.</p>\n      ",
          "shape_name": "ReferenceNameRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The specified reference name format is not valid. Reference names must conform to the Git references format, for example \n            refs/heads/master. For more information, see <ulink url=\"https://git-scm.com/book/en/v2/Git-Internals-Git-References\">Git Internals - Git References</ulink>\n        or consult your Git documentation.</para>\n      ",
          "documentation": "\n        <p>The specified reference name format is not valid. Reference names must conform to the Git references format, for example \n            refs/heads/master. For more information, see <a href=\"https://git-scm.com/book/en/v2/Git-Internals-Git-References\">Git Internals - Git References</a>\n        or consult your Git documentation.</p>\n      ",
          "shape_name": "InvalidReferenceNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The specified reference does not exist. You must provide a full commit ID.</para>\n      ",
          "documentation": "\n        <p>The specified reference does not exist. You must provide a full commit ID.</p>\n      ",
          "shape_name": "ReferenceDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The specified reference is not a supported type. </para>\n      ",
          "documentation": "\n        <p>The specified reference is not a supported type. </p>\n      ",
          "shape_name": "ReferenceTypeNotSupportedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A pull request title is required. It cannot be empty or null.</simpara>\n      ",
          "documentation": "\n        <p>A pull request title is required. It cannot be empty or null.</p>\n      ",
          "shape_name": "TitleRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The title of the pull request is not valid. Pull request titles cannot exceed 100 characters in length.</simpara>\n      ",
          "documentation": "\n        <p>The title of the pull request is not valid. Pull request titles cannot exceed 100 characters in length.</p>\n      ",
          "shape_name": "InvalidTitleException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The pull request description is not valid. Descriptions are limited to 1,000 characters in length.</simpara>\n      ",
          "documentation": "\n        <p>The pull request description is not valid. Descriptions are limited to 1,000 characters in length.</p>\n      ",
          "shape_name": "InvalidDescriptionException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An array of target objects is required. It cannot be empty or null.</simpara>\n      ",
          "documentation": "\n        <p>An array of target objects is required. It cannot be empty or null.</p>\n      ",
          "shape_name": "TargetsRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The targets for the pull request is not valid or not in a valid format. Targets are a list of target objects. Each target object must contain the full values for \n            the repository name, source branch, and destination branch for a pull request.</simpara>\n      ",
          "documentation": "\n        <p>The targets for the pull request is not valid or not in a valid format. Targets are a list of target objects. Each target object must contain the full values for \n            the repository name, source branch, and destination branch for a pull request.</p>\n      ",
          "shape_name": "InvalidTargetsException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A pull request target is required. It cannot be empty or null. A pull request target must contain the full values for the repository name, source branch, and destination branch for the pull request.</simpara>\n      ",
          "documentation": "\n        <p>A pull request target is required. It cannot be empty or null. A pull request target must contain the full values for the repository name, source branch, and destination branch for the pull request.</p>\n      ",
          "shape_name": "TargetRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The target for the pull request is not valid. A target must contain the full values for the repository name, source branch, and destination branch for the pull request.</simpara>\n      ",
          "documentation": "\n        <p>The target for the pull request is not valid. A target must contain the full values for the repository name, source branch, and destination branch for the pull request.</p>\n      ",
          "shape_name": "InvalidTargetException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>You cannot include more than one repository in a pull request. Make sure you have specified only one repository name in your request, and then try again.</simpara>\n      ",
          "documentation": "\n        <p>You cannot include more than one repository in a pull request. Make sure you have specified only one repository name in your request, and then try again.</p>\n      ",
          "shape_name": "MultipleRepositoriesInPullRequestException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>You cannot create the pull request because the repository has too many open pull requests. \n            The maximum number of open pull requests for a repository is 1,000. Close one or more open pull requests, and then try again.</simpara>\n      ",
          "documentation": "\n        <p>You cannot create the pull request because the repository has too many open pull requests. \n            The maximum number of open pull requests for a repository is 1,000. Close one or more open pull requests, and then try again.</p>\n      ",
          "shape_name": "MaximumOpenPullRequestsExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The source branch and the destination branch for the pull request are the same. You must specify different branches for the source and destination.</simpara>\n      ",
          "documentation": "\n        <p>The source branch and the destination branch for the pull request are the same. You must specify different branches for the source and destination.</p>\n      ",
          "shape_name": "SourceAndDestinationAreSameException"
        }
      ],
      "documentation": "\n        <p>Creates a pull request in the specified repository.</p>\n        \n      "
    },
    "GetPullRequest": {
      "name": "GetPullRequest",
      "input": {
        "type": "structure",
        "members": {
          "pullRequestId": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The system-generated ID of the pull request. To get this ID, use <xref linkend=\"ListPullRequests\"/>.</simpara>\n      ",
            "documentation": "\n        <p>The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.</p>\n      ",
            "required": true,
            "shape_name": "PullRequestId"
          }
        },
        "shape_name": "GetPullRequestInput",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "pullRequest": {
            "type": "structure",
            "members": {
              "pullRequestId": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The system-generated ID of the pull request. </simpara>\n      ",
                "documentation": "\n        <p>The system-generated ID of the pull request. </p>\n      ",
                "shape_name": "PullRequestId"
              },
              "title": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The user-defined title of the pull request. This title is displayed in the list of pull requests to other users of the repository.</simpara>\n      ",
                "documentation": "\n        <p>The user-defined title of the pull request. This title is displayed in the list of pull requests to other users of the repository.</p>\n      ",
                "shape_name": "Title",
                "max_length": 150
              },
              "description": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The user-defined description of the pull request. This description can be used to clarify what should be reviewed and other details of the request.</simpara>\n      ",
                "documentation": "\n        <p>The user-defined description of the pull request. This description can be used to clarify what should be reviewed and other details of the request.</p>\n      ",
                "shape_name": "Description",
                "max_length": 10240
              },
              "lastActivityDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The day and time of the last user or system activity on the pull request, in timestamp format.</simpara>\n      ",
                "documentation": "\n        <p>The day and time of the last user or system activity on the pull request, in timestamp format.</p>\n      ",
                "shape_name": "LastModifiedDate"
              },
              "creationDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date and time the pull request was originally created, in timestamp format.</simpara>\n      ",
                "documentation": "\n        <p>The date and time the pull request was originally created, in timestamp format.</p>\n      ",
                "shape_name": "CreationDate"
              },
              "pullRequestStatus": {
                "type": "string",
                "enum": [
                  "OPEN",
                  "CLOSED"
                ],
                "zonbookDocumentation": "\n        <simpara>The status of the pull request. Pull request status can only change from <code>OPEN</code> to <code>CLOSED</code>.</simpara>\n      ",
                "documentation": "\n        <p>The status of the pull request. Pull request status can only change from <code>OPEN</code> to <code>CLOSED</code>.</p>\n      ",
                "shape_name": "PullRequestStatusEnum"
              },
              "authorArn": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of the user who created the pull request.</simpara>\n      ",
                "documentation": "\n        <p>The Amazon Resource Name (ARN) of the user who created the pull request.</p>\n      ",
                "shape_name": "Arn"
              },
              "pullRequestTargets": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>The targets of the pull request, including the source branch and destination branch for the pull request.</simpara>\n      ",
                "documentation": "\n        <p>The targets of the pull request, including the source branch and destination branch for the pull request.</p>\n      ",
                "shape_name": "PullRequestTargetList",
                "members": {
                  "type": "structure",
                  "members": {
                    "repositoryName": {
                      "type": "string",
                      "pattern": "[\\w\\.-]+",
                      "zonbookDocumentation": "\n        <simpara>The name of the repository that contains the pull request source and destination branches.</simpara>\n      ",
                      "documentation": "\n        <p>The name of the repository that contains the pull request source and destination branches.</p>\n      ",
                      "shape_name": "RepositoryName",
                      "min_length": 1,
                      "max_length": 100
                    },
                    "sourceReference": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The branch of the repository that contains the changes for the pull request. Also known as the source branch.</simpara>\n      ",
                      "documentation": "\n        <p>The branch of the repository that contains the changes for the pull request. Also known as the source branch.</p>\n      ",
                      "shape_name": "ReferenceName"
                    },
                    "destinationReference": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The branch of the repository where the pull request changes will be merged into. Also known as the destination branch. </simpara>\n      ",
                      "documentation": "\n        <p>The branch of the repository where the pull request changes will be merged into. Also known as the destination branch. </p>\n      ",
                      "shape_name": "ReferenceName"
                    },
                    "destinationCommit": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The full commit ID that is the tip of the destination branch. This is the commit where the pull request was or will be merged.</simpara>\n      ",
                      "documentation": "\n        <p>The full commit ID that is the tip of the destination branch. This is the commit where the pull request was or will be merged.</p>\n      ",
                      "shape_name": "CommitId"
                    },
                    "sourceCommit": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The full commit ID of the tip of the source branch used to create the pull request. If the pull request branch is updated by a push \n        while the pull request is open, the commit ID will change to reflect the new tip of the branch.</simpara>\n      ",
                      "documentation": "\n        <p>The full commit ID of the tip of the source branch used to create the pull request. If the pull request branch is updated by a push \n        while the pull request is open, the commit ID will change to reflect the new tip of the branch.</p>\n      ",
                      "shape_name": "CommitId"
                    },
                    "mergeBase": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <para>The commit ID of the most recent commit that the source branch and the destination branch have in common.</para>\n      ",
                      "documentation": "\n        <p>The commit ID of the most recent commit that the source branch and the destination branch have in common.</p>\n      ",
                      "shape_name": "CommitId"
                    },
                    "mergeMetadata": {
                      "type": "structure",
                      "members": {
                        "isMerged": {
                          "type": "boolean",
                          "zonbookDocumentation": "\n        <simpara>A Boolean value indicating whether the merge has been made.</simpara>\n      ",
                          "documentation": "\n        <p>A Boolean value indicating whether the merge has been made.</p>\n      ",
                          "shape_name": "IsMerged"
                        },
                        "mergedBy": {
                          "type": "string",
                          "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of the user who merged the branches.</simpara>\n      ",
                          "documentation": "\n        <p>The Amazon Resource Name (ARN) of the user who merged the branches.</p>\n      ",
                          "shape_name": "Arn"
                        }
                      },
                      "zonbookDocumentation": "\n        <simpara>Returns metadata about the state of the merge, including whether the merge has been made.</simpara>\n      ",
                      "documentation": "\n        <p>Returns metadata about the state of the merge, including whether the merge has been made.</p>\n      ",
                      "shape_name": "MergeMetadata"
                    }
                  },
                  "zonbookDocumentation": "\n        <simpara>Returns information about a pull request target.</simpara>\n      ",
                  "documentation": "\n        <p>Returns information about a pull request target.</p>\n      ",
                  "shape_name": "PullRequestTarget"
                }
              },
              "clientRequestToken": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</simpara>\n      ",
                "documentation": "\n        <p>A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</p>\n      ",
                "shape_name": "ClientRequestToken"
              }
            },
            "zonbookDocumentation": "\n        <simpara>Information about the specified pull request.</simpara>\n      ",
            "documentation": "\n        <p>Information about the specified pull request.</p>\n      ",
            "required": true,
            "shape_name": "PullRequest"
          }
        },
        "shape_name": "GetPullRequestOutput",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The pull request ID could not be found. Make sure that you have specified the correct repository name and pull request ID, and then try again.</simpara>\n      ",
          "documentation": "\n        <p>The pull request ID could not be found. Make sure that you have specified the correct repository name and pull request ID, and then try again.</p>\n      ",
          "shape_name": "PullRequestDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The pull request ID is not valid. Make sure that you have provided the full ID and that the pull request is in the specified repository, and then try again.</simpara>\n      ",
          "documentation": "\n        <p>The pull request ID is not valid. Make sure that you have provided the full ID and that the pull request is in the specified repository, and then try again.</p>\n      ",
          "shape_name": "InvalidPullRequestIdException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A pull request ID is required, but none was provided.</simpara>\n      ",
          "documentation": "\n        <p>A pull request ID is required, but none was provided.</p>\n      ",
          "shape_name": "PullRequestIdRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption integrity check failed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption integrity check failed.</p>\n      ",
          "shape_name": "EncryptionIntegrityChecksFailedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption key could not be accessed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption key could not be accessed.</p>\n      ",
          "shape_name": "EncryptionKeyAccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is disabled.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is disabled.</p>\n      ",
          "shape_name": "EncryptionKeyDisabledException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>No encryption key was found.</simpara>\n      ",
          "documentation": "\n        <p>No encryption key was found.</p>\n      ",
          "shape_name": "EncryptionKeyNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is not available.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is not available.</p>\n      ",
          "shape_name": "EncryptionKeyUnavailableException"
        }
      ],
      "documentation": "\n        <p>Gets information about a pull request in a specified repository.</p>\n        \n      "
    },
    "UpdatePullRequestTitle": {
      "name": "UpdatePullRequestTitle",
      "input": {
        "type": "structure",
        "members": {
          "pullRequestId": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The system-generated ID of the pull request. To get this ID, use <xref linkend=\"ListPullRequests\"/>.</simpara>\n      ",
            "documentation": "\n        <p>The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.</p>\n      ",
            "required": true,
            "shape_name": "PullRequestId"
          },
          "title": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The updated title of the pull request. This will replace the existing title.</simpara>\n      ",
            "documentation": "\n        <p>The updated title of the pull request. This will replace the existing title.</p>\n      ",
            "required": true,
            "shape_name": "Title",
            "max_length": 150
          }
        },
        "shape_name": "UpdatePullRequestTitleInput",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "pullRequest": {
            "type": "structure",
            "members": {
              "pullRequestId": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The system-generated ID of the pull request. </simpara>\n      ",
                "documentation": "\n        <p>The system-generated ID of the pull request. </p>\n      ",
                "shape_name": "PullRequestId"
              },
              "title": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The user-defined title of the pull request. This title is displayed in the list of pull requests to other users of the repository.</simpara>\n      ",
                "documentation": "\n        <p>The user-defined title of the pull request. This title is displayed in the list of pull requests to other users of the repository.</p>\n      ",
                "shape_name": "Title",
                "max_length": 150
              },
              "description": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The user-defined description of the pull request. This description can be used to clarify what should be reviewed and other details of the request.</simpara>\n      ",
                "documentation": "\n        <p>The user-defined description of the pull request. This description can be used to clarify what should be reviewed and other details of the request.</p>\n      ",
                "shape_name": "Description",
                "max_length": 10240
              },
              "lastActivityDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The day and time of the last user or system activity on the pull request, in timestamp format.</simpara>\n      ",
                "documentation": "\n        <p>The day and time of the last user or system activity on the pull request, in timestamp format.</p>\n      ",
                "shape_name": "LastModifiedDate"
              },
              "creationDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date and time the pull request was originally created, in timestamp format.</simpara>\n      ",
                "documentation": "\n        <p>The date and time the pull request was originally created, in timestamp format.</p>\n      ",
                "shape_name": "CreationDate"
              },
              "pullRequestStatus": {
                "type": "string",
                "enum": [
                  "OPEN",
                  "CLOSED"
                ],
                "zonbookDocumentation": "\n        <simpara>The status of the pull request. Pull request status can only change from <code>OPEN</code> to <code>CLOSED</code>.</simpara>\n      ",
                "documentation": "\n        <p>The status of the pull request. Pull request status can only change from <code>OPEN</code> to <code>CLOSED</code>.</p>\n      ",
                "shape_name": "PullRequestStatusEnum"
              },
              "authorArn": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of the user who created the pull request.</simpara>\n      ",
                "documentation": "\n        <p>The Amazon Resource Name (ARN) of the user who created the pull request.</p>\n      ",
                "shape_name": "Arn"
              },
              "pullRequestTargets": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>The targets of the pull request, including the source branch and destination branch for the pull request.</simpara>\n      ",
                "documentation": "\n        <p>The targets of the pull request, including the source branch and destination branch for the pull request.</p>\n      ",
                "shape_name": "PullRequestTargetList",
                "members": {
                  "type": "structure",
                  "members": {
                    "repositoryName": {
                      "type": "string",
                      "pattern": "[\\w\\.-]+",
                      "zonbookDocumentation": "\n        <simpara>The name of the repository that contains the pull request source and destination branches.</simpara>\n      ",
                      "documentation": "\n        <p>The name of the repository that contains the pull request source and destination branches.</p>\n      ",
                      "shape_name": "RepositoryName",
                      "min_length": 1,
                      "max_length": 100
                    },
                    "sourceReference": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The branch of the repository that contains the changes for the pull request. Also known as the source branch.</simpara>\n      ",
                      "documentation": "\n        <p>The branch of the repository that contains the changes for the pull request. Also known as the source branch.</p>\n      ",
                      "shape_name": "ReferenceName"
                    },
                    "destinationReference": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The branch of the repository where the pull request changes will be merged into. Also known as the destination branch. </simpara>\n      ",
                      "documentation": "\n        <p>The branch of the repository where the pull request changes will be merged into. Also known as the destination branch. </p>\n      ",
                      "shape_name": "ReferenceName"
                    },
                    "destinationCommit": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The full commit ID that is the tip of the destination branch. This is the commit where the pull request was or will be merged.</simpara>\n      ",
                      "documentation": "\n        <p>The full commit ID that is the tip of the destination branch. This is the commit where the pull request was or will be merged.</p>\n      ",
                      "shape_name": "CommitId"
                    },
                    "sourceCommit": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The full commit ID of the tip of the source branch used to create the pull request. If the pull request branch is updated by a push \n        while the pull request is open, the commit ID will change to reflect the new tip of the branch.</simpara>\n      ",
                      "documentation": "\n        <p>The full commit ID of the tip of the source branch used to create the pull request. If the pull request branch is updated by a push \n        while the pull request is open, the commit ID will change to reflect the new tip of the branch.</p>\n      ",
                      "shape_name": "CommitId"
                    },
                    "mergeBase": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <para>The commit ID of the most recent commit that the source branch and the destination branch have in common.</para>\n      ",
                      "documentation": "\n        <p>The commit ID of the most recent commit that the source branch and the destination branch have in common.</p>\n      ",
                      "shape_name": "CommitId"
                    },
                    "mergeMetadata": {
                      "type": "structure",
                      "members": {
                        "isMerged": {
                          "type": "boolean",
                          "zonbookDocumentation": "\n        <simpara>A Boolean value indicating whether the merge has been made.</simpara>\n      ",
                          "documentation": "\n        <p>A Boolean value indicating whether the merge has been made.</p>\n      ",
                          "shape_name": "IsMerged"
                        },
                        "mergedBy": {
                          "type": "string",
                          "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of the user who merged the branches.</simpara>\n      ",
                          "documentation": "\n        <p>The Amazon Resource Name (ARN) of the user who merged the branches.</p>\n      ",
                          "shape_name": "Arn"
                        }
                      },
                      "zonbookDocumentation": "\n        <simpara>Returns metadata about the state of the merge, including whether the merge has been made.</simpara>\n      ",
                      "documentation": "\n        <p>Returns metadata about the state of the merge, including whether the merge has been made.</p>\n      ",
                      "shape_name": "MergeMetadata"
                    }
                  },
                  "zonbookDocumentation": "\n        <simpara>Returns information about a pull request target.</simpara>\n      ",
                  "documentation": "\n        <p>Returns information about a pull request target.</p>\n      ",
                  "shape_name": "PullRequestTarget"
                }
              },
              "clientRequestToken": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</simpara>\n      ",
                "documentation": "\n        <p>A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</p>\n      ",
                "shape_name": "ClientRequestToken"
              }
            },
            "zonbookDocumentation": "\n        <simpara>Information about the updated pull request.</simpara>\n      ",
            "documentation": "\n        <p>Information about the updated pull request.</p>\n      ",
            "required": true,
            "shape_name": "PullRequest"
          }
        },
        "shape_name": "UpdatePullRequestTitleOutput",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The pull request ID could not be found. Make sure that you have specified the correct repository name and pull request ID, and then try again.</simpara>\n      ",
          "documentation": "\n        <p>The pull request ID could not be found. Make sure that you have specified the correct repository name and pull request ID, and then try again.</p>\n      ",
          "shape_name": "PullRequestDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The pull request ID is not valid. Make sure that you have provided the full ID and that the pull request is in the specified repository, and then try again.</simpara>\n      ",
          "documentation": "\n        <p>The pull request ID is not valid. Make sure that you have provided the full ID and that the pull request is in the specified repository, and then try again.</p>\n      ",
          "shape_name": "InvalidPullRequestIdException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A pull request ID is required, but none was provided.</simpara>\n      ",
          "documentation": "\n        <p>A pull request ID is required, but none was provided.</p>\n      ",
          "shape_name": "PullRequestIdRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A pull request title is required. It cannot be empty or null.</simpara>\n      ",
          "documentation": "\n        <p>A pull request title is required. It cannot be empty or null.</p>\n      ",
          "shape_name": "TitleRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The title of the pull request is not valid. Pull request titles cannot exceed 100 characters in length.</simpara>\n      ",
          "documentation": "\n        <p>The title of the pull request is not valid. Pull request titles cannot exceed 100 characters in length.</p>\n      ",
          "shape_name": "InvalidTitleException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The pull request status cannot be updated because it is already closed.</para>\n      ",
          "documentation": "\n        <p>The pull request status cannot be updated because it is already closed.</p>\n      ",
          "shape_name": "PullRequestAlreadyClosedException"
        }
      ],
      "documentation": "\n        <p>Replaces the title of a pull request.</p>\n        \n      "
    },
    "UpdatePullRequestDescription": {
      "name": "UpdatePullRequestDescription",
      "input": {
        "type": "structure",
        "members": {
          "pullRequestId": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The system-generated ID of the pull request. To get this ID, use <xref linkend=\"ListPullRequests\"/>.</simpara>\n      ",
            "documentation": "\n        <p>The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.</p>\n      ",
            "required": true,
            "shape_name": "PullRequestId"
          },
          "description": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The updated content of the description for the pull request. This content will replace the existing description.</simpara>\n      ",
            "documentation": "\n        <p>The updated content of the description for the pull request. This content will replace the existing description.</p>\n      ",
            "required": true,
            "shape_name": "Description",
            "max_length": 10240
          }
        },
        "shape_name": "UpdatePullRequestDescriptionInput",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "pullRequest": {
            "type": "structure",
            "members": {
              "pullRequestId": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The system-generated ID of the pull request. </simpara>\n      ",
                "documentation": "\n        <p>The system-generated ID of the pull request. </p>\n      ",
                "shape_name": "PullRequestId"
              },
              "title": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The user-defined title of the pull request. This title is displayed in the list of pull requests to other users of the repository.</simpara>\n      ",
                "documentation": "\n        <p>The user-defined title of the pull request. This title is displayed in the list of pull requests to other users of the repository.</p>\n      ",
                "shape_name": "Title",
                "max_length": 150
              },
              "description": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The user-defined description of the pull request. This description can be used to clarify what should be reviewed and other details of the request.</simpara>\n      ",
                "documentation": "\n        <p>The user-defined description of the pull request. This description can be used to clarify what should be reviewed and other details of the request.</p>\n      ",
                "shape_name": "Description",
                "max_length": 10240
              },
              "lastActivityDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The day and time of the last user or system activity on the pull request, in timestamp format.</simpara>\n      ",
                "documentation": "\n        <p>The day and time of the last user or system activity on the pull request, in timestamp format.</p>\n      ",
                "shape_name": "LastModifiedDate"
              },
              "creationDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date and time the pull request was originally created, in timestamp format.</simpara>\n      ",
                "documentation": "\n        <p>The date and time the pull request was originally created, in timestamp format.</p>\n      ",
                "shape_name": "CreationDate"
              },
              "pullRequestStatus": {
                "type": "string",
                "enum": [
                  "OPEN",
                  "CLOSED"
                ],
                "zonbookDocumentation": "\n        <simpara>The status of the pull request. Pull request status can only change from <code>OPEN</code> to <code>CLOSED</code>.</simpara>\n      ",
                "documentation": "\n        <p>The status of the pull request. Pull request status can only change from <code>OPEN</code> to <code>CLOSED</code>.</p>\n      ",
                "shape_name": "PullRequestStatusEnum"
              },
              "authorArn": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of the user who created the pull request.</simpara>\n      ",
                "documentation": "\n        <p>The Amazon Resource Name (ARN) of the user who created the pull request.</p>\n      ",
                "shape_name": "Arn"
              },
              "pullRequestTargets": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>The targets of the pull request, including the source branch and destination branch for the pull request.</simpara>\n      ",
                "documentation": "\n        <p>The targets of the pull request, including the source branch and destination branch for the pull request.</p>\n      ",
                "shape_name": "PullRequestTargetList",
                "members": {
                  "type": "structure",
                  "members": {
                    "repositoryName": {
                      "type": "string",
                      "pattern": "[\\w\\.-]+",
                      "zonbookDocumentation": "\n        <simpara>The name of the repository that contains the pull request source and destination branches.</simpara>\n      ",
                      "documentation": "\n        <p>The name of the repository that contains the pull request source and destination branches.</p>\n      ",
                      "shape_name": "RepositoryName",
                      "min_length": 1,
                      "max_length": 100
                    },
                    "sourceReference": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The branch of the repository that contains the changes for the pull request. Also known as the source branch.</simpara>\n      ",
                      "documentation": "\n        <p>The branch of the repository that contains the changes for the pull request. Also known as the source branch.</p>\n      ",
                      "shape_name": "ReferenceName"
                    },
                    "destinationReference": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The branch of the repository where the pull request changes will be merged into. Also known as the destination branch. </simpara>\n      ",
                      "documentation": "\n        <p>The branch of the repository where the pull request changes will be merged into. Also known as the destination branch. </p>\n      ",
                      "shape_name": "ReferenceName"
                    },
                    "destinationCommit": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The full commit ID that is the tip of the destination branch. This is the commit where the pull request was or will be merged.</simpara>\n      ",
                      "documentation": "\n        <p>The full commit ID that is the tip of the destination branch. This is the commit where the pull request was or will be merged.</p>\n      ",
                      "shape_name": "CommitId"
                    },
                    "sourceCommit": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The full commit ID of the tip of the source branch used to create the pull request. If the pull request branch is updated by a push \n        while the pull request is open, the commit ID will change to reflect the new tip of the branch.</simpara>\n      ",
                      "documentation": "\n        <p>The full commit ID of the tip of the source branch used to create the pull request. If the pull request branch is updated by a push \n        while the pull request is open, the commit ID will change to reflect the new tip of the branch.</p>\n      ",
                      "shape_name": "CommitId"
                    },
                    "mergeBase": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <para>The commit ID of the most recent commit that the source branch and the destination branch have in common.</para>\n      ",
                      "documentation": "\n        <p>The commit ID of the most recent commit that the source branch and the destination branch have in common.</p>\n      ",
                      "shape_name": "CommitId"
                    },
                    "mergeMetadata": {
                      "type": "structure",
                      "members": {
                        "isMerged": {
                          "type": "boolean",
                          "zonbookDocumentation": "\n        <simpara>A Boolean value indicating whether the merge has been made.</simpara>\n      ",
                          "documentation": "\n        <p>A Boolean value indicating whether the merge has been made.</p>\n      ",
                          "shape_name": "IsMerged"
                        },
                        "mergedBy": {
                          "type": "string",
                          "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of the user who merged the branches.</simpara>\n      ",
                          "documentation": "\n        <p>The Amazon Resource Name (ARN) of the user who merged the branches.</p>\n      ",
                          "shape_name": "Arn"
                        }
                      },
                      "zonbookDocumentation": "\n        <simpara>Returns metadata about the state of the merge, including whether the merge has been made.</simpara>\n      ",
                      "documentation": "\n        <p>Returns metadata about the state of the merge, including whether the merge has been made.</p>\n      ",
                      "shape_name": "MergeMetadata"
                    }
                  },
                  "zonbookDocumentation": "\n        <simpara>Returns information about a pull request target.</simpara>\n      ",
                  "documentation": "\n        <p>Returns information about a pull request target.</p>\n      ",
                  "shape_name": "PullRequestTarget"
                }
              },
              "clientRequestToken": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</simpara>\n      ",
                "documentation": "\n        <p>A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</p>\n      ",
                "shape_name": "ClientRequestToken"
              }
            },
            "zonbookDocumentation": "\n        <simpara>Information about the updated pull request.</simpara>\n      ",
            "documentation": "\n        <p>Information about the updated pull request.</p>\n      ",
            "required": true,
            "shape_name": "PullRequest"
          }
        },
        "shape_name": "UpdatePullRequestDescriptionOutput",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The pull request ID could not be found. Make sure that you have specified the correct repository name and pull request ID, and then try again.</simpara>\n      ",
          "documentation": "\n        <p>The pull request ID could not be found. Make sure that you have specified the correct repository name and pull request ID, and then try again.</p>\n      ",
          "shape_name": "PullRequestDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The pull request ID is not valid. Make sure that you have provided the full ID and that the pull request is in the specified repository, and then try again.</simpara>\n      ",
          "documentation": "\n        <p>The pull request ID is not valid. Make sure that you have provided the full ID and that the pull request is in the specified repository, and then try again.</p>\n      ",
          "shape_name": "InvalidPullRequestIdException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A pull request ID is required, but none was provided.</simpara>\n      ",
          "documentation": "\n        <p>A pull request ID is required, but none was provided.</p>\n      ",
          "shape_name": "PullRequestIdRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The pull request description is not valid. Descriptions are limited to 1,000 characters in length.</simpara>\n      ",
          "documentation": "\n        <p>The pull request description is not valid. Descriptions are limited to 1,000 characters in length.</p>\n      ",
          "shape_name": "InvalidDescriptionException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The pull request status cannot be updated because it is already closed.</para>\n      ",
          "documentation": "\n        <p>The pull request status cannot be updated because it is already closed.</p>\n      ",
          "shape_name": "PullRequestAlreadyClosedException"
        }
      ],
      "documentation": "\n        <p>Replaces the contents of the description of a pull request.</p>\n        \n      "
    },
    "UpdatePullRequestStatus": {
      "name": "UpdatePullRequestStatus",
      "input": {
        "type": "structure",
        "members": {
          "pullRequestId": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>The system-generated ID of the pull request. To get this ID, use <xref linkend=\"ListPullRequests\"/>.</para>\n      ",
            "documentation": "\n        <p>The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.</p>\n      ",
            "required": true,
            "shape_name": "PullRequestId"
          },
          "pullRequestStatus": {
            "type": "string",
            "enum": [
              "OPEN",
              "CLOSED"
            ],
            "zonbookDocumentation": "\n        <para>The status of the pull request. The only valid operations are to update the status \n            from <code>OPEN</code> to <code>OPEN</code>, <code>OPEN</code> to <code>CLOSED</code>\n            or from from <code>CLOSED</code> to <code>CLOSED</code>.</para>\n      ",
            "documentation": "\n        <p>The status of the pull request. The only valid operations are to update the status \n            from <code>OPEN</code> to <code>OPEN</code>, <code>OPEN</code> to <code>CLOSED</code>\n            or from from <code>CLOSED</code> to <code>CLOSED</code>.</p>\n      ",
            "required": true,
            "shape_name": "PullRequestStatusEnum"
          }
        },
        "shape_name": "UpdatePullRequestStatusInput",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "pullRequest": {
            "type": "structure",
            "members": {
              "pullRequestId": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The system-generated ID of the pull request. </simpara>\n      ",
                "documentation": "\n        <p>The system-generated ID of the pull request. </p>\n      ",
                "shape_name": "PullRequestId"
              },
              "title": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The user-defined title of the pull request. This title is displayed in the list of pull requests to other users of the repository.</simpara>\n      ",
                "documentation": "\n        <p>The user-defined title of the pull request. This title is displayed in the list of pull requests to other users of the repository.</p>\n      ",
                "shape_name": "Title",
                "max_length": 150
              },
              "description": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The user-defined description of the pull request. This description can be used to clarify what should be reviewed and other details of the request.</simpara>\n      ",
                "documentation": "\n        <p>The user-defined description of the pull request. This description can be used to clarify what should be reviewed and other details of the request.</p>\n      ",
                "shape_name": "Description",
                "max_length": 10240
              },
              "lastActivityDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The day and time of the last user or system activity on the pull request, in timestamp format.</simpara>\n      ",
                "documentation": "\n        <p>The day and time of the last user or system activity on the pull request, in timestamp format.</p>\n      ",
                "shape_name": "LastModifiedDate"
              },
              "creationDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date and time the pull request was originally created, in timestamp format.</simpara>\n      ",
                "documentation": "\n        <p>The date and time the pull request was originally created, in timestamp format.</p>\n      ",
                "shape_name": "CreationDate"
              },
              "pullRequestStatus": {
                "type": "string",
                "enum": [
                  "OPEN",
                  "CLOSED"
                ],
                "zonbookDocumentation": "\n        <simpara>The status of the pull request. Pull request status can only change from <code>OPEN</code> to <code>CLOSED</code>.</simpara>\n      ",
                "documentation": "\n        <p>The status of the pull request. Pull request status can only change from <code>OPEN</code> to <code>CLOSED</code>.</p>\n      ",
                "shape_name": "PullRequestStatusEnum"
              },
              "authorArn": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of the user who created the pull request.</simpara>\n      ",
                "documentation": "\n        <p>The Amazon Resource Name (ARN) of the user who created the pull request.</p>\n      ",
                "shape_name": "Arn"
              },
              "pullRequestTargets": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>The targets of the pull request, including the source branch and destination branch for the pull request.</simpara>\n      ",
                "documentation": "\n        <p>The targets of the pull request, including the source branch and destination branch for the pull request.</p>\n      ",
                "shape_name": "PullRequestTargetList",
                "members": {
                  "type": "structure",
                  "members": {
                    "repositoryName": {
                      "type": "string",
                      "pattern": "[\\w\\.-]+",
                      "zonbookDocumentation": "\n        <simpara>The name of the repository that contains the pull request source and destination branches.</simpara>\n      ",
                      "documentation": "\n        <p>The name of the repository that contains the pull request source and destination branches.</p>\n      ",
                      "shape_name": "RepositoryName",
                      "min_length": 1,
                      "max_length": 100
                    },
                    "sourceReference": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The branch of the repository that contains the changes for the pull request. Also known as the source branch.</simpara>\n      ",
                      "documentation": "\n        <p>The branch of the repository that contains the changes for the pull request. Also known as the source branch.</p>\n      ",
                      "shape_name": "ReferenceName"
                    },
                    "destinationReference": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The branch of the repository where the pull request changes will be merged into. Also known as the destination branch. </simpara>\n      ",
                      "documentation": "\n        <p>The branch of the repository where the pull request changes will be merged into. Also known as the destination branch. </p>\n      ",
                      "shape_name": "ReferenceName"
                    },
                    "destinationCommit": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The full commit ID that is the tip of the destination branch. This is the commit where the pull request was or will be merged.</simpara>\n      ",
                      "documentation": "\n        <p>The full commit ID that is the tip of the destination branch. This is the commit where the pull request was or will be merged.</p>\n      ",
                      "shape_name": "CommitId"
                    },
                    "sourceCommit": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The full commit ID of the tip of the source branch used to create the pull request. If the pull request branch is updated by a push \n        while the pull request is open, the commit ID will change to reflect the new tip of the branch.</simpara>\n      ",
                      "documentation": "\n        <p>The full commit ID of the tip of the source branch used to create the pull request. If the pull request branch is updated by a push \n        while the pull request is open, the commit ID will change to reflect the new tip of the branch.</p>\n      ",
                      "shape_name": "CommitId"
                    },
                    "mergeBase": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <para>The commit ID of the most recent commit that the source branch and the destination branch have in common.</para>\n      ",
                      "documentation": "\n        <p>The commit ID of the most recent commit that the source branch and the destination branch have in common.</p>\n      ",
                      "shape_name": "CommitId"
                    },
                    "mergeMetadata": {
                      "type": "structure",
                      "members": {
                        "isMerged": {
                          "type": "boolean",
                          "zonbookDocumentation": "\n        <simpara>A Boolean value indicating whether the merge has been made.</simpara>\n      ",
                          "documentation": "\n        <p>A Boolean value indicating whether the merge has been made.</p>\n      ",
                          "shape_name": "IsMerged"
                        },
                        "mergedBy": {
                          "type": "string",
                          "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of the user who merged the branches.</simpara>\n      ",
                          "documentation": "\n        <p>The Amazon Resource Name (ARN) of the user who merged the branches.</p>\n      ",
                          "shape_name": "Arn"
                        }
                      },
                      "zonbookDocumentation": "\n        <simpara>Returns metadata about the state of the merge, including whether the merge has been made.</simpara>\n      ",
                      "documentation": "\n        <p>Returns metadata about the state of the merge, including whether the merge has been made.</p>\n      ",
                      "shape_name": "MergeMetadata"
                    }
                  },
                  "zonbookDocumentation": "\n        <simpara>Returns information about a pull request target.</simpara>\n      ",
                  "documentation": "\n        <p>Returns information about a pull request target.</p>\n      ",
                  "shape_name": "PullRequestTarget"
                }
              },
              "clientRequestToken": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</simpara>\n      ",
                "documentation": "\n        <p>A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</p>\n      ",
                "shape_name": "ClientRequestToken"
              }
            },
            "zonbookDocumentation": "\n        <para>Information about the pull request.</para>\n      ",
            "documentation": "\n        <p>Information about the pull request.</p>\n      ",
            "required": true,
            "shape_name": "PullRequest"
          }
        },
        "shape_name": "UpdatePullRequestStatusOutput",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The pull request ID could not be found. Make sure that you have specified the correct repository name and pull request ID, and then try again.</simpara>\n      ",
          "documentation": "\n        <p>The pull request ID could not be found. Make sure that you have specified the correct repository name and pull request ID, and then try again.</p>\n      ",
          "shape_name": "PullRequestDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The pull request ID is not valid. Make sure that you have provided the full ID and that the pull request is in the specified repository, and then try again.</simpara>\n      ",
          "documentation": "\n        <p>The pull request ID is not valid. Make sure that you have provided the full ID and that the pull request is in the specified repository, and then try again.</p>\n      ",
          "shape_name": "InvalidPullRequestIdException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A pull request ID is required, but none was provided.</simpara>\n      ",
          "documentation": "\n        <p>A pull request ID is required, but none was provided.</p>\n      ",
          "shape_name": "PullRequestIdRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The pull request status update is not valid. The only valid update is from <code>OPEN</code> to <code>CLOSED</code>.</para>\n      ",
          "documentation": "\n        <p>The pull request status update is not valid. The only valid update is from <code>OPEN</code> to <code>CLOSED</code>.</p>\n      ",
          "shape_name": "InvalidPullRequestStatusUpdateException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The pull request status is not valid. The only valid values are <code>OPEN</code> and <code>CLOSED</code>.</simpara>\n      ",
          "documentation": "\n        <p>The pull request status is not valid. The only valid values are <code>OPEN</code> and <code>CLOSED</code>.</p>\n      ",
          "shape_name": "InvalidPullRequestStatusException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>A pull request status is required, but none was provided.</para>\n      ",
          "documentation": "\n        <p>A pull request status is required, but none was provided.</p>\n      ",
          "shape_name": "PullRequestStatusRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption integrity check failed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption integrity check failed.</p>\n      ",
          "shape_name": "EncryptionIntegrityChecksFailedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption key could not be accessed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption key could not be accessed.</p>\n      ",
          "shape_name": "EncryptionKeyAccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is disabled.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is disabled.</p>\n      ",
          "shape_name": "EncryptionKeyDisabledException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>No encryption key was found.</simpara>\n      ",
          "documentation": "\n        <p>No encryption key was found.</p>\n      ",
          "shape_name": "EncryptionKeyNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is not available.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is not available.</p>\n      ",
          "shape_name": "EncryptionKeyUnavailableException"
        }
      ],
      "documentation": "\n        <p>Updates the status of a pull request. </p>\n        \n      "
    },
    "ListPullRequests": {
      "name": "ListPullRequests",
      "input": {
        "type": "structure",
        "members": {
          "repositoryName": {
            "type": "string",
            "pattern": "[\\w\\.-]+",
            "zonbookDocumentation": "\n        <simpara>The name of the repository for which you want to list pull requests.</simpara>\n      ",
            "documentation": "\n        <p>The name of the repository for which you want to list pull requests.</p>\n      ",
            "required": true,
            "shape_name": "RepositoryName",
            "min_length": 1,
            "max_length": 100
          },
          "authorArn": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>Optional. The Amazon Resource Name (ARN) of the user who created the pull request. If used, this filters the results \n        to pull requests created by that user.</simpara>\n      ",
            "documentation": "\n        <p>Optional. The Amazon Resource Name (ARN) of the user who created the pull request. If used, this filters the results \n        to pull requests created by that user.</p>\n      ",
            "shape_name": "Arn"
          },
          "pullRequestStatus": {
            "type": "string",
            "enum": [
              "OPEN",
              "CLOSED"
            ],
            "zonbookDocumentation": "\n        <simpara>Optional. The status of the pull request. If used, this refines the results to the pull requests that match the specified status.</simpara>\n      ",
            "documentation": "\n        <p>Optional. The status of the pull request. If used, this refines the results to the pull requests that match the specified status.</p>\n      ",
            "shape_name": "PullRequestStatusEnum"
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>An enumeration token that when provided in a request, returns the next batch of the results.</simpara>\n      ",
            "documentation": "\n        <p>An enumeration token that when provided in a request, returns the next batch of the results.</p>\n      ",
            "paginationToken": true,
            "shape_name": "NextToken"
          },
          "maxResults": {
            "type": "integer",
            "zonbookDocumentation": "\n        <simpara>A non-negative integer used to limit the number of returned results.</simpara>\n      ",
            "documentation": "\n        <p>A non-negative integer used to limit the number of returned results.</p>\n      ",
            "pageSize": true,
            "shape_name": "MaxResults"
          }
        },
        "shape_name": "ListPullRequestsInput",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "pullRequestIds": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The system-generated IDs of the pull requests.</simpara>\n      ",
            "documentation": "\n        <p>The system-generated IDs of the pull requests.</p>\n      ",
            "required": true,
            "shape_name": "PullRequestIdList",
            "members": {
              "type": "string",
              "shape_name": "PullRequestId",
              "documentation": null
            }
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>An enumeration token that when provided in a request, returns the next batch of the results.</simpara>\n      ",
            "documentation": "\n        <p>An enumeration token that when provided in a request, returns the next batch of the results.</p>\n      ",
            "paginationToken": true,
            "shape_name": "NextToken"
          }
        },
        "shape_name": "ListPullRequestsOutput",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The pull request status is not valid. The only valid values are <code>OPEN</code> and <code>CLOSED</code>.</simpara>\n      ",
          "documentation": "\n        <p>The pull request status is not valid. The only valid values are <code>OPEN</code> and <code>CLOSED</code>.</p>\n      ",
          "shape_name": "InvalidPullRequestStatusException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) is not valid. Make sure that you have provided the full ARN for the author of the pull request, and then try again.</simpara>\n      ",
          "documentation": "\n        <p>The Amazon Resource Name (ARN) is not valid. Make sure that you have provided the full ARN for the author of the pull request, and then try again.</p>\n      ",
          "shape_name": "InvalidAuthorArnException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The specified Amazon Resource Name (ARN) does not exist in the AWS account.</para>\n      ",
          "documentation": "\n        <p>The specified Amazon Resource Name (ARN) does not exist in the AWS account.</p>\n      ",
          "shape_name": "AuthorDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A repository name is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A repository name is required but was not specified.</p>\n      ",
          "shape_name": "RepositoryNameRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>At least one specified repository name is not valid.</simpara>\n        <note>\n            <simpara>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</simpara>\n         </note>\n      ",
          "documentation": "\n        <p>At least one specified repository name is not valid.</p>\n        <note>\n            <p>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</p>\n         </note>\n      ",
          "shape_name": "InvalidRepositoryNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified repository does not exist.</simpara>\n      ",
          "documentation": "\n        <p>The specified repository does not exist.</p>\n      ",
          "shape_name": "RepositoryDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified number of maximum results is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified number of maximum results is not valid.</p>\n      ",
          "shape_name": "InvalidMaxResultsException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified continuation token is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified continuation token is not valid.</p>\n      ",
          "shape_name": "InvalidContinuationTokenException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption integrity check failed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption integrity check failed.</p>\n      ",
          "shape_name": "EncryptionIntegrityChecksFailedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption key could not be accessed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption key could not be accessed.</p>\n      ",
          "shape_name": "EncryptionKeyAccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is disabled.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is disabled.</p>\n      ",
          "shape_name": "EncryptionKeyDisabledException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>No encryption key was found.</simpara>\n      ",
          "documentation": "\n        <p>No encryption key was found.</p>\n      ",
          "shape_name": "EncryptionKeyNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is not available.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is not available.</p>\n      ",
          "shape_name": "EncryptionKeyUnavailableException"
        }
      ],
      "documentation": "\n        <p>Returns a list of pull requests for a specified repository. The return list can be refined by pull request \n        status or pull request author ARN.</p>\n        \n      "
    },
    "DescribePullRequestEvents": {
      "name": "DescribePullRequestEvents",
      "input": {
        "type": "structure",
        "members": {
          "pullRequestId": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>The system-generated ID of the pull request. To get this ID, use <xref linkend=\"ListPullRequests\"/>.</para>\n      ",
            "documentation": "\n        <p>The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.</p>\n      ",
            "required": true,
            "shape_name": "PullRequestId"
          },
          "pullRequestEventType": {
            "type": "string",
            "enum": [
              "PULL_REQUEST_CREATED",
              "PULL_REQUEST_STATUS_CHANGED",
              "PULL_REQUEST_SOURCE_REFERENCE_UPDATED",
              "PULL_REQUEST_MERGE_STATE_CHANGED"
            ],
            "zonbookDocumentation": "\n        <para>Optional. The pull request event type about which you want to return information.</para>\n      ",
            "documentation": "\n        <p>Optional. The pull request event type about which you want to return information.</p>\n      ",
            "shape_name": "PullRequestEventType"
          },
          "actorArn": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>The Amazon Resource Name (ARN) of the user whose actions resulted in the event. Examples include \n        updating the pull request with additional commits or changing the status of a pull request.</para>\n      ",
            "documentation": "\n        <p>The Amazon Resource Name (ARN) of the user whose actions resulted in the event. Examples include \n        updating the pull request with additional commits or changing the status of a pull request.</p>\n      ",
            "shape_name": "Arn"
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>An enumeration token that when provided in a request, returns the next batch of the results.</para>\n      ",
            "documentation": "\n        <p>An enumeration token that when provided in a request, returns the next batch of the results.</p>\n      ",
            "paginationToken": true,
            "shape_name": "NextToken"
          },
          "maxResults": {
            "type": "integer",
            "zonbookDocumentation": "\n        <para>A non-negative integer used to limit the number of returned results. \n            The default is 100 events, which is also the maximum number of events that can be returned in a result.</para>\n      ",
            "documentation": "\n        <p>A non-negative integer used to limit the number of returned results. \n            The default is 100 events, which is also the maximum number of events that can be returned in a result.</p>\n      ",
            "pageSize": true,
            "shape_name": "MaxResults"
          }
        },
        "shape_name": "DescribePullRequestEventsInput",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "pullRequestEvents": {
            "type": "list",
            "zonbookDocumentation": "\n        <para>Information about the pull request events.</para>\n      ",
            "documentation": "\n        <p>Information about the pull request events.</p>\n      ",
            "required": true,
            "shape_name": "PullRequestEventList",
            "members": {
              "type": "structure",
              "members": {
                "pullRequestId": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <para>The system-generated ID of the pull request.</para>\n      ",
                  "documentation": "\n        <p>The system-generated ID of the pull request.</p>\n      ",
                  "shape_name": "PullRequestId"
                },
                "eventDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n        <para>The day and time of the pull request event, in timestamp format.</para>\n      ",
                  "documentation": "\n        <p>The day and time of the pull request event, in timestamp format.</p>\n      ",
                  "shape_name": "EventDate"
                },
                "pullRequestEventType": {
                  "type": "string",
                  "enum": [
                    "PULL_REQUEST_CREATED",
                    "PULL_REQUEST_STATUS_CHANGED",
                    "PULL_REQUEST_SOURCE_REFERENCE_UPDATED",
                    "PULL_REQUEST_MERGE_STATE_CHANGED"
                  ],
                  "zonbookDocumentation": "\n        <para>The type of the pull request event, for example a status change event (PULL_REQUEST_STATUS_CHANGED) or update event (PULL_REQUEST_SOURCE_REFERENCE_UPDATED).</para>\n      ",
                  "documentation": "\n        <p>The type of the pull request event, for example a status change event (PULL_REQUEST_STATUS_CHANGED) or update event (PULL_REQUEST_SOURCE_REFERENCE_UPDATED).</p>\n      ",
                  "shape_name": "PullRequestEventType"
                },
                "actorArn": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <para>The Amazon Resource Name (ARN) of the user whose actions resulted in the event. Examples include \n            updating the pull request with additional commits or changing the status of a pull request.</para>\n      ",
                  "documentation": "\n        <p>The Amazon Resource Name (ARN) of the user whose actions resulted in the event. Examples include \n            updating the pull request with additional commits or changing the status of a pull request.</p>\n      ",
                  "shape_name": "Arn"
                },
                "pullRequestCreatedEventMetadata": {
                  "type": "structure",
                  "members": {
                    "repositoryName": {
                      "type": "string",
                      "pattern": "[\\w\\.-]+",
                      "zonbookDocumentation": "\n        <para>The name of the repository where the pull request was created.</para>\n      ",
                      "documentation": "\n        <p>The name of the repository where the pull request was created.</p>\n      ",
                      "shape_name": "RepositoryName",
                      "min_length": 1,
                      "max_length": 100
                    },
                    "sourceCommitId": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <para>The commit ID on the source branch used when the pull request was created.</para>\n      ",
                      "documentation": "\n        <p>The commit ID on the source branch used when the pull request was created.</p>\n      ",
                      "shape_name": "CommitId"
                    },
                    "destinationCommitId": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <para>The commit ID of the tip of the branch specified as the destination branch when the pull request was created.</para>\n      ",
                      "documentation": "\n        <p>The commit ID of the tip of the branch specified as the destination branch when the pull request was created.</p>\n      ",
                      "shape_name": "CommitId"
                    },
                    "mergeBase": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <para>The commit ID of the most recent commit that the source branch and the destination branch have in common.</para>\n      ",
                      "documentation": "\n        <p>The commit ID of the most recent commit that the source branch and the destination branch have in common.</p>\n      ",
                      "shape_name": "CommitId"
                    }
                  },
                  "zonbookDocumentation": "\n        <para>Information about the source and destination branches for the pull request.</para>\n      ",
                  "documentation": "\n        <p>Information about the source and destination branches for the pull request.</p>\n      ",
                  "shape_name": "PullRequestCreatedEventMetadata"
                },
                "pullRequestStatusChangedEventMetadata": {
                  "type": "structure",
                  "members": {
                    "pullRequestStatus": {
                      "type": "string",
                      "enum": [
                        "OPEN",
                        "CLOSED"
                      ],
                      "zonbookDocumentation": "\n        <para>The changed status of the pull request.</para>\n      ",
                      "documentation": "\n        <p>The changed status of the pull request.</p>\n      ",
                      "shape_name": "PullRequestStatusEnum"
                    }
                  },
                  "zonbookDocumentation": "\n        <para>Information about the change in status for the pull request event.</para>\n      ",
                  "documentation": "\n        <p>Information about the change in status for the pull request event.</p>\n      ",
                  "shape_name": "PullRequestStatusChangedEventMetadata"
                },
                "pullRequestSourceReferenceUpdatedEventMetadata": {
                  "type": "structure",
                  "members": {
                    "repositoryName": {
                      "type": "string",
                      "pattern": "[\\w\\.-]+",
                      "zonbookDocumentation": "\n        <para>The name of the repository where the pull request was updated.</para>\n      ",
                      "documentation": "\n        <p>The name of the repository where the pull request was updated.</p>\n      ",
                      "shape_name": "RepositoryName",
                      "min_length": 1,
                      "max_length": 100
                    },
                    "beforeCommitId": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <para>The full commit ID of the commit in the destination branch that was the tip of the branch at the time the pull request was updated.</para>\n      ",
                      "documentation": "\n        <p>The full commit ID of the commit in the destination branch that was the tip of the branch at the time the pull request was updated.</p>\n      ",
                      "shape_name": "CommitId"
                    },
                    "afterCommitId": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <para>The full commit ID of the commit in the source branch that was the tip of the branch at the time the pull request was updated.</para>\n      ",
                      "documentation": "\n        <p>The full commit ID of the commit in the source branch that was the tip of the branch at the time the pull request was updated.</p>\n      ",
                      "shape_name": "CommitId"
                    },
                    "mergeBase": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <para>The commit ID of the most recent commit that the source branch and the destination branch have in common.</para>\n      ",
                      "documentation": "\n        <p>The commit ID of the most recent commit that the source branch and the destination branch have in common.</p>\n      ",
                      "shape_name": "CommitId"
                    }
                  },
                  "zonbookDocumentation": "\n        <para>Information about the updated source branch for the pull request event. </para>\n      ",
                  "documentation": "\n        <p>Information about the updated source branch for the pull request event. </p>\n      ",
                  "shape_name": "PullRequestSourceReferenceUpdatedEventMetadata"
                },
                "pullRequestMergedStateChangedEventMetadata": {
                  "type": "structure",
                  "members": {
                    "repositoryName": {
                      "type": "string",
                      "pattern": "[\\w\\.-]+",
                      "zonbookDocumentation": "\n        <para>The name of the repository where the pull request was created.</para>\n      ",
                      "documentation": "\n        <p>The name of the repository where the pull request was created.</p>\n      ",
                      "shape_name": "RepositoryName",
                      "min_length": 1,
                      "max_length": 100
                    },
                    "destinationReference": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <para>The name of the branch that the pull request will be merged into.</para>\n      ",
                      "documentation": "\n        <p>The name of the branch that the pull request will be merged into.</p>\n      ",
                      "shape_name": "ReferenceName"
                    },
                    "mergeMetadata": {
                      "type": "structure",
                      "members": {
                        "isMerged": {
                          "type": "boolean",
                          "zonbookDocumentation": "\n        <simpara>A Boolean value indicating whether the merge has been made.</simpara>\n      ",
                          "documentation": "\n        <p>A Boolean value indicating whether the merge has been made.</p>\n      ",
                          "shape_name": "IsMerged"
                        },
                        "mergedBy": {
                          "type": "string",
                          "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of the user who merged the branches.</simpara>\n      ",
                          "documentation": "\n        <p>The Amazon Resource Name (ARN) of the user who merged the branches.</p>\n      ",
                          "shape_name": "Arn"
                        }
                      },
                      "zonbookDocumentation": "\n        <para>Information about the merge state change event.</para>\n      ",
                      "documentation": "\n        <p>Information about the merge state change event.</p>\n      ",
                      "shape_name": "MergeMetadata"
                    }
                  },
                  "zonbookDocumentation": "\n        <para>Information about the change in mergability state for the pull request event.</para>\n      ",
                  "documentation": "\n        <p>Information about the change in mergability state for the pull request event.</p>\n      ",
                  "shape_name": "PullRequestMergedStateChangedEventMetadata"
                }
              },
              "zonbookDocumentation": "\n        <para>Returns information about a pull request event.</para>\n      ",
              "documentation": "\n        <p>Returns information about a pull request event.</p>\n      ",
              "shape_name": "PullRequestEvent"
            }
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>An enumeration token that can be used in a request to return the next batch of the results.</para>\n      ",
            "documentation": "\n        <p>An enumeration token that can be used in a request to return the next batch of the results.</p>\n      ",
            "paginationToken": true,
            "shape_name": "NextToken"
          }
        },
        "shape_name": "DescribePullRequestEventsOutput",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The pull request ID could not be found. Make sure that you have specified the correct repository name and pull request ID, and then try again.</simpara>\n      ",
          "documentation": "\n        <p>The pull request ID could not be found. Make sure that you have specified the correct repository name and pull request ID, and then try again.</p>\n      ",
          "shape_name": "PullRequestDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The pull request ID is not valid. Make sure that you have provided the full ID and that the pull request is in the specified repository, and then try again.</simpara>\n      ",
          "documentation": "\n        <p>The pull request ID is not valid. Make sure that you have provided the full ID and that the pull request is in the specified repository, and then try again.</p>\n      ",
          "shape_name": "InvalidPullRequestIdException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A pull request ID is required, but none was provided.</simpara>\n      ",
          "documentation": "\n        <p>A pull request ID is required, but none was provided.</p>\n      ",
          "shape_name": "PullRequestIdRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The pull request event type is not valid. </para>\n      ",
          "documentation": "\n        <p>The pull request event type is not valid. </p>\n      ",
          "shape_name": "InvalidPullRequestEventTypeException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The Amazon Resource Name (ARN) is not valid. Make sure that you have provided the full ARN for the user who initiated the change for the pull request,\n            and then try again.</para>\n      ",
          "documentation": "\n        <p>The Amazon Resource Name (ARN) is not valid. Make sure that you have provided the full ARN for the user who initiated the change for the pull request,\n            and then try again.</p>\n      ",
          "shape_name": "InvalidActorArnException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The specified Amazon Resource Name (ARN) does not exist in the AWS account.</para>\n      ",
          "documentation": "\n        <p>The specified Amazon Resource Name (ARN) does not exist in the AWS account.</p>\n      ",
          "shape_name": "ActorDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified number of maximum results is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified number of maximum results is not valid.</p>\n      ",
          "shape_name": "InvalidMaxResultsException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified continuation token is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified continuation token is not valid.</p>\n      ",
          "shape_name": "InvalidContinuationTokenException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption integrity check failed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption integrity check failed.</p>\n      ",
          "shape_name": "EncryptionIntegrityChecksFailedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption key could not be accessed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption key could not be accessed.</p>\n      ",
          "shape_name": "EncryptionKeyAccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is disabled.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is disabled.</p>\n      ",
          "shape_name": "EncryptionKeyDisabledException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>No encryption key was found.</simpara>\n      ",
          "documentation": "\n        <p>No encryption key was found.</p>\n      ",
          "shape_name": "EncryptionKeyNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is not available.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is not available.</p>\n      ",
          "shape_name": "EncryptionKeyUnavailableException"
        }
      ],
      "documentation": "\n        <p>Returns information about one or more pull request events.</p>\n        \n      "
    },
    "MergePullRequestByFastForward": {
      "name": "MergePullRequestByFastForward",
      "input": {
        "type": "structure",
        "members": {
          "pullRequestId": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The system-generated ID of the pull request. To get this ID, use <xref linkend=\"ListPullRequests\"/>.</simpara>\n      ",
            "documentation": "\n        <p>The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.</p>\n      ",
            "required": true,
            "shape_name": "PullRequestId"
          },
          "repositoryName": {
            "type": "string",
            "pattern": "[\\w\\.-]+",
            "zonbookDocumentation": "\n        <simpara>The name of the repository where the pull request was created.</simpara>\n      ",
            "documentation": "\n        <p>The name of the repository where the pull request was created.</p>\n      ",
            "required": true,
            "shape_name": "RepositoryName",
            "min_length": 1,
            "max_length": 100
          },
          "sourceCommitId": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The full commit ID of the original or updated commit in the pull request source branch. Pass this value if you want an \n        exception thrown if the current commit ID of the tip of the source branch does not match this commit ID.</simpara>\n      ",
            "documentation": "\n        <p>The full commit ID of the original or updated commit in the pull request source branch. Pass this value if you want an \n        exception thrown if the current commit ID of the tip of the source branch does not match this commit ID.</p>\n      ",
            "shape_name": "CommitId"
          }
        },
        "shape_name": "MergePullRequestByFastForwardInput",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "pullRequest": {
            "type": "structure",
            "members": {
              "pullRequestId": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The system-generated ID of the pull request. </simpara>\n      ",
                "documentation": "\n        <p>The system-generated ID of the pull request. </p>\n      ",
                "shape_name": "PullRequestId"
              },
              "title": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The user-defined title of the pull request. This title is displayed in the list of pull requests to other users of the repository.</simpara>\n      ",
                "documentation": "\n        <p>The user-defined title of the pull request. This title is displayed in the list of pull requests to other users of the repository.</p>\n      ",
                "shape_name": "Title",
                "max_length": 150
              },
              "description": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The user-defined description of the pull request. This description can be used to clarify what should be reviewed and other details of the request.</simpara>\n      ",
                "documentation": "\n        <p>The user-defined description of the pull request. This description can be used to clarify what should be reviewed and other details of the request.</p>\n      ",
                "shape_name": "Description",
                "max_length": 10240
              },
              "lastActivityDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The day and time of the last user or system activity on the pull request, in timestamp format.</simpara>\n      ",
                "documentation": "\n        <p>The day and time of the last user or system activity on the pull request, in timestamp format.</p>\n      ",
                "shape_name": "LastModifiedDate"
              },
              "creationDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date and time the pull request was originally created, in timestamp format.</simpara>\n      ",
                "documentation": "\n        <p>The date and time the pull request was originally created, in timestamp format.</p>\n      ",
                "shape_name": "CreationDate"
              },
              "pullRequestStatus": {
                "type": "string",
                "enum": [
                  "OPEN",
                  "CLOSED"
                ],
                "zonbookDocumentation": "\n        <simpara>The status of the pull request. Pull request status can only change from <code>OPEN</code> to <code>CLOSED</code>.</simpara>\n      ",
                "documentation": "\n        <p>The status of the pull request. Pull request status can only change from <code>OPEN</code> to <code>CLOSED</code>.</p>\n      ",
                "shape_name": "PullRequestStatusEnum"
              },
              "authorArn": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of the user who created the pull request.</simpara>\n      ",
                "documentation": "\n        <p>The Amazon Resource Name (ARN) of the user who created the pull request.</p>\n      ",
                "shape_name": "Arn"
              },
              "pullRequestTargets": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>The targets of the pull request, including the source branch and destination branch for the pull request.</simpara>\n      ",
                "documentation": "\n        <p>The targets of the pull request, including the source branch and destination branch for the pull request.</p>\n      ",
                "shape_name": "PullRequestTargetList",
                "members": {
                  "type": "structure",
                  "members": {
                    "repositoryName": {
                      "type": "string",
                      "pattern": "[\\w\\.-]+",
                      "zonbookDocumentation": "\n        <simpara>The name of the repository that contains the pull request source and destination branches.</simpara>\n      ",
                      "documentation": "\n        <p>The name of the repository that contains the pull request source and destination branches.</p>\n      ",
                      "shape_name": "RepositoryName",
                      "min_length": 1,
                      "max_length": 100
                    },
                    "sourceReference": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The branch of the repository that contains the changes for the pull request. Also known as the source branch.</simpara>\n      ",
                      "documentation": "\n        <p>The branch of the repository that contains the changes for the pull request. Also known as the source branch.</p>\n      ",
                      "shape_name": "ReferenceName"
                    },
                    "destinationReference": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The branch of the repository where the pull request changes will be merged into. Also known as the destination branch. </simpara>\n      ",
                      "documentation": "\n        <p>The branch of the repository where the pull request changes will be merged into. Also known as the destination branch. </p>\n      ",
                      "shape_name": "ReferenceName"
                    },
                    "destinationCommit": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The full commit ID that is the tip of the destination branch. This is the commit where the pull request was or will be merged.</simpara>\n      ",
                      "documentation": "\n        <p>The full commit ID that is the tip of the destination branch. This is the commit where the pull request was or will be merged.</p>\n      ",
                      "shape_name": "CommitId"
                    },
                    "sourceCommit": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The full commit ID of the tip of the source branch used to create the pull request. If the pull request branch is updated by a push \n        while the pull request is open, the commit ID will change to reflect the new tip of the branch.</simpara>\n      ",
                      "documentation": "\n        <p>The full commit ID of the tip of the source branch used to create the pull request. If the pull request branch is updated by a push \n        while the pull request is open, the commit ID will change to reflect the new tip of the branch.</p>\n      ",
                      "shape_name": "CommitId"
                    },
                    "mergeBase": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <para>The commit ID of the most recent commit that the source branch and the destination branch have in common.</para>\n      ",
                      "documentation": "\n        <p>The commit ID of the most recent commit that the source branch and the destination branch have in common.</p>\n      ",
                      "shape_name": "CommitId"
                    },
                    "mergeMetadata": {
                      "type": "structure",
                      "members": {
                        "isMerged": {
                          "type": "boolean",
                          "zonbookDocumentation": "\n        <simpara>A Boolean value indicating whether the merge has been made.</simpara>\n      ",
                          "documentation": "\n        <p>A Boolean value indicating whether the merge has been made.</p>\n      ",
                          "shape_name": "IsMerged"
                        },
                        "mergedBy": {
                          "type": "string",
                          "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of the user who merged the branches.</simpara>\n      ",
                          "documentation": "\n        <p>The Amazon Resource Name (ARN) of the user who merged the branches.</p>\n      ",
                          "shape_name": "Arn"
                        }
                      },
                      "zonbookDocumentation": "\n        <simpara>Returns metadata about the state of the merge, including whether the merge has been made.</simpara>\n      ",
                      "documentation": "\n        <p>Returns metadata about the state of the merge, including whether the merge has been made.</p>\n      ",
                      "shape_name": "MergeMetadata"
                    }
                  },
                  "zonbookDocumentation": "\n        <simpara>Returns information about a pull request target.</simpara>\n      ",
                  "documentation": "\n        <p>Returns information about a pull request target.</p>\n      ",
                  "shape_name": "PullRequestTarget"
                }
              },
              "clientRequestToken": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</simpara>\n      ",
                "documentation": "\n        <p>A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter.\n            If a request is received with the same parameters and a token is included, the request will return information about the initial request that used\n            that token.</p>\n      ",
                "shape_name": "ClientRequestToken"
              }
            },
            "zonbookDocumentation": "\n        <simpara>Information about the specified pull request, including information about the merge.</simpara>\n      ",
            "documentation": "\n        <p>Information about the specified pull request, including information about the merge.</p>\n      ",
            "shape_name": "PullRequest"
          }
        },
        "shape_name": "MergePullRequestByFastForwardOutput",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The pull request cannot be merged automatically into the destination branch. You must manually merge the branches and resolve any conflicts.</simpara>\n      ",
          "documentation": "\n        <p>The pull request cannot be merged automatically into the destination branch. You must manually merge the branches and resolve any conflicts.</p>\n      ",
          "shape_name": "ManualMergeRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The pull request status cannot be updated because it is already closed.</para>\n      ",
          "documentation": "\n        <p>The pull request status cannot be updated because it is already closed.</p>\n      ",
          "shape_name": "PullRequestAlreadyClosedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The pull request ID could not be found. Make sure that you have specified the correct repository name and pull request ID, and then try again.</simpara>\n      ",
          "documentation": "\n        <p>The pull request ID could not be found. Make sure that you have specified the correct repository name and pull request ID, and then try again.</p>\n      ",
          "shape_name": "PullRequestDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The pull request ID is not valid. Make sure that you have provided the full ID and that the pull request is in the specified repository, and then try again.</simpara>\n      ",
          "documentation": "\n        <p>The pull request ID is not valid. Make sure that you have provided the full ID and that the pull request is in the specified repository, and then try again.</p>\n      ",
          "shape_name": "InvalidPullRequestIdException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A pull request ID is required, but none was provided.</simpara>\n      ",
          "documentation": "\n        <p>A pull request ID is required, but none was provided.</p>\n      ",
          "shape_name": "PullRequestIdRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The tip of the source branch in the destination repository does not match the tip of the source branch specified in your request. \n            The pull request might have been updated. Make sure that you have the latest changes.</simpara>\n      ",
          "documentation": "\n        <p>The tip of the source branch in the destination repository does not match the tip of the source branch specified in your request. \n            The pull request might have been updated. Make sure that you have the latest changes.</p>\n      ",
          "shape_name": "TipOfSourceReferenceIsDifferentException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The specified reference does not exist. You must provide a full commit ID.</para>\n      ",
          "documentation": "\n        <p>The specified reference does not exist. You must provide a full commit ID.</p>\n      ",
          "shape_name": "ReferenceDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified commit ID is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified commit ID is not valid.</p>\n      ",
          "shape_name": "InvalidCommitIdException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A repository name is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A repository name is required but was not specified.</p>\n      ",
          "shape_name": "RepositoryNameRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>At least one specified repository name is not valid.</simpara>\n        <note>\n            <simpara>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</simpara>\n         </note>\n      ",
          "documentation": "\n        <p>At least one specified repository name is not valid.</p>\n        <note>\n            <p>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</p>\n         </note>\n      ",
          "shape_name": "InvalidRepositoryNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified repository does not exist.</simpara>\n      ",
          "documentation": "\n        <p>The specified repository does not exist.</p>\n      ",
          "shape_name": "RepositoryDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption integrity check failed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption integrity check failed.</p>\n      ",
          "shape_name": "EncryptionIntegrityChecksFailedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption key could not be accessed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption key could not be accessed.</p>\n      ",
          "shape_name": "EncryptionKeyAccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is disabled.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is disabled.</p>\n      ",
          "shape_name": "EncryptionKeyDisabledException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>No encryption key was found.</simpara>\n      ",
          "documentation": "\n        <p>No encryption key was found.</p>\n      ",
          "shape_name": "EncryptionKeyNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is not available.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is not available.</p>\n      ",
          "shape_name": "EncryptionKeyUnavailableException"
        }
      ],
      "documentation": "\n        <p>Closes a pull request and attempts to merge the source commit of a pull request into the specified destination\n            branch for that pull request at the specified commit using the fast-forward merge option.</p>\n        \n        \n        \n      "
    },
    "GetMergeConflicts": {
      "name": "GetMergeConflicts",
      "input": {
        "type": "structure",
        "members": {
          "repositoryName": {
            "type": "string",
            "pattern": "[\\w\\.-]+",
            "zonbookDocumentation": "\n        <para>The name of the repository where the pull request was created.</para>\n      ",
            "documentation": "\n        <p>The name of the repository where the pull request was created.</p>\n      ",
            "required": true,
            "shape_name": "RepositoryName",
            "min_length": 1,
            "max_length": 100
          },
          "destinationCommitSpecifier": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For\n        example, a branch name or a full commit ID.</para>\n      ",
            "documentation": "\n        <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For\n        example, a branch name or a full commit ID.</p>\n      ",
            "required": true,
            "shape_name": "CommitName"
          },
          "sourceCommitSpecifier": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For \n        example, a branch name or a full commit ID.</para>\n      ",
            "documentation": "\n        <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For \n        example, a branch name or a full commit ID.</p>\n      ",
            "required": true,
            "shape_name": "CommitName"
          },
          "mergeOption": {
            "type": "string",
            "enum": [
              "FAST_FORWARD_MERGE"
            ],
            "zonbookDocumentation": "\n        <para>The merge option or strategy you want to use to merge the code. The only valid value is FAST_FORWARD_MERGE.</para>\n      ",
            "documentation": "\n        <p>The merge option or strategy you want to use to merge the code. The only valid value is FAST_FORWARD_MERGE.</p>\n      ",
            "required": true,
            "shape_name": "MergeOptionTypeEnum"
          }
        },
        "shape_name": "GetMergeConflictsInput",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "mergeable": {
            "type": "boolean",
            "zonbookDocumentation": "\n        <para>A Boolean value that indicates whether the code is mergable by the specified merge option.</para>\n      ",
            "documentation": "\n        <p>A Boolean value that indicates whether the code is mergable by the specified merge option.</p>\n      ",
            "required": true,
            "shape_name": "IsMergeable"
          },
          "destinationCommitId": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>The commit ID of the destination commit specifier that was used in the merge evaluation.</para>\n      ",
            "documentation": "\n        <p>The commit ID of the destination commit specifier that was used in the merge evaluation.</p>\n      ",
            "required": true,
            "shape_name": "CommitId"
          },
          "sourceCommitId": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>The commit ID of the source commit specifier that was used in the merge evaluation.</para>\n      ",
            "documentation": "\n        <p>The commit ID of the source commit specifier that was used in the merge evaluation.</p>\n      ",
            "required": true,
            "shape_name": "CommitId"
          }
        },
        "shape_name": "GetMergeConflictsOutput",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A repository name is required but was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A repository name is required but was not specified.</p>\n      ",
          "shape_name": "RepositoryNameRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>At least one specified repository name is not valid.</simpara>\n        <note>\n            <simpara>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</simpara>\n         </note>\n      ",
          "documentation": "\n        <p>At least one specified repository name is not valid.</p>\n        <note>\n            <p>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</p>\n         </note>\n      ",
          "shape_name": "InvalidRepositoryNameException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified repository does not exist.</simpara>\n      ",
          "documentation": "\n        <p>The specified repository does not exist.</p>\n      ",
          "shape_name": "RepositoryDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>A merge option or stategy is required, and none was provided.</para>\n      ",
          "documentation": "\n        <p>A merge option or stategy is required, and none was provided.</p>\n      ",
          "shape_name": "MergeOptionRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The specified merge option is not valid. The only valid value is FAST_FORWARD_MERGE.</para>\n      ",
          "documentation": "\n        <p>The specified merge option is not valid. The only valid value is FAST_FORWARD_MERGE.</p>\n      ",
          "shape_name": "InvalidMergeOptionException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The destination commit specifier is not valid. You must provide a valid branch name, tag, or full commit ID. </para>\n      ",
          "documentation": "\n        <p>The destination commit specifier is not valid. You must provide a valid branch name, tag, or full commit ID. </p>\n      ",
          "shape_name": "InvalidDestinationCommitSpecifierException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The source commit specifier is not valid. You must provide a valid branch name, tag, or full commit ID.</para>\n      ",
          "documentation": "\n        <p>The source commit specifier is not valid. You must provide a valid branch name, tag, or full commit ID.</p>\n      ",
          "shape_name": "InvalidSourceCommitSpecifierException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>A commit was not specified.</simpara>\n      ",
          "documentation": "\n        <p>A commit was not specified.</p>\n      ",
          "shape_name": "CommitRequiredException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified commit does not exist or no commit was specified, and the specified repository has no default branch.</simpara>\n      ",
          "documentation": "\n        <p>The specified commit does not exist or no commit was specified, and the specified repository has no default branch.</p>\n      ",
          "shape_name": "CommitDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The specified commit is not valid.</simpara>\n      ",
          "documentation": "\n        <p>The specified commit is not valid.</p>\n      ",
          "shape_name": "InvalidCommitException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <para>The divergence between the tips of the provided commit specifiers is too great to determine whether there might be \n            any merge conflicts. Locally compare the specifiers using <code>git diff</code> or a diff tool.</para>\n      ",
          "documentation": "\n        <p>The divergence between the tips of the provided commit specifiers is too great to determine whether there might be \n            any merge conflicts. Locally compare the specifiers using <code>git diff</code> or a diff tool.</p>\n      ",
          "shape_name": "TipsDivergenceExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption integrity check failed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption integrity check failed.</p>\n      ",
          "shape_name": "EncryptionIntegrityChecksFailedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An encryption key could not be accessed.</simpara>\n      ",
          "documentation": "\n        <p>An encryption key could not be accessed.</p>\n      ",
          "shape_name": "EncryptionKeyAccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is disabled.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is disabled.</p>\n      ",
          "shape_name": "EncryptionKeyDisabledException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>No encryption key was found.</simpara>\n      ",
          "documentation": "\n        <p>No encryption key was found.</p>\n      ",
          "shape_name": "EncryptionKeyNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>The encryption key is not available.</simpara>\n      ",
          "documentation": "\n        <p>The encryption key is not available.</p>\n      ",
          "shape_name": "EncryptionKeyUnavailableException"
        }
      ],
      "documentation": "\n        <p>Returns information about merge conflicts between the before and after commit IDs for a pull request in a repository.</p>\n        \n      "
    }
  }
}
