{
  "version": "1.0",
  "type": "json",
  "json_version": 1.1,
  "signature_version": "v4",
  "service_full_name": "Amazon Rekognition",
  "service_id": "Rekognition",
  "uid": "rekognition-2016-06-27",
  "endpoint_prefix": "rekognition",
  "api_version": "2016-06-27",
  "target_prefix": "RekognitionService",
  "documentation": "\n         <p>This is the Amazon Rekognition API reference.</p>\n      ",
  "operations": {
    "CreateCollection": {
      "name": "CreateCollection",
      "input": {
        "type": "structure",
        "members": {
          "CollectionId": {
            "type": "string",
            "pattern": "[a-zA-Z0-9_.\\-]+",
            "zonbookDocumentation": "\n         <simpara>ID for the collection that you are creating.</simpara>\n      ",
            "documentation": "\n         <p>ID for the collection that you are creating.</p>\n      ",
            "required": true,
            "shape_name": "CollectionId",
            "min_length": 1,
            "max_length": 255
          }
        },
        "shape_name": "CreateCollectionRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "StatusCode": {
            "type": "integer",
            "zonbookDocumentation": "\n         <simpara>HTTP status code indicating the result of the operation.</simpara>\n      ",
            "documentation": "\n         <p>HTTP status code indicating the result of the operation.</p>\n      ",
            "shape_name": "UInteger",
            "min_length": 0
          },
          "CollectionArn": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>Amazon Resource Name (ARN) of the collection. You can use this to manage permissions on\n      your resources. </simpara>\n      ",
            "documentation": "\n         <p>Amazon Resource Name (ARN) of the collection. You can use this to manage permissions on\n      your resources. </p>\n      ",
            "shape_name": "String"
          },
          "FaceModelVersion": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>Version number of the face detection model associated with the collection you are creating.</simpara>\n      ",
            "documentation": "\n         <p>Version number of the face detection model associated with the collection you are creating.</p>\n      ",
            "shape_name": "String"
          }
        },
        "shape_name": "CreateCollectionResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>A collection with the specified ID already exists.</simpara>\n      ",
          "documentation": "\n         <p>A collection with the specified ID already exists.</p>\n      ",
          "shape_name": "ResourceAlreadyExistsException"
        }
      ],
      "documentation": "\n\n         <p>Creates a collection in an AWS Region. You can add faces to the collection using the\n         operation. </p>\n         <p>For example, you might create collections, one for each of your application users. A\n      user can then index faces using the <code>IndexFaces</code> operation and persist results in a\n      specific collection. Then, a user can search the collection for faces in the user-specific\n      container. </p>\n         <note>\n            <p>Collection names are case-sensitive.</p>\n         </note>\n\n         <p>This operation requires permissions to perform the\n        <code>rekognition:CreateCollection</code> action.</p>\n    \n      "
    },
    "DeleteCollection": {
      "name": "DeleteCollection",
      "input": {
        "type": "structure",
        "members": {
          "CollectionId": {
            "type": "string",
            "pattern": "[a-zA-Z0-9_.\\-]+",
            "zonbookDocumentation": "\n         <simpara>ID of the collection to delete.</simpara>\n      ",
            "documentation": "\n         <p>ID of the collection to delete.</p>\n      ",
            "required": true,
            "shape_name": "CollectionId",
            "min_length": 1,
            "max_length": 255
          }
        },
        "shape_name": "DeleteCollectionRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "StatusCode": {
            "type": "integer",
            "zonbookDocumentation": "\n         <simpara>HTTP status code that indicates the result of the operation.</simpara>\n      ",
            "documentation": "\n         <p>HTTP status code that indicates the result of the operation.</p>\n      ",
            "shape_name": "UInteger",
            "min_length": 0
          }
        },
        "shape_name": "DeleteCollectionResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The collection specified in the request cannot be found.</simpara>\n      ",
          "documentation": "\n         <p>The collection specified in the request cannot be found.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        }
      ],
      "documentation": "\n\n         <p>Deletes the specified collection. Note that this operation\n      removes all faces in the collection. For an example, see <a>delete-collection-procedure</a>.</p>\n\n         <p>This operation requires permissions to perform the\n        <code>rekognition:DeleteCollection</code> action.</p>\n    \n      "
    },
    "DescribeCollection": {
      "name": "DescribeCollection",
      "input": {
        "type": "structure",
        "members": {
          "CollectionId": {
            "type": "string",
            "pattern": "[a-zA-Z0-9_.\\-]+",
            "zonbookDocumentation": "\n         <para>The ID of the collection to describe.</para>\n      ",
            "documentation": "\n         <p>The ID of the collection to describe.</p>\n      ",
            "required": true,
            "shape_name": "CollectionId",
            "min_length": 1,
            "max_length": 255
          }
        },
        "shape_name": "DescribeCollectionRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "FaceCount": {
            "type": "long",
            "zonbookDocumentation": "\n         <para>The number of faces that are indexed into the collection. To index faces into a\n         collection, use <xref linkend=\"API_IndexFaces\"/>.</para>\n      ",
            "documentation": "\n         <p>The number of faces that are indexed into the collection. To index faces into a\n         collection, use .</p>\n      ",
            "shape_name": "ULong",
            "min_length": 0
          },
          "FaceModelVersion": {
            "type": "string",
            "zonbookDocumentation": "\n         <para>The version of the face model that's used by the collection for face detection.</para>\n         <simpara>For more information, see <xref linkend=\"face-detection-model\"/>.</simpara>\n     \n      ",
            "documentation": "\n         <p>The version of the face model that's used by the collection for face detection.</p>\n      \n         <p>For more information, see Model Versioning in the \n     Amazon Rekognition Developer Guide.</p>\n      ",
            "shape_name": "String"
          },
          "CollectionARN": {
            "type": "string",
            "zonbookDocumentation": "\n         <para>The Amazon Resource Name (ARN) of the collection.</para>\n      ",
            "documentation": "\n         <p>The Amazon Resource Name (ARN) of the collection.</p>\n      ",
            "shape_name": "String"
          },
          "CreationTimestamp": {
            "type": "timestamp",
            "zonbookDocumentation": "\n         <para>The number of milliseconds since the Unix epoch time until the creation of the collection.\n         The Unix epoch time is 00:00:00 Coordinated Universal Time (UTC), Thursday, 1 January 1970.</para>\n      ",
            "documentation": "\n         <p>The number of milliseconds since the Unix epoch time until the creation of the collection.\n         The Unix epoch time is 00:00:00 Coordinated Universal Time (UTC), Thursday, 1 January 1970.</p>\n      ",
            "shape_name": "DateTime"
          }
        },
        "shape_name": "DescribeCollectionResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The collection specified in the request cannot be found.</simpara>\n      ",
          "documentation": "\n         <p>The collection specified in the request cannot be found.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        }
      ],
      "documentation": "\n         <p>Describes the specified collection. You can use <code>DescribeCollection</code> to get\n         information, such as the number of faces indexed into a collection and the version of the\n         model used by the collection for face detection.</p>\n    \n         <p>For more information, see Describing a Collection in the \n     Amazon Rekognition Developer Guide.</p>\n      "
    },
    "Analyze": {
      "name": "Analyze",
      "input": {
        "type": "structure",
        "members": {
          "Image": {
            "type": "structure",
            "members": {
              "Bytes": {
                "type": "blob",
                "zonbookDocumentation": "\n         <simpara>Blob of image bytes up to 5 MBs.</simpara>\n      ",
                "documentation": "\n         <p>Blob of image bytes up to 5 MBs.</p>\n      ",
                "shape_name": "ImageBlob",
                "min_length": 1,
                "max_length": 5242880
              },
              "S3Object": {
                "type": "structure",
                "members": {
                  "Bucket": {
                    "type": "string",
                    "pattern": "[0-9A-Za-z\\.\\-_]*",
                    "zonbookDocumentation": "\n         <simpara>Name of the S3 bucket.</simpara>\n      ",
                    "documentation": "\n         <p>Name of the S3 bucket.</p>\n      ",
                    "shape_name": "S3Bucket",
                    "min_length": 3,
                    "max_length": 255
                  },
                  "Name": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>S3 object key name.</simpara>\n      ",
                    "documentation": "\n         <p>S3 object key name.</p>\n      ",
                    "shape_name": "S3ObjectName",
                    "min_length": 1,
                    "max_length": 1024
                  },
                  "Version": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>If the bucket is versioning enabled, you can specify the object version. </simpara>\n      ",
                    "documentation": "\n         <p>If the bucket is versioning enabled, you can specify the object version. </p>\n      ",
                    "shape_name": "S3ObjectVersion",
                    "min_length": 1,
                    "max_length": 1024
                  }
                },
                "zonbookDocumentation": "\n         <simpara>Identifies an S3 object as the image source.</simpara>\n      ",
                "documentation": "\n         <p>Identifies an S3 object as the image source.</p>\n      ",
                "shape_name": "S3Object"
              }
            },
            "zonbookDocumentation": "\n         <simpara>Provides the input image either as bytes or an S3 object.</simpara>\n         <simpara>You pass image bytes to a Rekognition API operation by using the <code>Bytes</code> property.\n\n      For example, you would use the <code>Bytes</code> property to pass an image loaded from a\n      local file system. Image bytes passed by using the <code>Bytes</code> property must be\n      base64-encoded. Your code may not need to encode image bytes if you are using an AWS SDK to\n      call Rekognition API operations. </simpara>\n         <simpara>For more information, see <xref linkend=\"images-bytes\"/>.</simpara>\n    \n         <simpara> You pass images stored in an S3 bucket to a Rekognition API operation by using the\n        <code>S3Object</code> property. Images stored in an S3 bucket do not need to be\n      base64-encoded.</simpara>\n         <simpara>The region for the S3 bucket containing the S3 object must match the region you use for\n      Amazon Rekognition operations.</simpara>\n         <simpara>If you use the Amazon CLI to call Amazon Rekognition operations, passing image bytes using the\n      Bytes property is not supported. You must first upload the image to an Amazon S3 bucket and\n      then call the operation using the S3Object property.</simpara>\n         <simpara>For Amazon Rekognition to process an S3 object, the user must have permission to access the S3\n      object. For more information, see <xref linkend=\"manage-access-resource-policies\"/>.\n    </simpara>\n    \n\n      ",
            "documentation": "\n         <p>Provides the input image either as bytes or an S3 object.</p>\n         <p>You pass image bytes to a Rekognition API operation by using the <code>Bytes</code> property.\n\n      For example, you would use the <code>Bytes</code> property to pass an image loaded from a\n      local file system. Image bytes passed by using the <code>Bytes</code> property must be\n      base64-encoded. Your code may not need to encode image bytes if you are using an AWS SDK to\n      call Rekognition API operations. </p>\n    \n         <p>For more information, see Analyzing an Image Loaded from a Local File System \n      in the Amazon Rekognition Developer Guide.</p>\n         <p> You pass images stored in an S3 bucket to a Rekognition API operation by using the\n        <code>S3Object</code> property. Images stored in an S3 bucket do not need to be\n      base64-encoded.</p>\n         <p>The region for the S3 bucket containing the S3 object must match the region you use for\n      Amazon Rekognition operations.</p>\n         <p>If you use the Amazon CLI to call Amazon Rekognition operations, passing image bytes using the\n      Bytes property is not supported. You must first upload the image to an Amazon S3 bucket and\n      then call the operation using the S3Object property.</p>\n    \n         <p>For Amazon Rekognition to process an S3 object, the user must have permission to access the S3\n      object. For more information, see Resource Based Policies in the Amazon Rekognition Developer Guide.\n    </p>\n\n      ",
            "required": true,
            "shape_name": "Image"
          },
          "AnalyzeOperations": {
            "type": "structure",
            "members": {
              "AddFacesOperation": {
                "type": "structure",
                "members": {
                  "CollectionId": {
                    "type": "string",
                    "pattern": "[a-zA-Z0-9_.\\-]+",
                    "required": true,
                    "shape_name": "CollectionId",
                    "documentation": null,
                    "min_length": 1,
                    "max_length": 255
                  },
                  "ExternalImageId": {
                    "type": "string",
                    "pattern": "[a-zA-Z0-9_.\\-:]+",
                    "shape_name": "ExternalImageId",
                    "documentation": null,
                    "min_length": 1,
                    "max_length": 255
                  }
                },
                "internalonly": true,
                "shape_name": "AddFacesOperation",
                "documentation": null
              },
              "DetectLabelsOperation": {
                "type": "structure",
                "members": {
                  "MaxLabels": {
                    "type": "integer",
                    "shape_name": "UInteger",
                    "documentation": null,
                    "min_length": 0
                  },
                  "MinConfidence": {
                    "type": "float",
                    "shape_name": "Percent",
                    "documentation": null,
                    "min_length": 0,
                    "max_length": 100
                  }
                },
                "internalonly": true,
                "shape_name": "DetectLabelsOperation",
                "documentation": null
              }
            },
            "internalonly": true,
            "required": true,
            "shape_name": "AnalyzeOperations",
            "documentation": null
          }
        },
        "shape_name": "AnalyzeRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "StatusCode": {
            "type": "integer",
            "shape_name": "UInteger",
            "documentation": null,
            "min_length": 0
          },
          "AddFacesResult": {
            "type": "structure",
            "members": {
              "StatusCode": {
                "type": "integer",
                "shape_name": "UInteger",
                "documentation": null,
                "min_length": 0
              },
              "AddFacesResponse": {
                "type": "structure",
                "members": {
                  "Faces": {
                    "type": "list",
                    "shape_name": "FaceList",
                    "documentation": null,
                    "members": {
                      "type": "structure",
                      "members": {
                        "FaceId": {
                          "type": "string",
                          "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
                          "zonbookDocumentation": "\n         <simpara>Unique identifier that Amazon Rekognition assigns to the face.</simpara>\n      ",
                          "documentation": "\n         <p>Unique identifier that Amazon Rekognition assigns to the face.</p>\n      ",
                          "shape_name": "FaceId"
                        },
                        "BoundingBox": {
                          "type": "structure",
                          "members": {
                            "Width": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Width of the bounding box as a ratio of the overall image width.</simpara>\n      ",
                              "documentation": "\n         <p>Width of the bounding box as a ratio of the overall image width.</p>\n      ",
                              "shape_name": "Float"
                            },
                            "Height": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Height of the bounding box as a ratio of the overall image height.</simpara>\n      ",
                              "documentation": "\n         <p>Height of the bounding box as a ratio of the overall image height.</p>\n      ",
                              "shape_name": "Float"
                            },
                            "Left": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Left coordinate of the bounding box as a ratio of overall image width.</simpara>\n      ",
                              "documentation": "\n         <p>Left coordinate of the bounding box as a ratio of overall image width.</p>\n      ",
                              "shape_name": "Float"
                            },
                            "Top": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Top coordinate of the bounding box as a ratio of overall image height.</simpara>\n      ",
                              "documentation": "\n         <p>Top coordinate of the bounding box as a ratio of overall image height.</p>\n      ",
                              "shape_name": "Float"
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>Bounding box of the face.</simpara>\n      ",
                          "documentation": "\n         <p>Bounding box of the face.</p>\n      ",
                          "shape_name": "BoundingBox"
                        },
                        "ImageId": {
                          "type": "string",
                          "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
                          "zonbookDocumentation": "\n         <simpara>Unique identifier that Amazon Rekognition assigns to the input image.</simpara>\n      ",
                          "documentation": "\n         <p>Unique identifier that Amazon Rekognition assigns to the input image.</p>\n      ",
                          "shape_name": "ImageId"
                        },
                        "ExternalImageId": {
                          "type": "string",
                          "pattern": "[a-zA-Z0-9_.\\-:]+",
                          "zonbookDocumentation": "\n         <simpara>Identifier that you assign to all the faces in the input image.</simpara>\n      ",
                          "documentation": "\n         <p>Identifier that you assign to all the faces in the input image.</p>\n      ",
                          "shape_name": "ExternalImageId",
                          "min_length": 1,
                          "max_length": 255
                        },
                        "Confidence": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Confidence level that the bounding box contains a face (and not a different object such\n      as a tree).</simpara>\n      ",
                          "documentation": "\n         <p>Confidence level that the bounding box contains a face (and not a different object such\n      as a tree).</p>\n      ",
                          "shape_name": "Percent",
                          "min_length": 0,
                          "max_length": 100
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Describes the face properties such as the bounding box, face ID, image ID of the input\n      image, and external image ID that you assigned. </simpara>\n      ",
                      "documentation": "\n         <p>Describes the face properties such as the bounding box, face ID, image ID of the input\n      image, and external image ID that you assigned. </p>\n      ",
                      "shape_name": "Face"
                    }
                  },
                  "OrientationCorrection": {
                    "type": "string",
                    "enum": [
                      "ROTATE_0",
                      "ROTATE_90",
                      "ROTATE_180",
                      "ROTATE_270"
                    ],
                    "shape_name": "OrientationCorrection",
                    "documentation": null
                  }
                },
                "shape_name": "AddFacesResponse",
                "documentation": null
              }
            },
            "internalonly": true,
            "shape_name": "AddFacesResult",
            "documentation": null
          },
          "DetectLabelsResult": {
            "type": "structure",
            "members": {
              "StatusCode": {
                "type": "integer",
                "shape_name": "UInteger",
                "documentation": null,
                "min_length": 0
              },
              "DetectLabelsResponse": {
                "type": "structure",
                "members": {
                  "Labels": {
                    "type": "list",
                    "shape_name": "Labels",
                    "documentation": null,
                    "members": {
                      "type": "structure",
                      "members": {
                        "Name": {
                          "type": "string",
                          "zonbookDocumentation": "\n         <simpara>The name (label) of the object.</simpara>\n      ",
                          "documentation": "\n         <p>The name (label) of the object.</p>\n      ",
                          "shape_name": "String"
                        },
                        "Confidence": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Level of confidence.</simpara>\n      ",
                          "documentation": "\n         <p>Level of confidence.</p>\n      ",
                          "shape_name": "Percent",
                          "min_length": 0,
                          "max_length": 100
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Structure containing details about the detected label, including name, and level of\n      confidence.</simpara>\n      ",
                      "documentation": "\n         <p>Structure containing details about the detected label, including name, and level of\n      confidence.</p>\n      ",
                      "shape_name": "Label"
                    }
                  },
                  "OrientationCorrection": {
                    "type": "string",
                    "enum": [
                      "ROTATE_0",
                      "ROTATE_90",
                      "ROTATE_180",
                      "ROTATE_270"
                    ],
                    "shape_name": "OrientationCorrection",
                    "documentation": null
                  }
                },
                "shape_name": "DetectLabelsAnalyzeResponse",
                "documentation": null
              }
            },
            "internalonly": true,
            "shape_name": "DetectLabelsResult",
            "documentation": null
          }
        },
        "shape_name": "AnalyzeResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is unable to access the S3 object specified in the request.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is unable to access the S3 object specified in the request.</p>\n      ",
          "shape_name": "InvalidS3ObjectException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The input image size exceeds the allowed limit. For more information, see <xref linkend=\"limits\"/>. </simpara>\n    \n      ",
          "documentation": "\n    \n         <p>The input image size exceeds the allowed limit. For more information, see \n      Limits in Amazon Rekognition in the Amazon Rekognition Developer Guide. </p>\n      ",
          "shape_name": "ImageTooLargeException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "shape_name": "UnknownOperationException",
          "documentation": null
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The provided image format is not supported. </simpara>\n      ",
          "documentation": "\n         <p>The provided image format is not supported. </p>\n      ",
          "shape_name": "InvalidImageFormatException"
        }
      ],
      "documentation": null
    },
    "DetectLabels": {
      "name": "DetectLabels",
      "input": {
        "type": "structure",
        "members": {
          "Image": {
            "type": "structure",
            "members": {
              "Bytes": {
                "type": "blob",
                "zonbookDocumentation": "\n         <simpara>Blob of image bytes up to 5 MBs.</simpara>\n      ",
                "documentation": "\n         <p>Blob of image bytes up to 5 MBs.</p>\n      ",
                "shape_name": "ImageBlob",
                "min_length": 1,
                "max_length": 5242880
              },
              "S3Object": {
                "type": "structure",
                "members": {
                  "Bucket": {
                    "type": "string",
                    "pattern": "[0-9A-Za-z\\.\\-_]*",
                    "zonbookDocumentation": "\n         <simpara>Name of the S3 bucket.</simpara>\n      ",
                    "documentation": "\n         <p>Name of the S3 bucket.</p>\n      ",
                    "shape_name": "S3Bucket",
                    "min_length": 3,
                    "max_length": 255
                  },
                  "Name": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>S3 object key name.</simpara>\n      ",
                    "documentation": "\n         <p>S3 object key name.</p>\n      ",
                    "shape_name": "S3ObjectName",
                    "min_length": 1,
                    "max_length": 1024
                  },
                  "Version": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>If the bucket is versioning enabled, you can specify the object version. </simpara>\n      ",
                    "documentation": "\n         <p>If the bucket is versioning enabled, you can specify the object version. </p>\n      ",
                    "shape_name": "S3ObjectVersion",
                    "min_length": 1,
                    "max_length": 1024
                  }
                },
                "zonbookDocumentation": "\n         <simpara>Identifies an S3 object as the image source.</simpara>\n      ",
                "documentation": "\n         <p>Identifies an S3 object as the image source.</p>\n      ",
                "shape_name": "S3Object"
              }
            },
            "zonbookDocumentation": "\n\n         <simpara>The input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call\n      Amazon Rekognition operations, passing base64-encoded image bytes is not supported. </simpara>\n\n      ",
            "documentation": "\n\n         <p>The input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call\n      Amazon Rekognition operations, passing base64-encoded image bytes is not supported. </p>\n\n      ",
            "required": true,
            "shape_name": "Image"
          },
          "MaxLabels": {
            "type": "integer",
            "zonbookDocumentation": "\n         <simpara>Maximum number of labels you want the service to return in the response. The service\n      returns the specified number of highest confidence labels. </simpara>\n      ",
            "documentation": "\n         <p>Maximum number of labels you want the service to return in the response. The service\n      returns the specified number of highest confidence labels. </p>\n      ",
            "shape_name": "UInteger",
            "min_length": 0
          },
          "MinConfidence": {
            "type": "float",
            "zonbookDocumentation": "\n         <simpara>Specifies the minimum confidence level for the labels to return. Amazon Rekognition doesn't\n      return any labels with confidence lower than this specified value.</simpara>\n         <simpara>If <code>MinConfidence</code> is not specified, the operation returns labels with a\n      confidence values greater than or equal to 50 percent.</simpara>\n      ",
            "documentation": "\n         <p>Specifies the minimum confidence level for the labels to return. Amazon Rekognition doesn't\n      return any labels with confidence lower than this specified value.</p>\n         <p>If <code>MinConfidence</code> is not specified, the operation returns labels with a\n      confidence values greater than or equal to 50 percent.</p>\n      ",
            "shape_name": "Percent",
            "min_length": 0,
            "max_length": 100
          }
        },
        "shape_name": "DetectLabelsRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Labels": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of labels for the real-world objects detected. </simpara>\n      ",
            "documentation": "\n         <p>An array of labels for the real-world objects detected. </p>\n      ",
            "shape_name": "Labels",
            "members": {
              "type": "structure",
              "members": {
                "Name": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The name (label) of the object.</simpara>\n      ",
                  "documentation": "\n         <p>The name (label) of the object.</p>\n      ",
                  "shape_name": "String"
                },
                "Confidence": {
                  "type": "float",
                  "zonbookDocumentation": "\n         <simpara>Level of confidence.</simpara>\n      ",
                  "documentation": "\n         <p>Level of confidence.</p>\n      ",
                  "shape_name": "Percent",
                  "min_length": 0,
                  "max_length": 100
                }
              },
              "zonbookDocumentation": "\n         <simpara>Structure containing details about the detected label, including name, and level of\n      confidence.</simpara>\n      ",
              "documentation": "\n         <p>Structure containing details about the detected label, including name, and level of\n      confidence.</p>\n      ",
              "shape_name": "Label"
            }
          },
          "OrientationCorrection": {
            "type": "string",
            "enum": [
              "ROTATE_0",
              "ROTATE_90",
              "ROTATE_180",
              "ROTATE_270"
            ],
            "zonbookDocumentation": "\n         <simpara> The orientation of the input image (counter-clockwise direction). If your application\n      displays the image, you can use this value to correct the orientation. If Amazon Rekognition detects\n      that the input image was rotated (for example, by 90 degrees), it first corrects the\n      orientation before detecting the labels. </simpara>\n         <note>\n            <simpara>If the input image Exif metadata populates the orientation field, Amazon Rekognition does not\n        perform orientation correction and the value of OrientationCorrection will be\n        null.</simpara>\n         </note>\n      ",
            "documentation": "\n         <p> The orientation of the input image (counter-clockwise direction). If your application\n      displays the image, you can use this value to correct the orientation. If Amazon Rekognition detects\n      that the input image was rotated (for example, by 90 degrees), it first corrects the\n      orientation before detecting the labels. </p>\n         <note>\n            <p>If the input image Exif metadata populates the orientation field, Amazon Rekognition does not\n        perform orientation correction and the value of OrientationCorrection will be\n        null.</p>\n         </note>\n      ",
            "shape_name": "OrientationCorrection"
          }
        },
        "shape_name": "DetectLabelsResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is unable to access the S3 object specified in the request.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is unable to access the S3 object specified in the request.</p>\n      ",
          "shape_name": "InvalidS3ObjectException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The input image size exceeds the allowed limit. For more information, see <xref linkend=\"limits\"/>. </simpara>\n    \n      ",
          "documentation": "\n    \n         <p>The input image size exceeds the allowed limit. For more information, see \n      Limits in Amazon Rekognition in the Amazon Rekognition Developer Guide. </p>\n      ",
          "shape_name": "ImageTooLargeException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The provided image format is not supported. </simpara>\n      ",
          "documentation": "\n         <p>The provided image format is not supported. </p>\n      ",
          "shape_name": "InvalidImageFormatException"
        }
      ],
      "documentation": "\n\n         <p>Detects instances of real-world entities within an image (JPEG or PNG)\n       provided as input. This includes objects like flower, tree, and table; events like\n       wedding, graduation, and birthday party; and concepts like landscape, evening, and nature.\n     </p>\n    \n         <p>For an example, see Analyzing Images Stored in an Amazon S3 Bucket in the Amazon Rekognition Developer Guide.</p> \n         <note>\n            <p>\n               <code>DetectLabels</code> does not support the detection of activities. However, activity detection\n        is supported for label detection in videos. For more information, see StartLabelDetection in the Amazon Rekognition Developer Guide.</p> \n         </note>\n   \n         <p>You pass the input image as base64-encoded image bytes or as a reference to an image in an Amazon S3 bucket.\n      If you use the Amazon CLI to call Amazon Rekognition operations, passing image bytes is not supported. The image must be either a PNG or JPEG formatted file.\n    </p>\n         <p>\n      For each object, scene, and concept the API returns one or more labels. Each\n      label provides the object name, and the level of confidence that the image contains the object.\n       For example, suppose the input image has a lighthouse, the sea, and a rock.\n       The response will include all three labels, one for each object.\n    </p>\n         <p>\n            <code>{Name: lighthouse, Confidence: 98.4629}</code>\n         </p>\n         <p>\n            <code>{Name: rock,Confidence: 79.2097}</code>\n         </p>\n         <p>\n            <code> {Name: sea,Confidence: 75.061}</code>\n         </p>\n         <p>In the preceding example, the operation returns one label for each of the three\n      objects. The operation can also return multiple labels for the same object in the image. For\n      example, if the input image shows a flower (for example, a tulip), the operation might return\n      the following three labels. </p>\n         <p>\n            <code>{Name: flower,Confidence: 99.0562}</code>\n         </p>\n         <p>\n            <code>{Name: plant,Confidence: 99.0562}</code>\n         </p>\n         <p>\n            <code>{Name: tulip,Confidence: 99.0562}</code>\n         </p>\n\n         <p>In this example, the detection algorithm more precisely identifies the flower as a\n      tulip.</p>\n         <p>In response, the API returns an array of labels. In addition, the response also\n      includes the orientation correction. Optionally, you can specify <code>MinConfidence</code> to\n      control the confidence threshold for the labels returned. The default is 50%. You can also add\n      the <code>MaxLabels</code> parameter to limit the number of labels returned. </p>\n         <note>\n            <p>If the object detected is a person, the operation doesn't provide the same facial\n        details that the <a>DetectFaces</a> operation provides.</p>\n         </note>\n         <p>This is a stateless API operation. That is, the operation does not persist any\n      data.</p>\n         <p>This operation requires permissions to perform the\n        <code>rekognition:DetectLabels</code> action. </p>\n\n    \n    \n      "
    },
    "DeleteFaces": {
      "name": "DeleteFaces",
      "input": {
        "type": "structure",
        "members": {
          "CollectionId": {
            "type": "string",
            "pattern": "[a-zA-Z0-9_.\\-]+",
            "zonbookDocumentation": "\n         <simpara>Collection from which to remove the specific faces.</simpara>\n      ",
            "documentation": "\n         <p>Collection from which to remove the specific faces.</p>\n      ",
            "required": true,
            "shape_name": "CollectionId",
            "min_length": 1,
            "max_length": 255
          },
          "FaceIds": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of face IDs to delete.</simpara>\n      ",
            "documentation": "\n         <p>An array of face IDs to delete.</p>\n      ",
            "required": true,
            "shape_name": "FaceIdList",
            "min_length": 1,
            "max_length": 4096,
            "members": {
              "type": "string",
              "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
              "shape_name": "FaceId",
              "documentation": null
            }
          }
        },
        "shape_name": "DeleteFacesRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "DeletedFaces": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of strings (face IDs) of the faces that were deleted.</simpara>\n      ",
            "documentation": "\n         <p>An array of strings (face IDs) of the faces that were deleted.</p>\n      ",
            "shape_name": "FaceIdList",
            "min_length": 1,
            "max_length": 4096,
            "members": {
              "type": "string",
              "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
              "shape_name": "FaceId",
              "documentation": null
            }
          }
        },
        "shape_name": "DeleteFacesResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The collection specified in the request cannot be found.</simpara>\n      ",
          "documentation": "\n         <p>The collection specified in the request cannot be found.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        }
      ],
      "documentation": "\n         <p>Deletes faces from a collection. You specify a collection ID and an array of face IDs\n      to remove from the collection.</p>\n         <p>This operation requires permissions to perform the <code>rekognition:DeleteFaces</code>\n      action.</p>\n    \n      "
    },
    "ListFaces": {
      "name": "ListFaces",
      "input": {
        "type": "structure",
        "members": {
          "CollectionId": {
            "type": "string",
            "pattern": "[a-zA-Z0-9_.\\-]+",
            "zonbookDocumentation": "\n         <simpara>ID of the collection from which to list the faces.</simpara>\n      ",
            "documentation": "\n         <p>ID of the collection from which to list the faces.</p>\n      ",
            "required": true,
            "shape_name": "CollectionId",
            "min_length": 1,
            "max_length": 255
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>If the previous response was incomplete (because there is more data to retrieve),\n      Amazon Rekognition returns a pagination token in the response. You can use this pagination token to\n      retrieve the next set of faces.</simpara>\n      ",
            "documentation": "\n         <p>If the previous response was incomplete (because there is more data to retrieve),\n      Amazon Rekognition returns a pagination token in the response. You can use this pagination token to\n      retrieve the next set of faces.</p>\n      ",
            "shape_name": "PaginationToken",
            "max_length": 255
          },
          "MaxResults": {
            "type": "integer",
            "zonbookDocumentation": "\n         <simpara>Maximum number of faces to return.</simpara>\n      ",
            "documentation": "\n         <p>Maximum number of faces to return.</p>\n      ",
            "shape_name": "PageSize",
            "min_length": 0,
            "max_length": 4096
          }
        },
        "shape_name": "ListFacesRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Faces": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of <code>Face</code> objects. </simpara>\n      ",
            "documentation": "\n         <p>An array of <code>Face</code> objects. </p>\n      ",
            "shape_name": "FaceList",
            "members": {
              "type": "structure",
              "members": {
                "FaceId": {
                  "type": "string",
                  "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
                  "zonbookDocumentation": "\n         <simpara>Unique identifier that Amazon Rekognition assigns to the face.</simpara>\n      ",
                  "documentation": "\n         <p>Unique identifier that Amazon Rekognition assigns to the face.</p>\n      ",
                  "shape_name": "FaceId"
                },
                "BoundingBox": {
                  "type": "structure",
                  "members": {
                    "Width": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Width of the bounding box as a ratio of the overall image width.</simpara>\n      ",
                      "documentation": "\n         <p>Width of the bounding box as a ratio of the overall image width.</p>\n      ",
                      "shape_name": "Float"
                    },
                    "Height": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Height of the bounding box as a ratio of the overall image height.</simpara>\n      ",
                      "documentation": "\n         <p>Height of the bounding box as a ratio of the overall image height.</p>\n      ",
                      "shape_name": "Float"
                    },
                    "Left": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Left coordinate of the bounding box as a ratio of overall image width.</simpara>\n      ",
                      "documentation": "\n         <p>Left coordinate of the bounding box as a ratio of overall image width.</p>\n      ",
                      "shape_name": "Float"
                    },
                    "Top": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Top coordinate of the bounding box as a ratio of overall image height.</simpara>\n      ",
                      "documentation": "\n         <p>Top coordinate of the bounding box as a ratio of overall image height.</p>\n      ",
                      "shape_name": "Float"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Bounding box of the face.</simpara>\n      ",
                  "documentation": "\n         <p>Bounding box of the face.</p>\n      ",
                  "shape_name": "BoundingBox"
                },
                "ImageId": {
                  "type": "string",
                  "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
                  "zonbookDocumentation": "\n         <simpara>Unique identifier that Amazon Rekognition assigns to the input image.</simpara>\n      ",
                  "documentation": "\n         <p>Unique identifier that Amazon Rekognition assigns to the input image.</p>\n      ",
                  "shape_name": "ImageId"
                },
                "ExternalImageId": {
                  "type": "string",
                  "pattern": "[a-zA-Z0-9_.\\-:]+",
                  "zonbookDocumentation": "\n         <simpara>Identifier that you assign to all the faces in the input image.</simpara>\n      ",
                  "documentation": "\n         <p>Identifier that you assign to all the faces in the input image.</p>\n      ",
                  "shape_name": "ExternalImageId",
                  "min_length": 1,
                  "max_length": 255
                },
                "Confidence": {
                  "type": "float",
                  "zonbookDocumentation": "\n         <simpara>Confidence level that the bounding box contains a face (and not a different object such\n      as a tree).</simpara>\n      ",
                  "documentation": "\n         <p>Confidence level that the bounding box contains a face (and not a different object such\n      as a tree).</p>\n      ",
                  "shape_name": "Percent",
                  "min_length": 0,
                  "max_length": 100
                }
              },
              "zonbookDocumentation": "\n         <simpara>Describes the face properties such as the bounding box, face ID, image ID of the input\n      image, and external image ID that you assigned. </simpara>\n      ",
              "documentation": "\n         <p>Describes the face properties such as the bounding box, face ID, image ID of the input\n      image, and external image ID that you assigned. </p>\n      ",
              "shape_name": "Face"
            }
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>If the response is truncated, Amazon Rekognition returns this token that you can use in the\n      subsequent request to retrieve the next set of faces.</simpara>\n      ",
            "documentation": "\n         <p>If the response is truncated, Amazon Rekognition returns this token that you can use in the\n      subsequent request to retrieve the next set of faces.</p>\n      ",
            "shape_name": "String"
          },
          "FaceModelVersion": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>Version number of the face detection model associated with the input collection (<code>CollectionId</code>).</simpara>\n      ",
            "documentation": "\n         <p>Version number of the face detection model associated with the input collection (<code>CollectionId</code>).</p>\n      ",
            "shape_name": "String"
          }
        },
        "shape_name": "ListFacesResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Pagination token in the request is not valid.</simpara>\n      ",
          "documentation": "\n         <p>Pagination token in the request is not valid.</p>\n      ",
          "shape_name": "InvalidPaginationTokenException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The collection specified in the request cannot be found.</simpara>\n      ",
          "documentation": "\n         <p>The collection specified in the request cannot be found.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        }
      ],
      "documentation": "\n\n    \n         <p>Returns metadata for faces in the specified collection.\n      This metadata includes information such as the bounding box coordinates, the confidence\n      (that the bounding box contains a face), and face ID. For an example, see Listing Faces in a Collection\n      in the Amazon Rekognition Developer Guide.</p>\n    \n    \n         <p>This operation requires permissions to perform the\n      <code>rekognition:ListFaces</code> action.</p>\n      \n      "
    },
    "ListFacesInternal": {
      "name": "ListFacesInternal",
      "input": {
        "type": "structure",
        "members": {
          "CollectionId": {
            "type": "string",
            "pattern": "[a-zA-Z0-9_.\\-]+",
            "required": true,
            "shape_name": "CollectionId",
            "documentation": null,
            "min_length": 1,
            "max_length": 255
          },
          "PersonId": {
            "type": "string",
            "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
            "shape_name": "PersonId",
            "documentation": null
          },
          "NextToken": {
            "type": "string",
            "shape_name": "PaginationToken",
            "documentation": null,
            "max_length": 255
          },
          "MaxResults": {
            "type": "integer",
            "shape_name": "PageSize",
            "documentation": null,
            "min_length": 0,
            "max_length": 4096
          }
        },
        "shape_name": "ListFacesInternalRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Faces": {
            "type": "list",
            "internalonly": true,
            "shape_name": "FaceInternalList",
            "documentation": null,
            "members": {
              "type": "structure",
              "members": {
                "FaceId": {
                  "type": "string",
                  "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
                  "shape_name": "FaceId",
                  "documentation": null
                },
                "BoundingBox": {
                  "type": "structure",
                  "members": {
                    "Width": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Width of the bounding box as a ratio of the overall image width.</simpara>\n      ",
                      "documentation": "\n         <p>Width of the bounding box as a ratio of the overall image width.</p>\n      ",
                      "shape_name": "Float"
                    },
                    "Height": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Height of the bounding box as a ratio of the overall image height.</simpara>\n      ",
                      "documentation": "\n         <p>Height of the bounding box as a ratio of the overall image height.</p>\n      ",
                      "shape_name": "Float"
                    },
                    "Left": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Left coordinate of the bounding box as a ratio of overall image width.</simpara>\n      ",
                      "documentation": "\n         <p>Left coordinate of the bounding box as a ratio of overall image width.</p>\n      ",
                      "shape_name": "Float"
                    },
                    "Top": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Top coordinate of the bounding box as a ratio of overall image height.</simpara>\n      ",
                      "documentation": "\n         <p>Top coordinate of the bounding box as a ratio of overall image height.</p>\n      ",
                      "shape_name": "Float"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Identifies the bounding box around the face or text. The <code>left</code>\n      (x-coordinate) and <code>top</code> (y-coordinate) are coordinates representing the top and\n      left sides of the bounding box. Note that the upper-left corner of the image is the origin\n      (0,0). </simpara>\n         <simpara>The <code>top</code> and <code>left</code> values returned are ratios of the overall\n      image size. For example, if the input image is 700x200 pixels, and the top-left coordinate of\n      the bounding box is 350x50 pixels, the API returns a <code>left</code> value of 0.5 (350/700)\n      and a <code>top</code> value of 0.25 (50/200).</simpara>\n         <simpara>The <code>width</code> and <code>height</code> values represent the dimensions of the\n      bounding box as a ratio of the overall image dimension. For example, if the input image is\n      700x200 pixels, and the bounding box width is 70 pixels, the width returned is 0.1. </simpara>\n         <note>\n            <simpara> The bounding box coordinates can have negative values. For example, if Amazon Rekognition is\n        able to detect a face that is at the image edge and is only partially visible, the service\n        can return coordinates that are outside the image bounds and, depending on the image edge,\n        you might get negative values or values greater than 1 for the <code>left</code> or\n          <code>top</code> values. </simpara>\n         </note>\n      ",
                  "documentation": "\n         <p>Identifies the bounding box around the face or text. The <code>left</code>\n      (x-coordinate) and <code>top</code> (y-coordinate) are coordinates representing the top and\n      left sides of the bounding box. Note that the upper-left corner of the image is the origin\n      (0,0). </p>\n         <p>The <code>top</code> and <code>left</code> values returned are ratios of the overall\n      image size. For example, if the input image is 700x200 pixels, and the top-left coordinate of\n      the bounding box is 350x50 pixels, the API returns a <code>left</code> value of 0.5 (350/700)\n      and a <code>top</code> value of 0.25 (50/200).</p>\n         <p>The <code>width</code> and <code>height</code> values represent the dimensions of the\n      bounding box as a ratio of the overall image dimension. For example, if the input image is\n      700x200 pixels, and the bounding box width is 70 pixels, the width returned is 0.1. </p>\n         <note>\n            <p> The bounding box coordinates can have negative values. For example, if Amazon Rekognition is\n        able to detect a face that is at the image edge and is only partially visible, the service\n        can return coordinates that are outside the image bounds and, depending on the image edge,\n        you might get negative values or values greater than 1 for the <code>left</code> or\n          <code>top</code> values. </p>\n         </note>\n      ",
                  "shape_name": "BoundingBox"
                },
                "ImageId": {
                  "type": "string",
                  "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
                  "shape_name": "ImageId",
                  "documentation": null
                },
                "ExternalImageId": {
                  "type": "string",
                  "pattern": "[a-zA-Z0-9_.\\-:]+",
                  "shape_name": "ExternalImageId",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 255
                },
                "PersonId": {
                  "type": "string",
                  "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
                  "shape_name": "PersonId",
                  "documentation": null
                },
                "Confidence": {
                  "type": "float",
                  "shape_name": "Percent",
                  "documentation": null,
                  "min_length": 0,
                  "max_length": 100
                },
                "DistanceToCentroid": {
                  "type": "float",
                  "shape_name": "Float",
                  "documentation": null
                }
              },
              "internalonly": true,
              "shape_name": "FaceInternal",
              "documentation": null
            }
          },
          "NextToken": {
            "type": "string",
            "shape_name": "PaginationToken",
            "documentation": null,
            "max_length": 255
          },
          "FaceModelVersion": {
            "type": "string",
            "shape_name": "String",
            "documentation": null
          }
        },
        "shape_name": "ListFacesInternalResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Pagination token in the request is not valid.</simpara>\n      ",
          "documentation": "\n         <p>Pagination token in the request is not valid.</p>\n      ",
          "shape_name": "InvalidPaginationTokenException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The collection specified in the request cannot be found.</simpara>\n      ",
          "documentation": "\n         <p>The collection specified in the request cannot be found.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        }
      ],
      "documentation": null
    },
    "ListPersons": {
      "name": "ListPersons",
      "input": {
        "type": "structure",
        "members": {
          "CollectionId": {
            "type": "string",
            "pattern": "[a-zA-Z0-9_.\\-]+",
            "required": true,
            "shape_name": "CollectionId",
            "documentation": null,
            "min_length": 1,
            "max_length": 255
          },
          "NextToken": {
            "type": "string",
            "shape_name": "PaginationToken",
            "documentation": null,
            "max_length": 255
          },
          "MaxResults": {
            "type": "integer",
            "shape_name": "PageSize",
            "documentation": null,
            "min_length": 0,
            "max_length": 4096
          }
        },
        "shape_name": "ListPersonsRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Persons": {
            "type": "list",
            "internalonly": true,
            "shape_name": "PersonList",
            "documentation": null,
            "members": {
              "type": "structure",
              "members": {
                "PersonId": {
                  "type": "string",
                  "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
                  "shape_name": "PersonId",
                  "documentation": null
                },
                "ExternalPersonId": {
                  "type": "string",
                  "pattern": "[a-zA-Z0-9_.\\-:]+",
                  "internalonly": true,
                  "shape_name": "ExternalPersonId",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 255
                }
              },
              "zonbookDocumentation": "\n         <simpara>Provides person information to which the face matches. </simpara>\n      ",
              "documentation": "\n         <p>Provides person information to which the face matches. </p>\n      ",
              "internalonly": true,
              "shape_name": "Person"
            }
          },
          "NextToken": {
            "type": "string",
            "shape_name": "PaginationToken",
            "documentation": null,
            "max_length": 255
          }
        },
        "shape_name": "ListPersonsResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Pagination token in the request is not valid.</simpara>\n      ",
          "documentation": "\n         <p>Pagination token in the request is not valid.</p>\n      ",
          "shape_name": "InvalidPaginationTokenException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The collection specified in the request cannot be found.</simpara>\n      ",
          "documentation": "\n         <p>The collection specified in the request cannot be found.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        }
      ],
      "documentation": null
    },
    "ListCollections": {
      "name": "ListCollections",
      "input": {
        "type": "structure",
        "members": {
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>Pagination token from the previous response.</simpara>\n      ",
            "documentation": "\n         <p>Pagination token from the previous response.</p>\n      ",
            "shape_name": "PaginationToken",
            "max_length": 255
          },
          "MaxResults": {
            "type": "integer",
            "zonbookDocumentation": "\n         <simpara>Maximum number of collection IDs to return. </simpara>\n      ",
            "documentation": "\n         <p>Maximum number of collection IDs to return. </p>\n      ",
            "shape_name": "PageSize",
            "min_length": 0,
            "max_length": 4096
          }
        },
        "shape_name": "ListCollectionsRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "CollectionIds": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of collection IDs.</simpara>\n      ",
            "documentation": "\n         <p>An array of collection IDs.</p>\n      ",
            "shape_name": "CollectionIdList",
            "members": {
              "type": "string",
              "pattern": "[a-zA-Z0-9_.\\-]+",
              "shape_name": "CollectionId",
              "documentation": null,
              "min_length": 1,
              "max_length": 255
            }
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>If the result is truncated, the response provides a <code>NextToken</code> that you can\n      use in the subsequent request to fetch the next set of collection IDs.</simpara>\n      ",
            "documentation": "\n         <p>If the result is truncated, the response provides a <code>NextToken</code> that you can\n      use in the subsequent request to fetch the next set of collection IDs.</p>\n      ",
            "shape_name": "PaginationToken",
            "max_length": 255
          },
          "FaceModelVersions": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>Version numbers of the face detection models associated with the collections in the array <code>CollectionIds</code>.\n    For example, the value of <code>FaceModelVersions[2]</code> is the version number for the face detection model used\n      by the collection in <code>CollectionId[2]</code>.</simpara>\n      ",
            "documentation": "\n         <p>Version numbers of the face detection models associated with the collections in the array <code>CollectionIds</code>.\n    For example, the value of <code>FaceModelVersions[2]</code> is the version number for the face detection model used\n      by the collection in <code>CollectionId[2]</code>.</p>\n      ",
            "shape_name": "FaceModelVersionList",
            "members": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          }
        },
        "shape_name": "ListCollectionsResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Pagination token in the request is not valid.</simpara>\n      ",
          "documentation": "\n         <p>Pagination token in the request is not valid.</p>\n      ",
          "shape_name": "InvalidPaginationTokenException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The collection specified in the request cannot be found.</simpara>\n      ",
          "documentation": "\n         <p>The collection specified in the request cannot be found.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        }
      ],
      "documentation": "\n\n         <p>Returns list of collection IDs in your account.\n    If the result is truncated, the response also provides a <code>NextToken</code>\n    that you can use in the subsequent request to fetch the next set of collection IDs.</p>\n    \n         <p>For an example, see Listing Collections in the Amazon Rekognition Developer Guide.</p>\n         <p>This operation requires permissions to perform the <code>rekognition:ListCollections</code> action.</p>\n\n    \n      "
    },
    "CompareFaces": {
      "name": "CompareFaces",
      "input": {
        "type": "structure",
        "members": {
          "SourceImage": {
            "type": "structure",
            "members": {
              "Bytes": {
                "type": "blob",
                "zonbookDocumentation": "\n         <simpara>Blob of image bytes up to 5 MBs.</simpara>\n      ",
                "documentation": "\n         <p>Blob of image bytes up to 5 MBs.</p>\n      ",
                "shape_name": "ImageBlob",
                "min_length": 1,
                "max_length": 5242880
              },
              "S3Object": {
                "type": "structure",
                "members": {
                  "Bucket": {
                    "type": "string",
                    "pattern": "[0-9A-Za-z\\.\\-_]*",
                    "zonbookDocumentation": "\n         <simpara>Name of the S3 bucket.</simpara>\n      ",
                    "documentation": "\n         <p>Name of the S3 bucket.</p>\n      ",
                    "shape_name": "S3Bucket",
                    "min_length": 3,
                    "max_length": 255
                  },
                  "Name": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>S3 object key name.</simpara>\n      ",
                    "documentation": "\n         <p>S3 object key name.</p>\n      ",
                    "shape_name": "S3ObjectName",
                    "min_length": 1,
                    "max_length": 1024
                  },
                  "Version": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>If the bucket is versioning enabled, you can specify the object version. </simpara>\n      ",
                    "documentation": "\n         <p>If the bucket is versioning enabled, you can specify the object version. </p>\n      ",
                    "shape_name": "S3ObjectVersion",
                    "min_length": 1,
                    "max_length": 1024
                  }
                },
                "zonbookDocumentation": "\n         <simpara>Identifies an S3 object as the image source.</simpara>\n      ",
                "documentation": "\n         <p>Identifies an S3 object as the image source.</p>\n      ",
                "shape_name": "S3Object"
              }
            },
            "zonbookDocumentation": "\n\n         <simpara>The input image as base64-encoded bytes or an S3 object.\n      If you use the AWS CLI to call Amazon Rekognition operations,\n      passing base64-encoded image bytes is not supported. </simpara>\n\n      ",
            "documentation": "\n\n         <p>The input image as base64-encoded bytes or an S3 object.\n      If you use the AWS CLI to call Amazon Rekognition operations,\n      passing base64-encoded image bytes is not supported. </p>\n\n      ",
            "required": true,
            "shape_name": "Image"
          },
          "TargetImage": {
            "type": "structure",
            "members": {
              "Bytes": {
                "type": "blob",
                "zonbookDocumentation": "\n         <simpara>Blob of image bytes up to 5 MBs.</simpara>\n      ",
                "documentation": "\n         <p>Blob of image bytes up to 5 MBs.</p>\n      ",
                "shape_name": "ImageBlob",
                "min_length": 1,
                "max_length": 5242880
              },
              "S3Object": {
                "type": "structure",
                "members": {
                  "Bucket": {
                    "type": "string",
                    "pattern": "[0-9A-Za-z\\.\\-_]*",
                    "zonbookDocumentation": "\n         <simpara>Name of the S3 bucket.</simpara>\n      ",
                    "documentation": "\n         <p>Name of the S3 bucket.</p>\n      ",
                    "shape_name": "S3Bucket",
                    "min_length": 3,
                    "max_length": 255
                  },
                  "Name": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>S3 object key name.</simpara>\n      ",
                    "documentation": "\n         <p>S3 object key name.</p>\n      ",
                    "shape_name": "S3ObjectName",
                    "min_length": 1,
                    "max_length": 1024
                  },
                  "Version": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>If the bucket is versioning enabled, you can specify the object version. </simpara>\n      ",
                    "documentation": "\n         <p>If the bucket is versioning enabled, you can specify the object version. </p>\n      ",
                    "shape_name": "S3ObjectVersion",
                    "min_length": 1,
                    "max_length": 1024
                  }
                },
                "zonbookDocumentation": "\n         <simpara>Identifies an S3 object as the image source.</simpara>\n      ",
                "documentation": "\n         <p>Identifies an S3 object as the image source.</p>\n      ",
                "shape_name": "S3Object"
              }
            },
            "zonbookDocumentation": "\n\n         <simpara>The target image as base64-encoded bytes or an S3 object. If you use the AWS CLI to\n      call Amazon Rekognition operations, passing base64-encoded image bytes is not supported.\n    </simpara>\n\n      ",
            "documentation": "\n\n         <p>The target image as base64-encoded bytes or an S3 object. If you use the AWS CLI to\n      call Amazon Rekognition operations, passing base64-encoded image bytes is not supported.\n    </p>\n\n      ",
            "required": true,
            "shape_name": "Image"
          },
          "SimilarityThreshold": {
            "type": "float",
            "zonbookDocumentation": "\n         <simpara>The minimum level of confidence in the face matches that a match must meet to be\n      included in the <code>FaceMatches</code> array.</simpara>\n      ",
            "documentation": "\n         <p>The minimum level of confidence in the face matches that a match must meet to be\n      included in the <code>FaceMatches</code> array.</p>\n      ",
            "shape_name": "Percent",
            "min_length": 0,
            "max_length": 100
          }
        },
        "shape_name": "CompareFacesRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "SourceImageFace": {
            "type": "structure",
            "members": {
              "BoundingBox": {
                "type": "structure",
                "members": {
                  "Width": {
                    "type": "float",
                    "zonbookDocumentation": "\n         <simpara>Width of the bounding box as a ratio of the overall image width.</simpara>\n      ",
                    "documentation": "\n         <p>Width of the bounding box as a ratio of the overall image width.</p>\n      ",
                    "shape_name": "Float"
                  },
                  "Height": {
                    "type": "float",
                    "zonbookDocumentation": "\n         <simpara>Height of the bounding box as a ratio of the overall image height.</simpara>\n      ",
                    "documentation": "\n         <p>Height of the bounding box as a ratio of the overall image height.</p>\n      ",
                    "shape_name": "Float"
                  },
                  "Left": {
                    "type": "float",
                    "zonbookDocumentation": "\n         <simpara>Left coordinate of the bounding box as a ratio of overall image width.</simpara>\n      ",
                    "documentation": "\n         <p>Left coordinate of the bounding box as a ratio of overall image width.</p>\n      ",
                    "shape_name": "Float"
                  },
                  "Top": {
                    "type": "float",
                    "zonbookDocumentation": "\n         <simpara>Top coordinate of the bounding box as a ratio of overall image height.</simpara>\n      ",
                    "documentation": "\n         <p>Top coordinate of the bounding box as a ratio of overall image height.</p>\n      ",
                    "shape_name": "Float"
                  }
                },
                "zonbookDocumentation": "\n         <simpara>Bounding box of the face.</simpara>\n      ",
                "documentation": "\n         <p>Bounding box of the face.</p>\n      ",
                "shape_name": "BoundingBox"
              },
              "Confidence": {
                "type": "float",
                "zonbookDocumentation": "\n         <simpara>Confidence level that the selected bounding box contains a face.</simpara>\n      ",
                "documentation": "\n         <p>Confidence level that the selected bounding box contains a face.</p>\n      ",
                "shape_name": "Percent",
                "min_length": 0,
                "max_length": 100
              }
            },
            "zonbookDocumentation": "\n         <simpara>The face in the source image that was used for comparison.</simpara>\n      ",
            "documentation": "\n         <p>The face in the source image that was used for comparison.</p>\n      ",
            "shape_name": "ComparedSourceImageFace"
          },
          "FaceMatches": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of faces in the target image that match the source image face. Each\n        <code>CompareFacesMatch</code> object provides the bounding box, the confidence level that\n      the bounding box contains a face, and the similarity score for the face in the bounding box\n      and the face in the source image.</simpara>\n      ",
            "documentation": "\n         <p>An array of faces in the target image that match the source image face. Each\n        <code>CompareFacesMatch</code> object provides the bounding box, the confidence level that\n      the bounding box contains a face, and the similarity score for the face in the bounding box\n      and the face in the source image.</p>\n      ",
            "shape_name": "CompareFacesMatchList",
            "members": {
              "type": "structure",
              "members": {
                "Similarity": {
                  "type": "float",
                  "zonbookDocumentation": "\n         <simpara>Level of confidence that the faces match.</simpara>\n      ",
                  "documentation": "\n         <p>Level of confidence that the faces match.</p>\n      ",
                  "shape_name": "Percent",
                  "min_length": 0,
                  "max_length": 100
                },
                "Face": {
                  "type": "structure",
                  "members": {
                    "BoundingBox": {
                      "type": "structure",
                      "members": {
                        "Width": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Width of the bounding box as a ratio of the overall image width.</simpara>\n      ",
                          "documentation": "\n         <p>Width of the bounding box as a ratio of the overall image width.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Height": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Height of the bounding box as a ratio of the overall image height.</simpara>\n      ",
                          "documentation": "\n         <p>Height of the bounding box as a ratio of the overall image height.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Left": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Left coordinate of the bounding box as a ratio of overall image width.</simpara>\n      ",
                          "documentation": "\n         <p>Left coordinate of the bounding box as a ratio of overall image width.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Top": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Top coordinate of the bounding box as a ratio of overall image height.</simpara>\n      ",
                          "documentation": "\n         <p>Top coordinate of the bounding box as a ratio of overall image height.</p>\n      ",
                          "shape_name": "Float"
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Bounding box of the face.</simpara>\n      ",
                      "documentation": "\n         <p>Bounding box of the face.</p>\n      ",
                      "shape_name": "BoundingBox"
                    },
                    "Confidence": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Level of confidence that what the bounding box contains is a face.</simpara>\n      ",
                      "documentation": "\n         <p>Level of confidence that what the bounding box contains is a face.</p>\n      ",
                      "shape_name": "Percent",
                      "min_length": 0,
                      "max_length": 100
                    },
                    "Landmarks": {
                      "type": "list",
                      "zonbookDocumentation": "\n         <simpara>An array of facial landmarks.</simpara>\n      ",
                      "documentation": "\n         <p>An array of facial landmarks.</p>\n      ",
                      "shape_name": "Landmarks",
                      "members": {
                        "type": "structure",
                        "members": {
                          "Type": {
                            "type": "string",
                            "enum": [
                              "eyeLeft",
                              "eyeRight",
                              "nose",
                              "mouthLeft",
                              "mouthRight",
                              "leftEyeBrowLeft",
                              "leftEyeBrowRight",
                              "leftEyeBrowUp",
                              "rightEyeBrowLeft",
                              "rightEyeBrowRight",
                              "rightEyeBrowUp",
                              "leftEyeLeft",
                              "leftEyeRight",
                              "leftEyeUp",
                              "leftEyeDown",
                              "rightEyeLeft",
                              "rightEyeRight",
                              "rightEyeUp",
                              "rightEyeDown",
                              "noseLeft",
                              "noseRight",
                              "mouthUp",
                              "mouthDown",
                              "leftPupil",
                              "rightPupil"
                            ],
                            "zonbookDocumentation": "\n         <simpara>Type of the landmark.</simpara>\n      ",
                            "documentation": "\n         <p>Type of the landmark.</p>\n      ",
                            "shape_name": "LandmarkType"
                          },
                          "X": {
                            "type": "float",
                            "zonbookDocumentation": "\n         <simpara>x-coordinate from the top left of the landmark expressed as the ratio of the width of\n      the image. For example, if the images is 700x200 and the x-coordinate of the landmark is at\n      350 pixels, this value is 0.5. </simpara>\n      ",
                            "documentation": "\n         <p>x-coordinate from the top left of the landmark expressed as the ratio of the width of\n      the image. For example, if the images is 700x200 and the x-coordinate of the landmark is at\n      350 pixels, this value is 0.5. </p>\n      ",
                            "shape_name": "Float"
                          },
                          "Y": {
                            "type": "float",
                            "zonbookDocumentation": "\n         <simpara>y-coordinate from the top left of the landmark expressed as the ratio of the height of\n      the image. For example, if the images is 700x200 and the y-coordinate of the landmark is at\n      100 pixels, this value is 0.5.</simpara>\n      ",
                            "documentation": "\n         <p>y-coordinate from the top left of the landmark expressed as the ratio of the height of\n      the image. For example, if the images is 700x200 and the y-coordinate of the landmark is at\n      100 pixels, this value is 0.5.</p>\n      ",
                            "shape_name": "Float"
                          }
                        },
                        "zonbookDocumentation": "\n         <simpara>Indicates the location of the landmark on the face.</simpara>\n      ",
                        "documentation": "\n         <p>Indicates the location of the landmark on the face.</p>\n      ",
                        "shape_name": "Landmark"
                      }
                    },
                    "Pose": {
                      "type": "structure",
                      "members": {
                        "Roll": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Value representing the face rotation on the roll axis.</simpara>\n      ",
                          "documentation": "\n         <p>Value representing the face rotation on the roll axis.</p>\n      ",
                          "shape_name": "Degree",
                          "min_length": -180,
                          "max_length": 180
                        },
                        "Yaw": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Value representing the face rotation on the yaw axis.</simpara>\n      ",
                          "documentation": "\n         <p>Value representing the face rotation on the yaw axis.</p>\n      ",
                          "shape_name": "Degree",
                          "min_length": -180,
                          "max_length": 180
                        },
                        "Pitch": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Value representing the face rotation on the pitch axis.</simpara>\n      ",
                          "documentation": "\n         <p>Value representing the face rotation on the pitch axis.</p>\n      ",
                          "shape_name": "Degree",
                          "min_length": -180,
                          "max_length": 180
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Indicates the pose of the face as determined by its pitch, roll, and yaw.</simpara>\n      ",
                      "documentation": "\n         <p>Indicates the pose of the face as determined by its pitch, roll, and yaw.</p>\n      ",
                      "shape_name": "Pose"
                    },
                    "Quality": {
                      "type": "structure",
                      "members": {
                        "Brightness": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Value representing brightness of the face. The service returns a value between 0 and\n      100 (inclusive). A higher value indicates a brighter face image.</simpara>\n      ",
                          "documentation": "\n         <p>Value representing brightness of the face. The service returns a value between 0 and\n      100 (inclusive). A higher value indicates a brighter face image.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Sharpness": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Value representing sharpness of the face. The service returns a value between 0 and 100\n      (inclusive). A higher value indicates a sharper face image.</simpara>\n      ",
                          "documentation": "\n         <p>Value representing sharpness of the face. The service returns a value between 0 and 100\n      (inclusive). A higher value indicates a sharper face image.</p>\n      ",
                          "shape_name": "Float"
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Identifies face image brightness and sharpness. </simpara>\n      ",
                      "documentation": "\n         <p>Identifies face image brightness and sharpness. </p>\n      ",
                      "shape_name": "ImageQuality"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Provides face metadata (bounding box and confidence that the bounding box actually\n      contains a face).</simpara>\n      ",
                  "documentation": "\n         <p>Provides face metadata (bounding box and confidence that the bounding box actually\n      contains a face).</p>\n      ",
                  "shape_name": "ComparedFace"
                }
              },
              "zonbookDocumentation": "\n\n         <simpara>Provides information about a face in a target image that matches the source image face\n      analysed by <code>CompareFaces</code>. The <code>Face</code> property contains the bounding\n      box of the face in the target image. The <code>Similarity</code> property is the confidence\n      that the source image face matches the face in the bounding box.</simpara>\n\n      ",
              "documentation": "\n\n         <p>Provides information about a face in a target image that matches the source image face\n      analysed by <code>CompareFaces</code>. The <code>Face</code> property contains the bounding\n      box of the face in the target image. The <code>Similarity</code> property is the confidence\n      that the source image face matches the face in the bounding box.</p>\n\n      ",
              "shape_name": "CompareFacesMatch"
            }
          },
          "UnmatchedFaces": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of faces in the target image that did not match the source image\n      face.</simpara>\n      ",
            "documentation": "\n         <p>An array of faces in the target image that did not match the source image\n      face.</p>\n      ",
            "shape_name": "CompareFacesUnmatchList",
            "members": {
              "type": "structure",
              "members": {
                "BoundingBox": {
                  "type": "structure",
                  "members": {
                    "Width": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Width of the bounding box as a ratio of the overall image width.</simpara>\n      ",
                      "documentation": "\n         <p>Width of the bounding box as a ratio of the overall image width.</p>\n      ",
                      "shape_name": "Float"
                    },
                    "Height": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Height of the bounding box as a ratio of the overall image height.</simpara>\n      ",
                      "documentation": "\n         <p>Height of the bounding box as a ratio of the overall image height.</p>\n      ",
                      "shape_name": "Float"
                    },
                    "Left": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Left coordinate of the bounding box as a ratio of overall image width.</simpara>\n      ",
                      "documentation": "\n         <p>Left coordinate of the bounding box as a ratio of overall image width.</p>\n      ",
                      "shape_name": "Float"
                    },
                    "Top": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Top coordinate of the bounding box as a ratio of overall image height.</simpara>\n      ",
                      "documentation": "\n         <p>Top coordinate of the bounding box as a ratio of overall image height.</p>\n      ",
                      "shape_name": "Float"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Bounding box of the face.</simpara>\n      ",
                  "documentation": "\n         <p>Bounding box of the face.</p>\n      ",
                  "shape_name": "BoundingBox"
                },
                "Confidence": {
                  "type": "float",
                  "zonbookDocumentation": "\n         <simpara>Level of confidence that what the bounding box contains is a face.</simpara>\n      ",
                  "documentation": "\n         <p>Level of confidence that what the bounding box contains is a face.</p>\n      ",
                  "shape_name": "Percent",
                  "min_length": 0,
                  "max_length": 100
                },
                "Landmarks": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <simpara>An array of facial landmarks.</simpara>\n      ",
                  "documentation": "\n         <p>An array of facial landmarks.</p>\n      ",
                  "shape_name": "Landmarks",
                  "members": {
                    "type": "structure",
                    "members": {
                      "Type": {
                        "type": "string",
                        "enum": [
                          "eyeLeft",
                          "eyeRight",
                          "nose",
                          "mouthLeft",
                          "mouthRight",
                          "leftEyeBrowLeft",
                          "leftEyeBrowRight",
                          "leftEyeBrowUp",
                          "rightEyeBrowLeft",
                          "rightEyeBrowRight",
                          "rightEyeBrowUp",
                          "leftEyeLeft",
                          "leftEyeRight",
                          "leftEyeUp",
                          "leftEyeDown",
                          "rightEyeLeft",
                          "rightEyeRight",
                          "rightEyeUp",
                          "rightEyeDown",
                          "noseLeft",
                          "noseRight",
                          "mouthUp",
                          "mouthDown",
                          "leftPupil",
                          "rightPupil"
                        ],
                        "zonbookDocumentation": "\n         <simpara>Type of the landmark.</simpara>\n      ",
                        "documentation": "\n         <p>Type of the landmark.</p>\n      ",
                        "shape_name": "LandmarkType"
                      },
                      "X": {
                        "type": "float",
                        "zonbookDocumentation": "\n         <simpara>x-coordinate from the top left of the landmark expressed as the ratio of the width of\n      the image. For example, if the images is 700x200 and the x-coordinate of the landmark is at\n      350 pixels, this value is 0.5. </simpara>\n      ",
                        "documentation": "\n         <p>x-coordinate from the top left of the landmark expressed as the ratio of the width of\n      the image. For example, if the images is 700x200 and the x-coordinate of the landmark is at\n      350 pixels, this value is 0.5. </p>\n      ",
                        "shape_name": "Float"
                      },
                      "Y": {
                        "type": "float",
                        "zonbookDocumentation": "\n         <simpara>y-coordinate from the top left of the landmark expressed as the ratio of the height of\n      the image. For example, if the images is 700x200 and the y-coordinate of the landmark is at\n      100 pixels, this value is 0.5.</simpara>\n      ",
                        "documentation": "\n         <p>y-coordinate from the top left of the landmark expressed as the ratio of the height of\n      the image. For example, if the images is 700x200 and the y-coordinate of the landmark is at\n      100 pixels, this value is 0.5.</p>\n      ",
                        "shape_name": "Float"
                      }
                    },
                    "zonbookDocumentation": "\n         <simpara>Indicates the location of the landmark on the face.</simpara>\n      ",
                    "documentation": "\n         <p>Indicates the location of the landmark on the face.</p>\n      ",
                    "shape_name": "Landmark"
                  }
                },
                "Pose": {
                  "type": "structure",
                  "members": {
                    "Roll": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Value representing the face rotation on the roll axis.</simpara>\n      ",
                      "documentation": "\n         <p>Value representing the face rotation on the roll axis.</p>\n      ",
                      "shape_name": "Degree",
                      "min_length": -180,
                      "max_length": 180
                    },
                    "Yaw": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Value representing the face rotation on the yaw axis.</simpara>\n      ",
                      "documentation": "\n         <p>Value representing the face rotation on the yaw axis.</p>\n      ",
                      "shape_name": "Degree",
                      "min_length": -180,
                      "max_length": 180
                    },
                    "Pitch": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Value representing the face rotation on the pitch axis.</simpara>\n      ",
                      "documentation": "\n         <p>Value representing the face rotation on the pitch axis.</p>\n      ",
                      "shape_name": "Degree",
                      "min_length": -180,
                      "max_length": 180
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Indicates the pose of the face as determined by its pitch, roll, and yaw.</simpara>\n      ",
                  "documentation": "\n         <p>Indicates the pose of the face as determined by its pitch, roll, and yaw.</p>\n      ",
                  "shape_name": "Pose"
                },
                "Quality": {
                  "type": "structure",
                  "members": {
                    "Brightness": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Value representing brightness of the face. The service returns a value between 0 and\n      100 (inclusive). A higher value indicates a brighter face image.</simpara>\n      ",
                      "documentation": "\n         <p>Value representing brightness of the face. The service returns a value between 0 and\n      100 (inclusive). A higher value indicates a brighter face image.</p>\n      ",
                      "shape_name": "Float"
                    },
                    "Sharpness": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Value representing sharpness of the face. The service returns a value between 0 and 100\n      (inclusive). A higher value indicates a sharper face image.</simpara>\n      ",
                      "documentation": "\n         <p>Value representing sharpness of the face. The service returns a value between 0 and 100\n      (inclusive). A higher value indicates a sharper face image.</p>\n      ",
                      "shape_name": "Float"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Identifies face image brightness and sharpness. </simpara>\n      ",
                  "documentation": "\n         <p>Identifies face image brightness and sharpness. </p>\n      ",
                  "shape_name": "ImageQuality"
                }
              },
              "zonbookDocumentation": "\n\n         <simpara>Provides face metadata for target image faces that are analysed by\n        <code>CompareFaces</code> and <code>RecognizeCelebrities</code>.</simpara>\n\n      ",
              "documentation": "\n\n         <p>Provides face metadata for target image faces that are analysed by\n        <code>CompareFaces</code> and <code>RecognizeCelebrities</code>.</p>\n\n      ",
              "shape_name": "ComparedFace"
            }
          },
          "SourceImageOrientationCorrection": {
            "type": "string",
            "enum": [
              "ROTATE_0",
              "ROTATE_90",
              "ROTATE_180",
              "ROTATE_270"
            ],
            "zonbookDocumentation": "\n         <simpara> The orientation of the source image (counterclockwise direction). If your application\n      displays the source image, you can use this value to correct image orientation. The bounding\n      box coordinates returned in <code>SourceImageFace</code> represent the location of the face\n      before the image orientation is corrected. </simpara>\n         <note>\n            <simpara>If the source image is in .jpeg format, it might contain exchangeable image (Exif)\n        metadata that includes the image's orientation. If the Exif metadata for the source image\n        populates the orientation field, the value of <code>OrientationCorrection</code> is null and\n        the <code>SourceImageFace</code> bounding box coordinates represent the location of the face\n        after Exif metadata is used to correct the orientation. Images in .png format don't contain\n        Exif metadata.</simpara>\n         </note>\n      ",
            "documentation": "\n         <p> The orientation of the source image (counterclockwise direction). If your application\n      displays the source image, you can use this value to correct image orientation. The bounding\n      box coordinates returned in <code>SourceImageFace</code> represent the location of the face\n      before the image orientation is corrected. </p>\n         <note>\n            <p>If the source image is in .jpeg format, it might contain exchangeable image (Exif)\n        metadata that includes the image's orientation. If the Exif metadata for the source image\n        populates the orientation field, the value of <code>OrientationCorrection</code> is null and\n        the <code>SourceImageFace</code> bounding box coordinates represent the location of the face\n        after Exif metadata is used to correct the orientation. Images in .png format don't contain\n        Exif metadata.</p>\n         </note>\n      ",
            "shape_name": "OrientationCorrection"
          },
          "TargetImageOrientationCorrection": {
            "type": "string",
            "enum": [
              "ROTATE_0",
              "ROTATE_90",
              "ROTATE_180",
              "ROTATE_270"
            ],
            "zonbookDocumentation": "\n         <simpara> The orientation of the target image (in counterclockwise direction). If your\n      application displays the target image, you can use this value to correct the orientation of\n      the image. The bounding box coordinates returned in <code>FaceMatches</code> and\n        <code>UnmatchedFaces</code> represent face locations before the image orientation is\n      corrected. </simpara>\n         <note>\n            <simpara>If the target image is in .jpg format, it might contain Exif metadata that includes\n        the orientation of the image. If the Exif metadata for the target image populates the\n        orientation field, the value of <code>OrientationCorrection</code> is null and the bounding\n        box coordinates in <code>FaceMatches</code> and <code>UnmatchedFaces</code> represent the\n        location of the face after Exif metadata is used to correct the orientation. Images in .png\n        format don't contain Exif metadata.</simpara>\n         </note>\n      ",
            "documentation": "\n         <p> The orientation of the target image (in counterclockwise direction). If your\n      application displays the target image, you can use this value to correct the orientation of\n      the image. The bounding box coordinates returned in <code>FaceMatches</code> and\n        <code>UnmatchedFaces</code> represent face locations before the image orientation is\n      corrected. </p>\n         <note>\n            <p>If the target image is in .jpg format, it might contain Exif metadata that includes\n        the orientation of the image. If the Exif metadata for the target image populates the\n        orientation field, the value of <code>OrientationCorrection</code> is null and the bounding\n        box coordinates in <code>FaceMatches</code> and <code>UnmatchedFaces</code> represent the\n        location of the face after Exif metadata is used to correct the orientation. Images in .png\n        format don't contain Exif metadata.</p>\n         </note>\n      ",
            "shape_name": "OrientationCorrection"
          }
        },
        "shape_name": "CompareFacesResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is unable to access the S3 object specified in the request.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is unable to access the S3 object specified in the request.</p>\n      ",
          "shape_name": "InvalidS3ObjectException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The input image size exceeds the allowed limit. For more information, see <xref linkend=\"limits\"/>. </simpara>\n    \n      ",
          "documentation": "\n    \n         <p>The input image size exceeds the allowed limit. For more information, see \n      Limits in Amazon Rekognition in the Amazon Rekognition Developer Guide. </p>\n      ",
          "shape_name": "ImageTooLargeException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The provided image format is not supported. </simpara>\n      ",
          "documentation": "\n         <p>The provided image format is not supported. </p>\n      ",
          "shape_name": "InvalidImageFormatException"
        }
      ],
      "documentation": "\n         <p>Compares a face in the <i>source</i> input image with\n      each of the 100 largest faces detected in the <i>target</i> input image.\n    </p>\n         <note>\n            <p> If the source image contains multiple faces, the service detects the largest face\n        and compares it with each face detected in the target image. </p>\n         </note>\n\n\n         <p>You pass the input and target images either as base64-encoded image bytes or as a\n      references to images in an Amazon S3 bucket. If you use the Amazon CLI to call Amazon\n      Rekognition operations, passing image bytes is not supported. The image must be either a PNG\n      or JPEG formatted file. </p>\n         <p>In response, the operation returns an array of face matches ordered by similarity score\n      in descending order. For each face match, the response provides a bounding box of the face,\n      facial landmarks, pose details (pitch, role, and yaw), quality (brightness and sharpness), and\n      confidence value (indicating the level of confidence that the bounding box contains a face).\n      The response also provides a similarity score, which indicates how closely the faces match. </p>\n\n         <note>\n            <p>By default, only faces with a similarity score of greater than or equal to 80% are\n        returned in the response. You can change this value by specifying the\n          <code>SimilarityThreshold</code> parameter.</p>\n         </note>\n\n         <p>\n            <code>CompareFaces</code> also returns an array of faces that don't match the source image. \n      For each face, it returns a bounding box, confidence value, landmarks, pose details, and quality.\n    The response also returns information about the face in the source image, including the bounding box\n      of the face and confidence value.</p>\n         <p>If the image doesn't contain Exif metadata, <code>CompareFaces</code> returns orientation information for the\n        source and target images. Use these values to display the images with the correct image orientation.</p>\n         <p>If no faces are detected in the source or target images, <code>CompareFaces</code> returns an \n    <code>InvalidParameterException</code> error. </p>\n\n         <note>\n            <p> This is a stateless API operation. That is, data returned by this operation doesn't persist.</p>\n         </note>\n\n    \n         <p>For an example, see Comparing Faces in Images in the Amazon Rekognition Developer Guide.</p>\n         <p>This operation requires permissions to perform the <code>rekognition:CompareFaces</code>\n      action.</p>\n      \n      "
    },
    "DetectFaces": {
      "name": "DetectFaces",
      "input": {
        "type": "structure",
        "members": {
          "Image": {
            "type": "structure",
            "members": {
              "Bytes": {
                "type": "blob",
                "zonbookDocumentation": "\n         <simpara>Blob of image bytes up to 5 MBs.</simpara>\n      ",
                "documentation": "\n         <p>Blob of image bytes up to 5 MBs.</p>\n      ",
                "shape_name": "ImageBlob",
                "min_length": 1,
                "max_length": 5242880
              },
              "S3Object": {
                "type": "structure",
                "members": {
                  "Bucket": {
                    "type": "string",
                    "pattern": "[0-9A-Za-z\\.\\-_]*",
                    "zonbookDocumentation": "\n         <simpara>Name of the S3 bucket.</simpara>\n      ",
                    "documentation": "\n         <p>Name of the S3 bucket.</p>\n      ",
                    "shape_name": "S3Bucket",
                    "min_length": 3,
                    "max_length": 255
                  },
                  "Name": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>S3 object key name.</simpara>\n      ",
                    "documentation": "\n         <p>S3 object key name.</p>\n      ",
                    "shape_name": "S3ObjectName",
                    "min_length": 1,
                    "max_length": 1024
                  },
                  "Version": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>If the bucket is versioning enabled, you can specify the object version. </simpara>\n      ",
                    "documentation": "\n         <p>If the bucket is versioning enabled, you can specify the object version. </p>\n      ",
                    "shape_name": "S3ObjectVersion",
                    "min_length": 1,
                    "max_length": 1024
                  }
                },
                "zonbookDocumentation": "\n         <simpara>Identifies an S3 object as the image source.</simpara>\n      ",
                "documentation": "\n         <p>Identifies an S3 object as the image source.</p>\n      ",
                "shape_name": "S3Object"
              }
            },
            "zonbookDocumentation": "\n\n         <simpara>The input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call\n      Amazon Rekognition operations, passing base64-encoded image bytes is not supported. </simpara>\n\n      ",
            "documentation": "\n\n         <p>The input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call\n      Amazon Rekognition operations, passing base64-encoded image bytes is not supported. </p>\n\n      ",
            "required": true,
            "shape_name": "Image"
          },
          "Attributes": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of facial attributes you want to be returned. This can be the default list of\n      attributes or all attributes. If you don't specify a value for <code>Attributes</code> or if\n      you specify <code>[\"DEFAULT\"]</code>, the API returns the following subset of facial\n      attributes: <code>BoundingBox</code>, <code>Confidence</code>, <code>Pose</code>,\n        <code>Quality</code> and <code>Landmarks</code>. If you provide <code>[\"ALL\"]</code>, all\n      facial attributes are returned but the operation will take longer to complete.</simpara>\n         <simpara>If you provide both, <code>[\"ALL\", \"DEFAULT\"]</code>, the service uses a logical AND\n      operator to determine which attributes to return (in this case, all attributes). </simpara>\n      ",
            "documentation": "\n         <p>An array of facial attributes you want to be returned. This can be the default list of\n      attributes or all attributes. If you don't specify a value for <code>Attributes</code> or if\n      you specify <code>[\"DEFAULT\"]</code>, the API returns the following subset of facial\n      attributes: <code>BoundingBox</code>, <code>Confidence</code>, <code>Pose</code>,\n        <code>Quality</code> and <code>Landmarks</code>. If you provide <code>[\"ALL\"]</code>, all\n      facial attributes are returned but the operation will take longer to complete.</p>\n         <p>If you provide both, <code>[\"ALL\", \"DEFAULT\"]</code>, the service uses a logical AND\n      operator to determine which attributes to return (in this case, all attributes). </p>\n      ",
            "shape_name": "Attributes",
            "members": {
              "type": "string",
              "enum": [
                "DEFAULT",
                "ALL"
              ],
              "shape_name": "Attribute",
              "documentation": null
            }
          }
        },
        "shape_name": "DetectFacesRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "FaceDetails": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>Details of each face found in the image. </simpara>\n      ",
            "documentation": "\n         <p>Details of each face found in the image. </p>\n      ",
            "shape_name": "FaceDetailList",
            "members": {
              "type": "structure",
              "members": {
                "BoundingBox": {
                  "type": "structure",
                  "members": {
                    "Width": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Width of the bounding box as a ratio of the overall image width.</simpara>\n      ",
                      "documentation": "\n         <p>Width of the bounding box as a ratio of the overall image width.</p>\n      ",
                      "shape_name": "Float"
                    },
                    "Height": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Height of the bounding box as a ratio of the overall image height.</simpara>\n      ",
                      "documentation": "\n         <p>Height of the bounding box as a ratio of the overall image height.</p>\n      ",
                      "shape_name": "Float"
                    },
                    "Left": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Left coordinate of the bounding box as a ratio of overall image width.</simpara>\n      ",
                      "documentation": "\n         <p>Left coordinate of the bounding box as a ratio of overall image width.</p>\n      ",
                      "shape_name": "Float"
                    },
                    "Top": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Top coordinate of the bounding box as a ratio of overall image height.</simpara>\n      ",
                      "documentation": "\n         <p>Top coordinate of the bounding box as a ratio of overall image height.</p>\n      ",
                      "shape_name": "Float"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Bounding box of the face. Default attribute.</simpara>\n      ",
                  "documentation": "\n         <p>Bounding box of the face. Default attribute.</p>\n      ",
                  "shape_name": "BoundingBox"
                },
                "AgeRange": {
                  "type": "structure",
                  "members": {
                    "Low": {
                      "type": "integer",
                      "zonbookDocumentation": "\n         <simpara>The lowest estimated age.</simpara>\n      ",
                      "documentation": "\n         <p>The lowest estimated age.</p>\n      ",
                      "shape_name": "UInteger",
                      "min_length": 0
                    },
                    "High": {
                      "type": "integer",
                      "zonbookDocumentation": "\n         <simpara>The highest estimated age.</simpara>\n      ",
                      "documentation": "\n         <p>The highest estimated age.</p>\n      ",
                      "shape_name": "UInteger",
                      "min_length": 0
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>The estimated age range, in years, for the face. Low represents the lowest estimated\n      age and High represents the highest estimated age.</simpara>\n      ",
                  "documentation": "\n         <p>The estimated age range, in years, for the face. Low represents the lowest estimated\n      age and High represents the highest estimated age.</p>\n      ",
                  "shape_name": "AgeRange"
                },
                "Smile": {
                  "type": "structure",
                  "members": {
                    "Value": {
                      "type": "boolean",
                      "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the face is smiling or not.</simpara>\n      ",
                      "documentation": "\n         <p>Boolean value that indicates whether the face is smiling or not.</p>\n      ",
                      "shape_name": "Boolean"
                    },
                    "Confidence": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                      "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                      "shape_name": "Percent",
                      "min_length": 0,
                      "max_length": 100
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Indicates whether or not the face is smiling, and the confidence level in the\n      determination.</simpara>\n      ",
                  "documentation": "\n         <p>Indicates whether or not the face is smiling, and the confidence level in the\n      determination.</p>\n      ",
                  "shape_name": "Smile"
                },
                "Eyeglasses": {
                  "type": "structure",
                  "members": {
                    "Value": {
                      "type": "boolean",
                      "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the face is wearing eye glasses or not.</simpara>\n      ",
                      "documentation": "\n         <p>Boolean value that indicates whether the face is wearing eye glasses or not.</p>\n      ",
                      "shape_name": "Boolean"
                    },
                    "Confidence": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                      "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                      "shape_name": "Percent",
                      "min_length": 0,
                      "max_length": 100
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Indicates whether or not the face is wearing eye glasses, and the confidence level in\n      the determination.</simpara>\n      ",
                  "documentation": "\n         <p>Indicates whether or not the face is wearing eye glasses, and the confidence level in\n      the determination.</p>\n      ",
                  "shape_name": "Eyeglasses"
                },
                "Sunglasses": {
                  "type": "structure",
                  "members": {
                    "Value": {
                      "type": "boolean",
                      "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the face is wearing sunglasses or not.</simpara>\n      ",
                      "documentation": "\n         <p>Boolean value that indicates whether the face is wearing sunglasses or not.</p>\n      ",
                      "shape_name": "Boolean"
                    },
                    "Confidence": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                      "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                      "shape_name": "Percent",
                      "min_length": 0,
                      "max_length": 100
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Indicates whether or not the face is wearing sunglasses, and the confidence level in\n      the determination.</simpara>\n      ",
                  "documentation": "\n         <p>Indicates whether or not the face is wearing sunglasses, and the confidence level in\n      the determination.</p>\n      ",
                  "shape_name": "Sunglasses"
                },
                "Gender": {
                  "type": "structure",
                  "members": {
                    "Value": {
                      "type": "string",
                      "enum": [
                        "Male",
                        "Female"
                      ],
                      "zonbookDocumentation": "\n         <simpara>Gender of the face.</simpara>\n      ",
                      "documentation": "\n         <p>Gender of the face.</p>\n      ",
                      "shape_name": "GenderType"
                    },
                    "Confidence": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                      "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                      "shape_name": "Percent",
                      "min_length": 0,
                      "max_length": 100
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Gender of the face and the confidence level in the determination.</simpara>\n      ",
                  "documentation": "\n         <p>Gender of the face and the confidence level in the determination.</p>\n      ",
                  "shape_name": "Gender"
                },
                "Beard": {
                  "type": "structure",
                  "members": {
                    "Value": {
                      "type": "boolean",
                      "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the face has beard or not.</simpara>\n      ",
                      "documentation": "\n         <p>Boolean value that indicates whether the face has beard or not.</p>\n      ",
                      "shape_name": "Boolean"
                    },
                    "Confidence": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                      "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                      "shape_name": "Percent",
                      "min_length": 0,
                      "max_length": 100
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Indicates whether or not the face has a beard, and the confidence level in the\n      determination.</simpara>\n      ",
                  "documentation": "\n         <p>Indicates whether or not the face has a beard, and the confidence level in the\n      determination.</p>\n      ",
                  "shape_name": "Beard"
                },
                "Mustache": {
                  "type": "structure",
                  "members": {
                    "Value": {
                      "type": "boolean",
                      "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the face has mustache or not.</simpara>\n      ",
                      "documentation": "\n         <p>Boolean value that indicates whether the face has mustache or not.</p>\n      ",
                      "shape_name": "Boolean"
                    },
                    "Confidence": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                      "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                      "shape_name": "Percent",
                      "min_length": 0,
                      "max_length": 100
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Indicates whether or not the face has a mustache, and the confidence level in the\n      determination.</simpara>\n      ",
                  "documentation": "\n         <p>Indicates whether or not the face has a mustache, and the confidence level in the\n      determination.</p>\n      ",
                  "shape_name": "Mustache"
                },
                "EyesOpen": {
                  "type": "structure",
                  "members": {
                    "Value": {
                      "type": "boolean",
                      "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the eyes on the face are open.</simpara>\n      ",
                      "documentation": "\n         <p>Boolean value that indicates whether the eyes on the face are open.</p>\n      ",
                      "shape_name": "Boolean"
                    },
                    "Confidence": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                      "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                      "shape_name": "Percent",
                      "min_length": 0,
                      "max_length": 100
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Indicates whether or not the eyes on the face are open, and the confidence level in the\n      determination.</simpara>\n      ",
                  "documentation": "\n         <p>Indicates whether or not the eyes on the face are open, and the confidence level in the\n      determination.</p>\n      ",
                  "shape_name": "EyeOpen"
                },
                "MouthOpen": {
                  "type": "structure",
                  "members": {
                    "Value": {
                      "type": "boolean",
                      "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the mouth on the face is open or not.</simpara>\n      ",
                      "documentation": "\n         <p>Boolean value that indicates whether the mouth on the face is open or not.</p>\n      ",
                      "shape_name": "Boolean"
                    },
                    "Confidence": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                      "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                      "shape_name": "Percent",
                      "min_length": 0,
                      "max_length": 100
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Indicates whether or not the mouth on the face is open, and the confidence level in the\n      determination.</simpara>\n      ",
                  "documentation": "\n         <p>Indicates whether or not the mouth on the face is open, and the confidence level in the\n      determination.</p>\n      ",
                  "shape_name": "MouthOpen"
                },
                "Emotions": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <simpara>The emotions detected on the face, and the confidence level in the determination. For\n      example, HAPPY, SAD, and ANGRY. </simpara>\n      ",
                  "documentation": "\n         <p>The emotions detected on the face, and the confidence level in the determination. For\n      example, HAPPY, SAD, and ANGRY. </p>\n      ",
                  "shape_name": "Emotions",
                  "members": {
                    "type": "structure",
                    "members": {
                      "Type": {
                        "type": "string",
                        "enum": [
                          "HAPPY",
                          "SAD",
                          "ANGRY",
                          "CONFUSED",
                          "DISGUSTED",
                          "SURPRISED",
                          "CALM",
                          "UNKNOWN"
                        ],
                        "zonbookDocumentation": "\n         <simpara>Type of emotion detected.</simpara>\n      ",
                        "documentation": "\n         <p>Type of emotion detected.</p>\n      ",
                        "shape_name": "EmotionName"
                      },
                      "Confidence": {
                        "type": "float",
                        "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                        "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                        "shape_name": "Percent",
                        "min_length": 0,
                        "max_length": 100
                      }
                    },
                    "zonbookDocumentation": "\n         <simpara>The emotions detected on the face, and the confidence level in the determination. For\n      example, HAPPY, SAD, and ANGRY.</simpara>\n      ",
                    "documentation": "\n         <p>The emotions detected on the face, and the confidence level in the determination. For\n      example, HAPPY, SAD, and ANGRY.</p>\n      ",
                    "shape_name": "Emotion"
                  }
                },
                "Landmarks": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <simpara>Indicates the location of landmarks on the face. Default attribute.</simpara>\n      ",
                  "documentation": "\n         <p>Indicates the location of landmarks on the face. Default attribute.</p>\n      ",
                  "shape_name": "Landmarks",
                  "members": {
                    "type": "structure",
                    "members": {
                      "Type": {
                        "type": "string",
                        "enum": [
                          "eyeLeft",
                          "eyeRight",
                          "nose",
                          "mouthLeft",
                          "mouthRight",
                          "leftEyeBrowLeft",
                          "leftEyeBrowRight",
                          "leftEyeBrowUp",
                          "rightEyeBrowLeft",
                          "rightEyeBrowRight",
                          "rightEyeBrowUp",
                          "leftEyeLeft",
                          "leftEyeRight",
                          "leftEyeUp",
                          "leftEyeDown",
                          "rightEyeLeft",
                          "rightEyeRight",
                          "rightEyeUp",
                          "rightEyeDown",
                          "noseLeft",
                          "noseRight",
                          "mouthUp",
                          "mouthDown",
                          "leftPupil",
                          "rightPupil"
                        ],
                        "zonbookDocumentation": "\n         <simpara>Type of the landmark.</simpara>\n      ",
                        "documentation": "\n         <p>Type of the landmark.</p>\n      ",
                        "shape_name": "LandmarkType"
                      },
                      "X": {
                        "type": "float",
                        "zonbookDocumentation": "\n         <simpara>x-coordinate from the top left of the landmark expressed as the ratio of the width of\n      the image. For example, if the images is 700x200 and the x-coordinate of the landmark is at\n      350 pixels, this value is 0.5. </simpara>\n      ",
                        "documentation": "\n         <p>x-coordinate from the top left of the landmark expressed as the ratio of the width of\n      the image. For example, if the images is 700x200 and the x-coordinate of the landmark is at\n      350 pixels, this value is 0.5. </p>\n      ",
                        "shape_name": "Float"
                      },
                      "Y": {
                        "type": "float",
                        "zonbookDocumentation": "\n         <simpara>y-coordinate from the top left of the landmark expressed as the ratio of the height of\n      the image. For example, if the images is 700x200 and the y-coordinate of the landmark is at\n      100 pixels, this value is 0.5.</simpara>\n      ",
                        "documentation": "\n         <p>y-coordinate from the top left of the landmark expressed as the ratio of the height of\n      the image. For example, if the images is 700x200 and the y-coordinate of the landmark is at\n      100 pixels, this value is 0.5.</p>\n      ",
                        "shape_name": "Float"
                      }
                    },
                    "zonbookDocumentation": "\n         <simpara>Indicates the location of the landmark on the face.</simpara>\n      ",
                    "documentation": "\n         <p>Indicates the location of the landmark on the face.</p>\n      ",
                    "shape_name": "Landmark"
                  }
                },
                "Pose": {
                  "type": "structure",
                  "members": {
                    "Roll": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Value representing the face rotation on the roll axis.</simpara>\n      ",
                      "documentation": "\n         <p>Value representing the face rotation on the roll axis.</p>\n      ",
                      "shape_name": "Degree",
                      "min_length": -180,
                      "max_length": 180
                    },
                    "Yaw": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Value representing the face rotation on the yaw axis.</simpara>\n      ",
                      "documentation": "\n         <p>Value representing the face rotation on the yaw axis.</p>\n      ",
                      "shape_name": "Degree",
                      "min_length": -180,
                      "max_length": 180
                    },
                    "Pitch": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Value representing the face rotation on the pitch axis.</simpara>\n      ",
                      "documentation": "\n         <p>Value representing the face rotation on the pitch axis.</p>\n      ",
                      "shape_name": "Degree",
                      "min_length": -180,
                      "max_length": 180
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Indicates the pose of the face as determined by its pitch, roll, and yaw. Default attribute.</simpara>\n      ",
                  "documentation": "\n         <p>Indicates the pose of the face as determined by its pitch, roll, and yaw. Default attribute.</p>\n      ",
                  "shape_name": "Pose"
                },
                "Quality": {
                  "type": "structure",
                  "members": {
                    "Brightness": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Value representing brightness of the face. The service returns a value between 0 and\n      100 (inclusive). A higher value indicates a brighter face image.</simpara>\n      ",
                      "documentation": "\n         <p>Value representing brightness of the face. The service returns a value between 0 and\n      100 (inclusive). A higher value indicates a brighter face image.</p>\n      ",
                      "shape_name": "Float"
                    },
                    "Sharpness": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Value representing sharpness of the face. The service returns a value between 0 and 100\n      (inclusive). A higher value indicates a sharper face image.</simpara>\n      ",
                      "documentation": "\n         <p>Value representing sharpness of the face. The service returns a value between 0 and 100\n      (inclusive). A higher value indicates a sharper face image.</p>\n      ",
                      "shape_name": "Float"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Identifies image brightness and sharpness. Default attribute.</simpara>\n      ",
                  "documentation": "\n         <p>Identifies image brightness and sharpness. Default attribute.</p>\n      ",
                  "shape_name": "ImageQuality"
                },
                "Confidence": {
                  "type": "float",
                  "zonbookDocumentation": "\n         <simpara>Confidence level that the bounding box contains a face (and not a different object such\n      as a tree). Default attribute.</simpara>\n      ",
                  "documentation": "\n         <p>Confidence level that the bounding box contains a face (and not a different object such\n      as a tree). Default attribute.</p>\n      ",
                  "shape_name": "Percent",
                  "min_length": 0,
                  "max_length": 100
                }
              },
              "zonbookDocumentation": "\n         <simpara>Structure containing attributes of the face that the algorithm detected.</simpara>\n         <simpara>A <code>FaceDetail</code> object contains either the default facial attributes or all facial attributes. \n      The default attributes are <code>BoundingBox</code>, <code>Confidence</code>, <code>Landmarks</code>, <code>Pose</code>, and <code>Quality</code>.</simpara>\n         <simpara>\n            <xref linkend=\"API_GetFaceDetection\"/> is the only Amazon Rekognition Video stored video operation that can return a <code>FaceDetail</code> object with all attributes. \n      To specify which attributes to return, use the <code>FaceAttributes</code> input parameter for <xref linkend=\"API_StartFaceDetection\"/>.\n      The following Amazon Rekognition Video operations return only the default attributes. The corresponding Start operations\n        don't have a <code>FaceAttributes</code> input parameter.</simpara> \n         <itemizedlist>\n            <listitem>\n               <simpara>GetCelebrityRecognition</simpara>\n            </listitem>\n            <listitem>\n               <simpara>GetPersonTracking</simpara>\n            </listitem>\n            <listitem>\n               <simpara>GetFaceSearch</simpara>\n            </listitem>\n         </itemizedlist>\n         <simpara>The Amazon Rekognition Image <xref linkend=\"API_DetectFaces\"/> and <xref linkend=\"API_IndexFaces\"/> operations\n      can return all facial attributes. To specify which attributes to return, use the \n      <code>Attributes</code> input parameter for <code>DetectFaces</code>. For <code>IndexFaces</code>, use the\n      <code>DetectAttributes</code> input parameter.</simpara>\n      ",
              "documentation": "\n         <p>Structure containing attributes of the face that the algorithm detected.</p>\n         <p>A <code>FaceDetail</code> object contains either the default facial attributes or all facial attributes. \n      The default attributes are <code>BoundingBox</code>, <code>Confidence</code>, <code>Landmarks</code>, <code>Pose</code>, and <code>Quality</code>.</p>\n         <p> is the only Amazon Rekognition Video stored video operation that can return a <code>FaceDetail</code> object with all attributes. \n      To specify which attributes to return, use the <code>FaceAttributes</code> input parameter for .\n      The following Amazon Rekognition Video operations return only the default attributes. The corresponding Start operations\n        don't have a <code>FaceAttributes</code> input parameter.</p> \n         <ul>\n            <li>\n               <p>GetCelebrityRecognition</p>\n            </li>\n            <li>\n               <p>GetPersonTracking</p>\n            </li>\n            <li>\n               <p>GetFaceSearch</p>\n            </li>\n         </ul>\n         <p>The Amazon Rekognition Image  and  operations\n      can return all facial attributes. To specify which attributes to return, use the \n      <code>Attributes</code> input parameter for <code>DetectFaces</code>. For <code>IndexFaces</code>, use the\n      <code>DetectAttributes</code> input parameter.</p>\n      ",
              "shape_name": "FaceDetail"
            }
          },
          "OrientationCorrection": {
            "type": "string",
            "enum": [
              "ROTATE_0",
              "ROTATE_90",
              "ROTATE_180",
              "ROTATE_270"
            ],
            "zonbookDocumentation": "\n         <simpara> The orientation of the input image (counter-clockwise direction). If your application\n      displays the image, you can use this value to correct image orientation. The bounding box\n      coordinates returned in <code>FaceDetails</code> represent face locations before the image\n      orientation is corrected. </simpara>\n         <note>\n            <simpara>If the input image is in .jpeg format, it might contain exchangeable image (Exif)\n        metadata that includes the image's orientation. If so, and the Exif metadata for the input\n        image populates the orientation field, the value of <code>OrientationCorrection</code> is\n        null and the <code>FaceDetails</code> bounding box coordinates represent face locations\n        after Exif metadata is used to correct the image orientation. Images in .png format don't\n        contain Exif metadata.</simpara>\n         </note>\n      ",
            "documentation": "\n         <p> The orientation of the input image (counter-clockwise direction). If your application\n      displays the image, you can use this value to correct image orientation. The bounding box\n      coordinates returned in <code>FaceDetails</code> represent face locations before the image\n      orientation is corrected. </p>\n         <note>\n            <p>If the input image is in .jpeg format, it might contain exchangeable image (Exif)\n        metadata that includes the image's orientation. If so, and the Exif metadata for the input\n        image populates the orientation field, the value of <code>OrientationCorrection</code> is\n        null and the <code>FaceDetails</code> bounding box coordinates represent face locations\n        after Exif metadata is used to correct the image orientation. Images in .png format don't\n        contain Exif metadata.</p>\n         </note>\n      ",
            "shape_name": "OrientationCorrection"
          }
        },
        "shape_name": "DetectFacesResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is unable to access the S3 object specified in the request.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is unable to access the S3 object specified in the request.</p>\n      ",
          "shape_name": "InvalidS3ObjectException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The input image size exceeds the allowed limit. For more information, see <xref linkend=\"limits\"/>. </simpara>\n    \n      ",
          "documentation": "\n    \n         <p>The input image size exceeds the allowed limit. For more information, see \n      Limits in Amazon Rekognition in the Amazon Rekognition Developer Guide. </p>\n      ",
          "shape_name": "ImageTooLargeException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The provided image format is not supported. </simpara>\n      ",
          "documentation": "\n         <p>The provided image format is not supported. </p>\n      ",
          "shape_name": "InvalidImageFormatException"
        }
      ],
      "documentation": "\n         <p>Detects faces within an image that is provided as input.</p>\n\n         <p>\n            <code>DetectFaces</code> detects the 100 largest faces in the image.\n    For each face detected, the operation returns face details including\n    a bounding box of the face, a confidence value\n    (that the bounding box contains a face), and a fixed set of attributes\n      such as facial landmarks (for example, coordinates of eye and mouth),\n    gender, presence of beard, sunglasses, etc.\n\n    </p>\n         <p>The face-detection algorithm is most effective on frontal faces.\n      For non-frontal or obscured faces, the algorithm may not detect the faces or might\n      detect faces with lower confidence. </p>\n         <p>You pass the input image either as base64-encoded image bytes or as a reference\n      to an image in an Amazon S3 bucket. If you use the Amazon CLI to call Amazon Rekognition operations,\n      passing image bytes is not supported. The image must be either a PNG or JPEG formatted file.\n    </p>\n\n         <note>\n            <p>This is a stateless API operation. That is, the operation does not persist any\n        data.</p>\n         </note>\n\n         <p>This operation requires permissions to perform the\n      <code>rekognition:DetectFaces</code> action. </p>\n      \n      "
    },
    "StartGroupFaces": {
      "name": "StartGroupFaces",
      "input": {
        "type": "structure",
        "members": {
          "CollectionId": {
            "type": "string",
            "pattern": "[a-zA-Z0-9_.\\-]+",
            "required": true,
            "shape_name": "CollectionId",
            "documentation": null,
            "min_length": 1,
            "max_length": 255
          }
        },
        "shape_name": "StartGroupFacesRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "JobId": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9-_]+$",
            "shape_name": "JobId",
            "documentation": null,
            "min_length": 1,
            "max_length": 64
          }
        },
        "shape_name": "StartGroupFacesResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "shape_name": "GroupFacesInProgressException",
          "documentation": null
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The collection specified in the request cannot be found.</simpara>\n      ",
          "documentation": "\n         <p>The collection specified in the request cannot be found.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        }
      ],
      "documentation": null
    },
    "GetGroupFacesJob": {
      "name": "GetGroupFacesJob",
      "input": {
        "type": "structure",
        "members": {
          "CollectionId": {
            "type": "string",
            "pattern": "[a-zA-Z0-9_.\\-]+",
            "required": true,
            "shape_name": "CollectionId",
            "documentation": null,
            "min_length": 1,
            "max_length": 255
          },
          "JobId": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9-_]+$",
            "required": true,
            "shape_name": "JobId",
            "documentation": null,
            "min_length": 1,
            "max_length": 64
          }
        },
        "shape_name": "GetGroupFacesJobRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "JobId": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9-_]+$",
            "shape_name": "JobId",
            "documentation": null,
            "min_length": 1,
            "max_length": 64
          },
          "JobStatus": {
            "type": "string",
            "enum": [
              "SUBMITTED",
              "STARTED",
              "COMPLETED",
              "ERROR",
              "FAILED",
              "UNKNOWN"
            ],
            "internalonly": true,
            "shape_name": "JobStatus",
            "documentation": null
          }
        },
        "shape_name": "GetGroupFacesJobResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The collection specified in the request cannot be found.</simpara>\n      ",
          "documentation": "\n         <p>The collection specified in the request cannot be found.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        }
      ],
      "documentation": null
    },
    "SearchFaces": {
      "name": "SearchFaces",
      "input": {
        "type": "structure",
        "members": {
          "CollectionId": {
            "type": "string",
            "pattern": "[a-zA-Z0-9_.\\-]+",
            "zonbookDocumentation": "\n         <simpara>ID of the collection the face belongs to.</simpara>\n      ",
            "documentation": "\n         <p>ID of the collection the face belongs to.</p>\n      ",
            "required": true,
            "shape_name": "CollectionId",
            "min_length": 1,
            "max_length": 255
          },
          "FaceId": {
            "type": "string",
            "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
            "zonbookDocumentation": "\n         <simpara>ID of a face to find matches for in the collection.</simpara>\n      ",
            "documentation": "\n         <p>ID of a face to find matches for in the collection.</p>\n      ",
            "required": true,
            "shape_name": "FaceId"
          },
          "MaxFaces": {
            "type": "integer",
            "zonbookDocumentation": "\n         <simpara>Maximum number of faces to return. The operation returns the maximum number of faces\n      with the highest confidence in the match.</simpara>\n      ",
            "documentation": "\n         <p>Maximum number of faces to return. The operation returns the maximum number of faces\n      with the highest confidence in the match.</p>\n      ",
            "shape_name": "MaxFaces",
            "min_length": 1,
            "max_length": 4096
          },
          "FaceMatchThreshold": {
            "type": "float",
            "zonbookDocumentation": "\n         <simpara>Optional value specifying the minimum confidence in the face match to return. For\n      example, don't return any matches where confidence in matches is less than 70%.</simpara>\n      ",
            "documentation": "\n         <p>Optional value specifying the minimum confidence in the face match to return. For\n      example, don't return any matches where confidence in matches is less than 70%.</p>\n      ",
            "shape_name": "Percent",
            "min_length": 0,
            "max_length": 100
          }
        },
        "shape_name": "SearchFacesRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "SearchedFaceId": {
            "type": "string",
            "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
            "zonbookDocumentation": "\n         <simpara>ID of the face that was searched for matches in a collection.</simpara>\n      ",
            "documentation": "\n         <p>ID of the face that was searched for matches in a collection.</p>\n      ",
            "shape_name": "FaceId"
          },
          "FaceMatches": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of faces that matched the input face, along with the confidence in the\n      match.</simpara>\n      ",
            "documentation": "\n         <p>An array of faces that matched the input face, along with the confidence in the\n      match.</p>\n      ",
            "shape_name": "FaceMatchList",
            "members": {
              "type": "structure",
              "members": {
                "Similarity": {
                  "type": "float",
                  "zonbookDocumentation": "\n         <simpara>Confidence in the match of this face with the input face.</simpara>\n      ",
                  "documentation": "\n         <p>Confidence in the match of this face with the input face.</p>\n      ",
                  "shape_name": "Percent",
                  "min_length": 0,
                  "max_length": 100
                },
                "Face": {
                  "type": "structure",
                  "members": {
                    "FaceId": {
                      "type": "string",
                      "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
                      "zonbookDocumentation": "\n         <simpara>Unique identifier that Amazon Rekognition assigns to the face.</simpara>\n      ",
                      "documentation": "\n         <p>Unique identifier that Amazon Rekognition assigns to the face.</p>\n      ",
                      "shape_name": "FaceId"
                    },
                    "BoundingBox": {
                      "type": "structure",
                      "members": {
                        "Width": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Width of the bounding box as a ratio of the overall image width.</simpara>\n      ",
                          "documentation": "\n         <p>Width of the bounding box as a ratio of the overall image width.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Height": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Height of the bounding box as a ratio of the overall image height.</simpara>\n      ",
                          "documentation": "\n         <p>Height of the bounding box as a ratio of the overall image height.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Left": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Left coordinate of the bounding box as a ratio of overall image width.</simpara>\n      ",
                          "documentation": "\n         <p>Left coordinate of the bounding box as a ratio of overall image width.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Top": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Top coordinate of the bounding box as a ratio of overall image height.</simpara>\n      ",
                          "documentation": "\n         <p>Top coordinate of the bounding box as a ratio of overall image height.</p>\n      ",
                          "shape_name": "Float"
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Bounding box of the face.</simpara>\n      ",
                      "documentation": "\n         <p>Bounding box of the face.</p>\n      ",
                      "shape_name": "BoundingBox"
                    },
                    "ImageId": {
                      "type": "string",
                      "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
                      "zonbookDocumentation": "\n         <simpara>Unique identifier that Amazon Rekognition assigns to the input image.</simpara>\n      ",
                      "documentation": "\n         <p>Unique identifier that Amazon Rekognition assigns to the input image.</p>\n      ",
                      "shape_name": "ImageId"
                    },
                    "ExternalImageId": {
                      "type": "string",
                      "pattern": "[a-zA-Z0-9_.\\-:]+",
                      "zonbookDocumentation": "\n         <simpara>Identifier that you assign to all the faces in the input image.</simpara>\n      ",
                      "documentation": "\n         <p>Identifier that you assign to all the faces in the input image.</p>\n      ",
                      "shape_name": "ExternalImageId",
                      "min_length": 1,
                      "max_length": 255
                    },
                    "Confidence": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Confidence level that the bounding box contains a face (and not a different object such\n      as a tree).</simpara>\n      ",
                      "documentation": "\n         <p>Confidence level that the bounding box contains a face (and not a different object such\n      as a tree).</p>\n      ",
                      "shape_name": "Percent",
                      "min_length": 0,
                      "max_length": 100
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Describes the face properties such as the bounding box, face ID, image ID of the source\n      image, and external image ID that you assigned.</simpara>\n      ",
                  "documentation": "\n         <p>Describes the face properties such as the bounding box, face ID, image ID of the source\n      image, and external image ID that you assigned.</p>\n      ",
                  "shape_name": "Face"
                }
              },
              "zonbookDocumentation": "\n         <simpara>Provides face metadata. In addition, it also provides the confidence in the match of\n      this face with the input face.</simpara>\n      ",
              "documentation": "\n         <p>Provides face metadata. In addition, it also provides the confidence in the match of\n      this face with the input face.</p>\n      ",
              "shape_name": "FaceMatch"
            }
          },
          "FaceModelVersion": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>Version number of the face detection model associated with the input collection (<code>CollectionId</code>).</simpara>\n      ",
            "documentation": "\n         <p>Version number of the face detection model associated with the input collection (<code>CollectionId</code>).</p>\n      ",
            "shape_name": "String"
          }
        },
        "shape_name": "SearchFacesResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The collection specified in the request cannot be found.</simpara>\n      ",
          "documentation": "\n         <p>The collection specified in the request cannot be found.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        }
      ],
      "documentation": "\n         <p>For a given input face ID, searches for matching faces in the collection the face\n      belongs to. You get a face ID when you add a face to the collection using the <a>IndexFaces</a> operation. The operation compares the features of the input face with\n      faces in the specified collection. </p>\n         <note>\n            <p>You can also search faces without indexing faces by using the\n          <code>SearchFacesByImage</code> operation.</p>\n         </note>\n\n         <p>\n     The operation response returns\n      an array of faces that match, ordered by similarity score with the highest\n      similarity first. More specifically, it is an\n      array of metadata for each face match that is found. Along with the metadata, the response also\n      includes a <code>confidence</code> value for each face match, indicating the confidence\n      that the specific face matches the input face.\n    </p>\n    \n         <p>For an example, see Searching for a Face Using Its Face ID in the Amazon Rekognition Developer Guide.</p>\n\n         <p>This operation requires permissions to perform the <code>rekognition:SearchFaces</code>\n      action.</p>\n    \n      "
    },
    "SearchFacesByImage": {
      "name": "SearchFacesByImage",
      "input": {
        "type": "structure",
        "members": {
          "CollectionId": {
            "type": "string",
            "pattern": "[a-zA-Z0-9_.\\-]+",
            "zonbookDocumentation": "\n         <simpara>ID of the collection to search.</simpara>\n      ",
            "documentation": "\n         <p>ID of the collection to search.</p>\n      ",
            "required": true,
            "shape_name": "CollectionId",
            "min_length": 1,
            "max_length": 255
          },
          "Image": {
            "type": "structure",
            "members": {
              "Bytes": {
                "type": "blob",
                "zonbookDocumentation": "\n         <simpara>Blob of image bytes up to 5 MBs.</simpara>\n      ",
                "documentation": "\n         <p>Blob of image bytes up to 5 MBs.</p>\n      ",
                "shape_name": "ImageBlob",
                "min_length": 1,
                "max_length": 5242880
              },
              "S3Object": {
                "type": "structure",
                "members": {
                  "Bucket": {
                    "type": "string",
                    "pattern": "[0-9A-Za-z\\.\\-_]*",
                    "zonbookDocumentation": "\n         <simpara>Name of the S3 bucket.</simpara>\n      ",
                    "documentation": "\n         <p>Name of the S3 bucket.</p>\n      ",
                    "shape_name": "S3Bucket",
                    "min_length": 3,
                    "max_length": 255
                  },
                  "Name": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>S3 object key name.</simpara>\n      ",
                    "documentation": "\n         <p>S3 object key name.</p>\n      ",
                    "shape_name": "S3ObjectName",
                    "min_length": 1,
                    "max_length": 1024
                  },
                  "Version": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>If the bucket is versioning enabled, you can specify the object version. </simpara>\n      ",
                    "documentation": "\n         <p>If the bucket is versioning enabled, you can specify the object version. </p>\n      ",
                    "shape_name": "S3ObjectVersion",
                    "min_length": 1,
                    "max_length": 1024
                  }
                },
                "zonbookDocumentation": "\n         <simpara>Identifies an S3 object as the image source.</simpara>\n      ",
                "documentation": "\n         <p>Identifies an S3 object as the image source.</p>\n      ",
                "shape_name": "S3Object"
              }
            },
            "zonbookDocumentation": "\n\n         <simpara>The input image as base64-encoded bytes or an S3 object.\n      If you use the AWS CLI to call Amazon Rekognition operations,\n      passing base64-encoded image bytes is not supported. </simpara>\n\n      ",
            "documentation": "\n\n         <p>The input image as base64-encoded bytes or an S3 object.\n      If you use the AWS CLI to call Amazon Rekognition operations,\n      passing base64-encoded image bytes is not supported. </p>\n\n      ",
            "required": true,
            "shape_name": "Image"
          },
          "MaxFaces": {
            "type": "integer",
            "zonbookDocumentation": "\n         <simpara>Maximum number of faces to return. The operation returns the maximum number of faces\n      with the highest confidence in the match.</simpara>\n      ",
            "documentation": "\n         <p>Maximum number of faces to return. The operation returns the maximum number of faces\n      with the highest confidence in the match.</p>\n      ",
            "shape_name": "MaxFaces",
            "min_length": 1,
            "max_length": 4096
          },
          "FaceMatchThreshold": {
            "type": "float",
            "zonbookDocumentation": "\n         <simpara>(Optional) Specifies the minimum confidence in the face match to return. For example,\n      don't return any matches where confidence in matches is less than 70%.</simpara>\n      ",
            "documentation": "\n         <p>(Optional) Specifies the minimum confidence in the face match to return. For example,\n      don't return any matches where confidence in matches is less than 70%.</p>\n      ",
            "shape_name": "Percent",
            "min_length": 0,
            "max_length": 100
          }
        },
        "shape_name": "SearchFacesByImageRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "SearchedFaceBoundingBox": {
            "type": "structure",
            "members": {
              "Width": {
                "type": "float",
                "zonbookDocumentation": "\n         <simpara>Width of the bounding box as a ratio of the overall image width.</simpara>\n      ",
                "documentation": "\n         <p>Width of the bounding box as a ratio of the overall image width.</p>\n      ",
                "shape_name": "Float"
              },
              "Height": {
                "type": "float",
                "zonbookDocumentation": "\n         <simpara>Height of the bounding box as a ratio of the overall image height.</simpara>\n      ",
                "documentation": "\n         <p>Height of the bounding box as a ratio of the overall image height.</p>\n      ",
                "shape_name": "Float"
              },
              "Left": {
                "type": "float",
                "zonbookDocumentation": "\n         <simpara>Left coordinate of the bounding box as a ratio of overall image width.</simpara>\n      ",
                "documentation": "\n         <p>Left coordinate of the bounding box as a ratio of overall image width.</p>\n      ",
                "shape_name": "Float"
              },
              "Top": {
                "type": "float",
                "zonbookDocumentation": "\n         <simpara>Top coordinate of the bounding box as a ratio of overall image height.</simpara>\n      ",
                "documentation": "\n         <p>Top coordinate of the bounding box as a ratio of overall image height.</p>\n      ",
                "shape_name": "Float"
              }
            },
            "zonbookDocumentation": "\n         <simpara>The bounding box around the face in the input image that Amazon Rekognition used for the\n      search.</simpara>\n      ",
            "documentation": "\n         <p>The bounding box around the face in the input image that Amazon Rekognition used for the\n      search.</p>\n      ",
            "shape_name": "BoundingBox"
          },
          "SearchedFaceConfidence": {
            "type": "float",
            "zonbookDocumentation": "\n         <simpara>The level of confidence that the <code>searchedFaceBoundingBox</code>, contains a\n      face.</simpara>\n      ",
            "documentation": "\n         <p>The level of confidence that the <code>searchedFaceBoundingBox</code>, contains a\n      face.</p>\n      ",
            "shape_name": "Percent",
            "min_length": 0,
            "max_length": 100
          },
          "FaceMatches": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of faces that match the input face, along with the confidence in the\n      match.</simpara>\n      ",
            "documentation": "\n         <p>An array of faces that match the input face, along with the confidence in the\n      match.</p>\n      ",
            "shape_name": "FaceMatchList",
            "members": {
              "type": "structure",
              "members": {
                "Similarity": {
                  "type": "float",
                  "zonbookDocumentation": "\n         <simpara>Confidence in the match of this face with the input face.</simpara>\n      ",
                  "documentation": "\n         <p>Confidence in the match of this face with the input face.</p>\n      ",
                  "shape_name": "Percent",
                  "min_length": 0,
                  "max_length": 100
                },
                "Face": {
                  "type": "structure",
                  "members": {
                    "FaceId": {
                      "type": "string",
                      "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
                      "zonbookDocumentation": "\n         <simpara>Unique identifier that Amazon Rekognition assigns to the face.</simpara>\n      ",
                      "documentation": "\n         <p>Unique identifier that Amazon Rekognition assigns to the face.</p>\n      ",
                      "shape_name": "FaceId"
                    },
                    "BoundingBox": {
                      "type": "structure",
                      "members": {
                        "Width": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Width of the bounding box as a ratio of the overall image width.</simpara>\n      ",
                          "documentation": "\n         <p>Width of the bounding box as a ratio of the overall image width.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Height": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Height of the bounding box as a ratio of the overall image height.</simpara>\n      ",
                          "documentation": "\n         <p>Height of the bounding box as a ratio of the overall image height.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Left": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Left coordinate of the bounding box as a ratio of overall image width.</simpara>\n      ",
                          "documentation": "\n         <p>Left coordinate of the bounding box as a ratio of overall image width.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Top": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Top coordinate of the bounding box as a ratio of overall image height.</simpara>\n      ",
                          "documentation": "\n         <p>Top coordinate of the bounding box as a ratio of overall image height.</p>\n      ",
                          "shape_name": "Float"
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Bounding box of the face.</simpara>\n      ",
                      "documentation": "\n         <p>Bounding box of the face.</p>\n      ",
                      "shape_name": "BoundingBox"
                    },
                    "ImageId": {
                      "type": "string",
                      "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
                      "zonbookDocumentation": "\n         <simpara>Unique identifier that Amazon Rekognition assigns to the input image.</simpara>\n      ",
                      "documentation": "\n         <p>Unique identifier that Amazon Rekognition assigns to the input image.</p>\n      ",
                      "shape_name": "ImageId"
                    },
                    "ExternalImageId": {
                      "type": "string",
                      "pattern": "[a-zA-Z0-9_.\\-:]+",
                      "zonbookDocumentation": "\n         <simpara>Identifier that you assign to all the faces in the input image.</simpara>\n      ",
                      "documentation": "\n         <p>Identifier that you assign to all the faces in the input image.</p>\n      ",
                      "shape_name": "ExternalImageId",
                      "min_length": 1,
                      "max_length": 255
                    },
                    "Confidence": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Confidence level that the bounding box contains a face (and not a different object such\n      as a tree).</simpara>\n      ",
                      "documentation": "\n         <p>Confidence level that the bounding box contains a face (and not a different object such\n      as a tree).</p>\n      ",
                      "shape_name": "Percent",
                      "min_length": 0,
                      "max_length": 100
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Describes the face properties such as the bounding box, face ID, image ID of the source\n      image, and external image ID that you assigned.</simpara>\n      ",
                  "documentation": "\n         <p>Describes the face properties such as the bounding box, face ID, image ID of the source\n      image, and external image ID that you assigned.</p>\n      ",
                  "shape_name": "Face"
                }
              },
              "zonbookDocumentation": "\n         <simpara>Provides face metadata. In addition, it also provides the confidence in the match of\n      this face with the input face.</simpara>\n      ",
              "documentation": "\n         <p>Provides face metadata. In addition, it also provides the confidence in the match of\n      this face with the input face.</p>\n      ",
              "shape_name": "FaceMatch"
            }
          },
          "FaceModelVersion": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>Version number of the face detection model associated with the input collection (<code>CollectionId</code>).</simpara>\n      ",
            "documentation": "\n         <p>Version number of the face detection model associated with the input collection (<code>CollectionId</code>).</p>\n      ",
            "shape_name": "String"
          }
        },
        "shape_name": "SearchFacesByImageResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is unable to access the S3 object specified in the request.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is unable to access the S3 object specified in the request.</p>\n      ",
          "shape_name": "InvalidS3ObjectException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The input image size exceeds the allowed limit. For more information, see <xref linkend=\"limits\"/>. </simpara>\n    \n      ",
          "documentation": "\n    \n         <p>The input image size exceeds the allowed limit. For more information, see \n      Limits in Amazon Rekognition in the Amazon Rekognition Developer Guide. </p>\n      ",
          "shape_name": "ImageTooLargeException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The collection specified in the request cannot be found.</simpara>\n      ",
          "documentation": "\n         <p>The collection specified in the request cannot be found.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The provided image format is not supported. </simpara>\n      ",
          "documentation": "\n         <p>The provided image format is not supported. </p>\n      ",
          "shape_name": "InvalidImageFormatException"
        }
      ],
      "documentation": "\n         <p>For a given input image, first detects the largest face in the image, and then searches\n      the specified collection for matching faces. The operation compares the features of the input\n      face with faces in the specified collection. </p>\n         <note>\n            <p>To search for all faces in an input image, you might first call the  operation, and then use the face IDs returned in subsequent\n        calls to the  operation. </p>\n            <p> You can also call the <code>DetectFaces</code> operation and use the bounding boxes\n        in the response to make face crops, which then you can pass in to the\n          <code>SearchFacesByImage</code> operation. </p>\n         </note>\n\n         <p>You pass the input image either as base64-encoded image bytes or as a reference\n      to an image in an Amazon S3 bucket. If you use the Amazon CLI to call Amazon Rekognition operations,\n      passing image bytes is not supported. The image must be either a PNG or JPEG formatted file.\n    </p>\n         <p>\n      The response returns an array of faces that match, ordered by similarity score with the\n      highest similarity first. More specifically, it is an\n      array of metadata for each face match found. Along with the metadata, the response also\n      includes a <code>similarity</code> indicating how similar the face is\n      to the input face.\n\n      In the response, the operation also returns the bounding\n      box (and a confidence level that the bounding box contains a face) of the face that Amazon Rekognition\n      used for the input image.\n    </p>\n    \n         <p>For an example, Searching for a Face Using an Image in the Amazon Rekognition Developer Guide.</p>\n    \n         <p>This operation requires permissions to perform the <code>rekognition:SearchFacesByImage</code>\n      action.</p>\n\n      \n      "
    },
    "IndexFaces": {
      "name": "IndexFaces",
      "input": {
        "type": "structure",
        "members": {
          "CollectionId": {
            "type": "string",
            "pattern": "[a-zA-Z0-9_.\\-]+",
            "zonbookDocumentation": "\n         <simpara>The ID of an existing collection to which you want to add the faces that are detected\n      in the input images.</simpara>\n      ",
            "documentation": "\n         <p>The ID of an existing collection to which you want to add the faces that are detected\n      in the input images.</p>\n      ",
            "required": true,
            "shape_name": "CollectionId",
            "min_length": 1,
            "max_length": 255
          },
          "Image": {
            "type": "structure",
            "members": {
              "Bytes": {
                "type": "blob",
                "zonbookDocumentation": "\n         <simpara>Blob of image bytes up to 5 MBs.</simpara>\n      ",
                "documentation": "\n         <p>Blob of image bytes up to 5 MBs.</p>\n      ",
                "shape_name": "ImageBlob",
                "min_length": 1,
                "max_length": 5242880
              },
              "S3Object": {
                "type": "structure",
                "members": {
                  "Bucket": {
                    "type": "string",
                    "pattern": "[0-9A-Za-z\\.\\-_]*",
                    "zonbookDocumentation": "\n         <simpara>Name of the S3 bucket.</simpara>\n      ",
                    "documentation": "\n         <p>Name of the S3 bucket.</p>\n      ",
                    "shape_name": "S3Bucket",
                    "min_length": 3,
                    "max_length": 255
                  },
                  "Name": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>S3 object key name.</simpara>\n      ",
                    "documentation": "\n         <p>S3 object key name.</p>\n      ",
                    "shape_name": "S3ObjectName",
                    "min_length": 1,
                    "max_length": 1024
                  },
                  "Version": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>If the bucket is versioning enabled, you can specify the object version. </simpara>\n      ",
                    "documentation": "\n         <p>If the bucket is versioning enabled, you can specify the object version. </p>\n      ",
                    "shape_name": "S3ObjectVersion",
                    "min_length": 1,
                    "max_length": 1024
                  }
                },
                "zonbookDocumentation": "\n         <simpara>Identifies an S3 object as the image source.</simpara>\n      ",
                "documentation": "\n         <p>Identifies an S3 object as the image source.</p>\n      ",
                "shape_name": "S3Object"
              }
            },
            "zonbookDocumentation": "\n\n         <simpara>The input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call\n      Amazon Rekognition operations, passing base64-encoded image bytes is not supported. </simpara>\n\n      ",
            "documentation": "\n\n         <p>The input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call\n      Amazon Rekognition operations, passing base64-encoded image bytes is not supported. </p>\n\n      ",
            "required": true,
            "shape_name": "Image"
          },
          "ExternalImageId": {
            "type": "string",
            "pattern": "[a-zA-Z0-9_.\\-:]+",
            "zonbookDocumentation": "\n         <simpara>ID you want to assign to all the faces detected in the image.</simpara>\n      ",
            "documentation": "\n         <p>ID you want to assign to all the faces detected in the image.</p>\n      ",
            "shape_name": "ExternalImageId",
            "min_length": 1,
            "max_length": 255
          },
          "DetectionAttributes": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of facial attributes that you want to be returned. This can be the default\n      list of attributes or all attributes. If you don't specify a value for <code>Attributes</code>\n      or if you specify <code>[\"DEFAULT\"]</code>, the API returns the following subset of facial\n      attributes: <code>BoundingBox</code>, <code>Confidence</code>, <code>Pose</code>,\n        <code>Quality</code> and <code>Landmarks</code>. If you provide <code>[\"ALL\"]</code>, all\n      facial attributes are returned but the operation will take longer to complete.</simpara>\n         <simpara>If you provide both, <code>[\"ALL\", \"DEFAULT\"]</code>, the service uses a logical AND\n      operator to determine which attributes to return (in this case, all attributes). </simpara>\n      ",
            "documentation": "\n         <p>An array of facial attributes that you want to be returned. This can be the default\n      list of attributes or all attributes. If you don't specify a value for <code>Attributes</code>\n      or if you specify <code>[\"DEFAULT\"]</code>, the API returns the following subset of facial\n      attributes: <code>BoundingBox</code>, <code>Confidence</code>, <code>Pose</code>,\n        <code>Quality</code> and <code>Landmarks</code>. If you provide <code>[\"ALL\"]</code>, all\n      facial attributes are returned but the operation will take longer to complete.</p>\n         <p>If you provide both, <code>[\"ALL\", \"DEFAULT\"]</code>, the service uses a logical AND\n      operator to determine which attributes to return (in this case, all attributes). </p>\n      ",
            "shape_name": "Attributes",
            "members": {
              "type": "string",
              "enum": [
                "DEFAULT",
                "ALL"
              ],
              "shape_name": "Attribute",
              "documentation": null
            }
          },
          "MaxFaces": {
            "type": "integer",
            "zonbookDocumentation": "\n         <para>The maximum number of faces to index. The value of <code>MaxFaces</code> must be greater than or equal to 1.  \n      <code>IndexFaces</code> returns no more that 100 detected faces in an image, even if you specify a larger value for \n        <code>MaxFaces</code>.</para>\n         <para>If <code>IndexFaces</code> detects more faces than the value of <code>MaxFaces</code>, \n      the faces with the lowest quality are filtered out first.\n      If there are still more faces than the value of <code>MaxFaces</code>, the faces with the smallest bounding\n      boxes are filtered out (up to the number needed to satisfy the value of <code>MaxFaces</code>). \n      Information about the unindexed faces is available in the <code>UnindexedFaces</code> array. </para>\n         <para>The faces returned by <code>IndexFaces</code> are sorted, in descending order, by the largest face bounding \n      box size, to the smallest.</para>\n      ",
            "documentation": "\n         <p>The maximum number of faces to index. The value of <code>MaxFaces</code> must be greater than or equal to 1.  \n      <code>IndexFaces</code> returns no more that 100 detected faces in an image, even if you specify a larger value for \n        <code>MaxFaces</code>.</p>\n         <p>If <code>IndexFaces</code> detects more faces than the value of <code>MaxFaces</code>, \n      the faces with the lowest quality are filtered out first.\n      If there are still more faces than the value of <code>MaxFaces</code>, the faces with the smallest bounding\n      boxes are filtered out (up to the number needed to satisfy the value of <code>MaxFaces</code>). \n      Information about the unindexed faces is available in the <code>UnindexedFaces</code> array. </p>\n         <p>The faces returned by <code>IndexFaces</code> are sorted, in descending order, by the largest face bounding \n      box size, to the smallest.</p>\n      ",
            "shape_name": "MaxFacesToIndex",
            "min_length": 1
          },
          "QualityFilter": {
            "type": "string",
            "enum": [
              "NONE",
              "AUTO"
            ],
            "zonbookDocumentation": "\n         <para>Specifies how much filtering is done to identify faces detected with low quality. Filtered faces are not indexed.\n      If you specify <code>AUTO</code>, filtering prioritizes the identification of faces that don’t meet the required \n      quality bar chosen by Amazon Rekognition. The quality bar is based on a variety of common use cases. Low quality \n      detections can arise for a number of reasons. For example, an object misidentified as a face, a face that is too blurry, or a\n      face with a pose that is too extreme to use. If you specify <code>NONE</code>, no \n      filtering is performed. The default value is NONE.</para>\n      ",
            "documentation": "\n         <p>Specifies how much filtering is done to identify faces detected with low quality. Filtered faces are not indexed.\n      If you specify <code>AUTO</code>, filtering prioritizes the identification of faces that don’t meet the required \n      quality bar chosen by Amazon Rekognition. The quality bar is based on a variety of common use cases. Low quality \n      detections can arise for a number of reasons. For example, an object misidentified as a face, a face that is too blurry, or a\n      face with a pose that is too extreme to use. If you specify <code>NONE</code>, no \n      filtering is performed. The default value is NONE.</p>\n      ",
            "shape_name": "QualityFilter"
          }
        },
        "shape_name": "IndexFacesRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "FaceRecords": {
            "type": "list",
            "zonbookDocumentation": "\n\n         <simpara>An array of faces detected and added to the collection.\n      For more information, see <xref linkend=\"collections-index-faces\"/>.\n      </simpara>\n    \n\n      ",
            "documentation": "\n\n    \n         <p>An array of faces detected and added to the collection.\n      For more information, see Searching Faces in a Collection in the Amazon Rekognition Developer Guide.\n    </p>\n\n      ",
            "shape_name": "FaceRecordList",
            "members": {
              "type": "structure",
              "members": {
                "Face": {
                  "type": "structure",
                  "members": {
                    "FaceId": {
                      "type": "string",
                      "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
                      "zonbookDocumentation": "\n         <simpara>Unique identifier that Amazon Rekognition assigns to the face.</simpara>\n      ",
                      "documentation": "\n         <p>Unique identifier that Amazon Rekognition assigns to the face.</p>\n      ",
                      "shape_name": "FaceId"
                    },
                    "BoundingBox": {
                      "type": "structure",
                      "members": {
                        "Width": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Width of the bounding box as a ratio of the overall image width.</simpara>\n      ",
                          "documentation": "\n         <p>Width of the bounding box as a ratio of the overall image width.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Height": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Height of the bounding box as a ratio of the overall image height.</simpara>\n      ",
                          "documentation": "\n         <p>Height of the bounding box as a ratio of the overall image height.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Left": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Left coordinate of the bounding box as a ratio of overall image width.</simpara>\n      ",
                          "documentation": "\n         <p>Left coordinate of the bounding box as a ratio of overall image width.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Top": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Top coordinate of the bounding box as a ratio of overall image height.</simpara>\n      ",
                          "documentation": "\n         <p>Top coordinate of the bounding box as a ratio of overall image height.</p>\n      ",
                          "shape_name": "Float"
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Bounding box of the face.</simpara>\n      ",
                      "documentation": "\n         <p>Bounding box of the face.</p>\n      ",
                      "shape_name": "BoundingBox"
                    },
                    "ImageId": {
                      "type": "string",
                      "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
                      "zonbookDocumentation": "\n         <simpara>Unique identifier that Amazon Rekognition assigns to the input image.</simpara>\n      ",
                      "documentation": "\n         <p>Unique identifier that Amazon Rekognition assigns to the input image.</p>\n      ",
                      "shape_name": "ImageId"
                    },
                    "ExternalImageId": {
                      "type": "string",
                      "pattern": "[a-zA-Z0-9_.\\-:]+",
                      "zonbookDocumentation": "\n         <simpara>Identifier that you assign to all the faces in the input image.</simpara>\n      ",
                      "documentation": "\n         <p>Identifier that you assign to all the faces in the input image.</p>\n      ",
                      "shape_name": "ExternalImageId",
                      "min_length": 1,
                      "max_length": 255
                    },
                    "Confidence": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Confidence level that the bounding box contains a face (and not a different object such\n      as a tree).</simpara>\n      ",
                      "documentation": "\n         <p>Confidence level that the bounding box contains a face (and not a different object such\n      as a tree).</p>\n      ",
                      "shape_name": "Percent",
                      "min_length": 0,
                      "max_length": 100
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Describes the face properties such as the bounding box, face ID, image ID of the input\n      image, and external image ID that you assigned. </simpara>\n      ",
                  "documentation": "\n         <p>Describes the face properties such as the bounding box, face ID, image ID of the input\n      image, and external image ID that you assigned. </p>\n      ",
                  "shape_name": "Face"
                },
                "FaceDetail": {
                  "type": "structure",
                  "members": {
                    "BoundingBox": {
                      "type": "structure",
                      "members": {
                        "Width": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Width of the bounding box as a ratio of the overall image width.</simpara>\n      ",
                          "documentation": "\n         <p>Width of the bounding box as a ratio of the overall image width.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Height": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Height of the bounding box as a ratio of the overall image height.</simpara>\n      ",
                          "documentation": "\n         <p>Height of the bounding box as a ratio of the overall image height.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Left": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Left coordinate of the bounding box as a ratio of overall image width.</simpara>\n      ",
                          "documentation": "\n         <p>Left coordinate of the bounding box as a ratio of overall image width.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Top": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Top coordinate of the bounding box as a ratio of overall image height.</simpara>\n      ",
                          "documentation": "\n         <p>Top coordinate of the bounding box as a ratio of overall image height.</p>\n      ",
                          "shape_name": "Float"
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Bounding box of the face. Default attribute.</simpara>\n      ",
                      "documentation": "\n         <p>Bounding box of the face. Default attribute.</p>\n      ",
                      "shape_name": "BoundingBox"
                    },
                    "AgeRange": {
                      "type": "structure",
                      "members": {
                        "Low": {
                          "type": "integer",
                          "zonbookDocumentation": "\n         <simpara>The lowest estimated age.</simpara>\n      ",
                          "documentation": "\n         <p>The lowest estimated age.</p>\n      ",
                          "shape_name": "UInteger",
                          "min_length": 0
                        },
                        "High": {
                          "type": "integer",
                          "zonbookDocumentation": "\n         <simpara>The highest estimated age.</simpara>\n      ",
                          "documentation": "\n         <p>The highest estimated age.</p>\n      ",
                          "shape_name": "UInteger",
                          "min_length": 0
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>The estimated age range, in years, for the face. Low represents the lowest estimated\n      age and High represents the highest estimated age.</simpara>\n      ",
                      "documentation": "\n         <p>The estimated age range, in years, for the face. Low represents the lowest estimated\n      age and High represents the highest estimated age.</p>\n      ",
                      "shape_name": "AgeRange"
                    },
                    "Smile": {
                      "type": "structure",
                      "members": {
                        "Value": {
                          "type": "boolean",
                          "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the face is smiling or not.</simpara>\n      ",
                          "documentation": "\n         <p>Boolean value that indicates whether the face is smiling or not.</p>\n      ",
                          "shape_name": "Boolean"
                        },
                        "Confidence": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                          "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                          "shape_name": "Percent",
                          "min_length": 0,
                          "max_length": 100
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Indicates whether or not the face is smiling, and the confidence level in the\n      determination.</simpara>\n      ",
                      "documentation": "\n         <p>Indicates whether or not the face is smiling, and the confidence level in the\n      determination.</p>\n      ",
                      "shape_name": "Smile"
                    },
                    "Eyeglasses": {
                      "type": "structure",
                      "members": {
                        "Value": {
                          "type": "boolean",
                          "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the face is wearing eye glasses or not.</simpara>\n      ",
                          "documentation": "\n         <p>Boolean value that indicates whether the face is wearing eye glasses or not.</p>\n      ",
                          "shape_name": "Boolean"
                        },
                        "Confidence": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                          "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                          "shape_name": "Percent",
                          "min_length": 0,
                          "max_length": 100
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Indicates whether or not the face is wearing eye glasses, and the confidence level in\n      the determination.</simpara>\n      ",
                      "documentation": "\n         <p>Indicates whether or not the face is wearing eye glasses, and the confidence level in\n      the determination.</p>\n      ",
                      "shape_name": "Eyeglasses"
                    },
                    "Sunglasses": {
                      "type": "structure",
                      "members": {
                        "Value": {
                          "type": "boolean",
                          "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the face is wearing sunglasses or not.</simpara>\n      ",
                          "documentation": "\n         <p>Boolean value that indicates whether the face is wearing sunglasses or not.</p>\n      ",
                          "shape_name": "Boolean"
                        },
                        "Confidence": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                          "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                          "shape_name": "Percent",
                          "min_length": 0,
                          "max_length": 100
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Indicates whether or not the face is wearing sunglasses, and the confidence level in\n      the determination.</simpara>\n      ",
                      "documentation": "\n         <p>Indicates whether or not the face is wearing sunglasses, and the confidence level in\n      the determination.</p>\n      ",
                      "shape_name": "Sunglasses"
                    },
                    "Gender": {
                      "type": "structure",
                      "members": {
                        "Value": {
                          "type": "string",
                          "enum": [
                            "Male",
                            "Female"
                          ],
                          "zonbookDocumentation": "\n         <simpara>Gender of the face.</simpara>\n      ",
                          "documentation": "\n         <p>Gender of the face.</p>\n      ",
                          "shape_name": "GenderType"
                        },
                        "Confidence": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                          "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                          "shape_name": "Percent",
                          "min_length": 0,
                          "max_length": 100
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Gender of the face and the confidence level in the determination.</simpara>\n      ",
                      "documentation": "\n         <p>Gender of the face and the confidence level in the determination.</p>\n      ",
                      "shape_name": "Gender"
                    },
                    "Beard": {
                      "type": "structure",
                      "members": {
                        "Value": {
                          "type": "boolean",
                          "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the face has beard or not.</simpara>\n      ",
                          "documentation": "\n         <p>Boolean value that indicates whether the face has beard or not.</p>\n      ",
                          "shape_name": "Boolean"
                        },
                        "Confidence": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                          "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                          "shape_name": "Percent",
                          "min_length": 0,
                          "max_length": 100
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Indicates whether or not the face has a beard, and the confidence level in the\n      determination.</simpara>\n      ",
                      "documentation": "\n         <p>Indicates whether or not the face has a beard, and the confidence level in the\n      determination.</p>\n      ",
                      "shape_name": "Beard"
                    },
                    "Mustache": {
                      "type": "structure",
                      "members": {
                        "Value": {
                          "type": "boolean",
                          "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the face has mustache or not.</simpara>\n      ",
                          "documentation": "\n         <p>Boolean value that indicates whether the face has mustache or not.</p>\n      ",
                          "shape_name": "Boolean"
                        },
                        "Confidence": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                          "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                          "shape_name": "Percent",
                          "min_length": 0,
                          "max_length": 100
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Indicates whether or not the face has a mustache, and the confidence level in the\n      determination.</simpara>\n      ",
                      "documentation": "\n         <p>Indicates whether or not the face has a mustache, and the confidence level in the\n      determination.</p>\n      ",
                      "shape_name": "Mustache"
                    },
                    "EyesOpen": {
                      "type": "structure",
                      "members": {
                        "Value": {
                          "type": "boolean",
                          "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the eyes on the face are open.</simpara>\n      ",
                          "documentation": "\n         <p>Boolean value that indicates whether the eyes on the face are open.</p>\n      ",
                          "shape_name": "Boolean"
                        },
                        "Confidence": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                          "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                          "shape_name": "Percent",
                          "min_length": 0,
                          "max_length": 100
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Indicates whether or not the eyes on the face are open, and the confidence level in the\n      determination.</simpara>\n      ",
                      "documentation": "\n         <p>Indicates whether or not the eyes on the face are open, and the confidence level in the\n      determination.</p>\n      ",
                      "shape_name": "EyeOpen"
                    },
                    "MouthOpen": {
                      "type": "structure",
                      "members": {
                        "Value": {
                          "type": "boolean",
                          "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the mouth on the face is open or not.</simpara>\n      ",
                          "documentation": "\n         <p>Boolean value that indicates whether the mouth on the face is open or not.</p>\n      ",
                          "shape_name": "Boolean"
                        },
                        "Confidence": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                          "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                          "shape_name": "Percent",
                          "min_length": 0,
                          "max_length": 100
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Indicates whether or not the mouth on the face is open, and the confidence level in the\n      determination.</simpara>\n      ",
                      "documentation": "\n         <p>Indicates whether or not the mouth on the face is open, and the confidence level in the\n      determination.</p>\n      ",
                      "shape_name": "MouthOpen"
                    },
                    "Emotions": {
                      "type": "list",
                      "zonbookDocumentation": "\n         <simpara>The emotions detected on the face, and the confidence level in the determination. For\n      example, HAPPY, SAD, and ANGRY. </simpara>\n      ",
                      "documentation": "\n         <p>The emotions detected on the face, and the confidence level in the determination. For\n      example, HAPPY, SAD, and ANGRY. </p>\n      ",
                      "shape_name": "Emotions",
                      "members": {
                        "type": "structure",
                        "members": {
                          "Type": {
                            "type": "string",
                            "enum": [
                              "HAPPY",
                              "SAD",
                              "ANGRY",
                              "CONFUSED",
                              "DISGUSTED",
                              "SURPRISED",
                              "CALM",
                              "UNKNOWN"
                            ],
                            "zonbookDocumentation": "\n         <simpara>Type of emotion detected.</simpara>\n      ",
                            "documentation": "\n         <p>Type of emotion detected.</p>\n      ",
                            "shape_name": "EmotionName"
                          },
                          "Confidence": {
                            "type": "float",
                            "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                            "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                            "shape_name": "Percent",
                            "min_length": 0,
                            "max_length": 100
                          }
                        },
                        "zonbookDocumentation": "\n         <simpara>The emotions detected on the face, and the confidence level in the determination. For\n      example, HAPPY, SAD, and ANGRY.</simpara>\n      ",
                        "documentation": "\n         <p>The emotions detected on the face, and the confidence level in the determination. For\n      example, HAPPY, SAD, and ANGRY.</p>\n      ",
                        "shape_name": "Emotion"
                      }
                    },
                    "Landmarks": {
                      "type": "list",
                      "zonbookDocumentation": "\n         <simpara>Indicates the location of landmarks on the face. Default attribute.</simpara>\n      ",
                      "documentation": "\n         <p>Indicates the location of landmarks on the face. Default attribute.</p>\n      ",
                      "shape_name": "Landmarks",
                      "members": {
                        "type": "structure",
                        "members": {
                          "Type": {
                            "type": "string",
                            "enum": [
                              "eyeLeft",
                              "eyeRight",
                              "nose",
                              "mouthLeft",
                              "mouthRight",
                              "leftEyeBrowLeft",
                              "leftEyeBrowRight",
                              "leftEyeBrowUp",
                              "rightEyeBrowLeft",
                              "rightEyeBrowRight",
                              "rightEyeBrowUp",
                              "leftEyeLeft",
                              "leftEyeRight",
                              "leftEyeUp",
                              "leftEyeDown",
                              "rightEyeLeft",
                              "rightEyeRight",
                              "rightEyeUp",
                              "rightEyeDown",
                              "noseLeft",
                              "noseRight",
                              "mouthUp",
                              "mouthDown",
                              "leftPupil",
                              "rightPupil"
                            ],
                            "zonbookDocumentation": "\n         <simpara>Type of the landmark.</simpara>\n      ",
                            "documentation": "\n         <p>Type of the landmark.</p>\n      ",
                            "shape_name": "LandmarkType"
                          },
                          "X": {
                            "type": "float",
                            "zonbookDocumentation": "\n         <simpara>x-coordinate from the top left of the landmark expressed as the ratio of the width of\n      the image. For example, if the images is 700x200 and the x-coordinate of the landmark is at\n      350 pixels, this value is 0.5. </simpara>\n      ",
                            "documentation": "\n         <p>x-coordinate from the top left of the landmark expressed as the ratio of the width of\n      the image. For example, if the images is 700x200 and the x-coordinate of the landmark is at\n      350 pixels, this value is 0.5. </p>\n      ",
                            "shape_name": "Float"
                          },
                          "Y": {
                            "type": "float",
                            "zonbookDocumentation": "\n         <simpara>y-coordinate from the top left of the landmark expressed as the ratio of the height of\n      the image. For example, if the images is 700x200 and the y-coordinate of the landmark is at\n      100 pixels, this value is 0.5.</simpara>\n      ",
                            "documentation": "\n         <p>y-coordinate from the top left of the landmark expressed as the ratio of the height of\n      the image. For example, if the images is 700x200 and the y-coordinate of the landmark is at\n      100 pixels, this value is 0.5.</p>\n      ",
                            "shape_name": "Float"
                          }
                        },
                        "zonbookDocumentation": "\n         <simpara>Indicates the location of the landmark on the face.</simpara>\n      ",
                        "documentation": "\n         <p>Indicates the location of the landmark on the face.</p>\n      ",
                        "shape_name": "Landmark"
                      }
                    },
                    "Pose": {
                      "type": "structure",
                      "members": {
                        "Roll": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Value representing the face rotation on the roll axis.</simpara>\n      ",
                          "documentation": "\n         <p>Value representing the face rotation on the roll axis.</p>\n      ",
                          "shape_name": "Degree",
                          "min_length": -180,
                          "max_length": 180
                        },
                        "Yaw": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Value representing the face rotation on the yaw axis.</simpara>\n      ",
                          "documentation": "\n         <p>Value representing the face rotation on the yaw axis.</p>\n      ",
                          "shape_name": "Degree",
                          "min_length": -180,
                          "max_length": 180
                        },
                        "Pitch": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Value representing the face rotation on the pitch axis.</simpara>\n      ",
                          "documentation": "\n         <p>Value representing the face rotation on the pitch axis.</p>\n      ",
                          "shape_name": "Degree",
                          "min_length": -180,
                          "max_length": 180
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Indicates the pose of the face as determined by its pitch, roll, and yaw. Default attribute.</simpara>\n      ",
                      "documentation": "\n         <p>Indicates the pose of the face as determined by its pitch, roll, and yaw. Default attribute.</p>\n      ",
                      "shape_name": "Pose"
                    },
                    "Quality": {
                      "type": "structure",
                      "members": {
                        "Brightness": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Value representing brightness of the face. The service returns a value between 0 and\n      100 (inclusive). A higher value indicates a brighter face image.</simpara>\n      ",
                          "documentation": "\n         <p>Value representing brightness of the face. The service returns a value between 0 and\n      100 (inclusive). A higher value indicates a brighter face image.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Sharpness": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Value representing sharpness of the face. The service returns a value between 0 and 100\n      (inclusive). A higher value indicates a sharper face image.</simpara>\n      ",
                          "documentation": "\n         <p>Value representing sharpness of the face. The service returns a value between 0 and 100\n      (inclusive). A higher value indicates a sharper face image.</p>\n      ",
                          "shape_name": "Float"
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Identifies image brightness and sharpness. Default attribute.</simpara>\n      ",
                      "documentation": "\n         <p>Identifies image brightness and sharpness. Default attribute.</p>\n      ",
                      "shape_name": "ImageQuality"
                    },
                    "Confidence": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Confidence level that the bounding box contains a face (and not a different object such\n      as a tree). Default attribute.</simpara>\n      ",
                      "documentation": "\n         <p>Confidence level that the bounding box contains a face (and not a different object such\n      as a tree). Default attribute.</p>\n      ",
                      "shape_name": "Percent",
                      "min_length": 0,
                      "max_length": 100
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Structure containing attributes of the face that the algorithm detected.</simpara>\n      ",
                  "documentation": "\n         <p>Structure containing attributes of the face that the algorithm detected.</p>\n      ",
                  "shape_name": "FaceDetail"
                }
              },
              "zonbookDocumentation": "\n         <simpara>Object containing both the face metadata (stored in the back-end database) and facial\n      attributes that are detected but aren't stored in the database.</simpara>\n      ",
              "documentation": "\n         <p>Object containing both the face metadata (stored in the back-end database) and facial\n      attributes that are detected but aren't stored in the database.</p>\n      ",
              "shape_name": "FaceRecord"
            }
          },
          "OrientationCorrection": {
            "type": "string",
            "enum": [
              "ROTATE_0",
              "ROTATE_90",
              "ROTATE_180",
              "ROTATE_270"
            ],
            "zonbookDocumentation": "\n         <simpara>The orientation of the input image (counterclockwise direction). If your application\n      displays the image, you can use this value to correct image orientation. The bounding box\n      coordinates returned in <code>FaceRecords</code> represent face locations before the image\n      orientation is corrected. </simpara>\n         <note>\n            <simpara>If the input image is in jpeg format, it might contain exchangeable image (Exif)\n        metadata. If so, and the Exif metadata populates the orientation field, the value of\n          <code>OrientationCorrection</code> is null and the bounding box coordinates in\n          <code>FaceRecords</code> represent face locations after Exif metadata is used to correct\n        the image orientation. Images in .png format don't contain Exif metadata.</simpara>\n         </note>\n      ",
            "documentation": "\n         <p>The orientation of the input image (counterclockwise direction). If your application\n      displays the image, you can use this value to correct image orientation. The bounding box\n      coordinates returned in <code>FaceRecords</code> represent face locations before the image\n      orientation is corrected. </p>\n         <note>\n            <p>If the input image is in jpeg format, it might contain exchangeable image (Exif)\n        metadata. If so, and the Exif metadata populates the orientation field, the value of\n          <code>OrientationCorrection</code> is null and the bounding box coordinates in\n          <code>FaceRecords</code> represent face locations after Exif metadata is used to correct\n        the image orientation. Images in .png format don't contain Exif metadata.</p>\n         </note>\n      ",
            "shape_name": "OrientationCorrection"
          },
          "FaceModelVersion": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>Version number of the face detection model associated with the input collection (<code>CollectionId</code>).</simpara>\n      ",
            "documentation": "\n         <p>Version number of the face detection model associated with the input collection (<code>CollectionId</code>).</p>\n      ",
            "shape_name": "String"
          },
          "UnindexedFaces": {
            "type": "list",
            "zonbookDocumentation": "\n         <para>An array of faces that detected in the image but not indexed either because the quality filter deemed them to be \n      of low-quality or the <code>MaxFaces</code> request parameter filtered them out. To use the quality filter, you specify the \n      <code>QualityFilter</code> request parameter.</para>\n      ",
            "documentation": "\n         <p>An array of faces that detected in the image but not indexed either because the quality filter deemed them to be \n      of low-quality or the <code>MaxFaces</code> request parameter filtered them out. To use the quality filter, you specify the \n      <code>QualityFilter</code> request parameter.</p>\n      ",
            "shape_name": "UnindexedFaces",
            "members": {
              "type": "structure",
              "members": {
                "Reasons": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <para>An array of reasons specifying why a face was not indexed. \n</para>\n         <itemizedlist>\n            <listitem>\n               <para>EXTREME_POSE - The face is at a pose that can't be detected. For example, \n        the head is turned too far away from the camera.</para>\n            </listitem>\n            <listitem>\n               <para>EXCEEDS_MAX_FACES - The number of faces detected is already higher than that specified by the \n      <code>MaxFaces</code> input parameter for <code>IndexFaces</code>.</para>\n            </listitem>\n            <listitem>\n               <para>LOW_BRIGHTNESS - The image is too dark.</para>\n            </listitem>\n            <listitem>\n               <para>LOW_SHARPNESS - The image is too blurry.</para>\n            </listitem>\n            <listitem>\n               <para>LOW_CONFIDENCE - The face was detected with a low confidence.</para>\n            </listitem>\n            <listitem>\n               <para>SMALL_BOUNDING_BOX - The bounding box around the face is too small.</para>\n            </listitem>\n         </itemizedlist>\n      ",
                  "documentation": "\n         <p>An array of reasons specifying why a face was not indexed. \n</p>\n         <ul>\n            <li>\n               <p>EXTREME_POSE - The face is at a pose that can't be detected. For example, \n        the head is turned too far away from the camera.</p>\n            </li>\n            <li>\n               <p>EXCEEDS_MAX_FACES - The number of faces detected is already higher than that specified by the \n      <code>MaxFaces</code> input parameter for <code>IndexFaces</code>.</p>\n            </li>\n            <li>\n               <p>LOW_BRIGHTNESS - The image is too dark.</p>\n            </li>\n            <li>\n               <p>LOW_SHARPNESS - The image is too blurry.</p>\n            </li>\n            <li>\n               <p>LOW_CONFIDENCE - The face was detected with a low confidence.</p>\n            </li>\n            <li>\n               <p>SMALL_BOUNDING_BOX - The bounding box around the face is too small.</p>\n            </li>\n         </ul>\n      ",
                  "shape_name": "Reasons",
                  "members": {
                    "type": "string",
                    "enum": [
                      "EXCEEDS_MAX_FACES",
                      "EXTREME_POSE",
                      "LOW_BRIGHTNESS",
                      "LOW_SHARPNESS",
                      "LOW_CONFIDENCE",
                      "SMALL_BOUNDING_BOX"
                    ],
                    "shape_name": "Reason",
                    "documentation": null
                  }
                },
                "FaceDetail": {
                  "type": "structure",
                  "members": {
                    "BoundingBox": {
                      "type": "structure",
                      "members": {
                        "Width": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Width of the bounding box as a ratio of the overall image width.</simpara>\n      ",
                          "documentation": "\n         <p>Width of the bounding box as a ratio of the overall image width.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Height": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Height of the bounding box as a ratio of the overall image height.</simpara>\n      ",
                          "documentation": "\n         <p>Height of the bounding box as a ratio of the overall image height.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Left": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Left coordinate of the bounding box as a ratio of overall image width.</simpara>\n      ",
                          "documentation": "\n         <p>Left coordinate of the bounding box as a ratio of overall image width.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Top": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Top coordinate of the bounding box as a ratio of overall image height.</simpara>\n      ",
                          "documentation": "\n         <p>Top coordinate of the bounding box as a ratio of overall image height.</p>\n      ",
                          "shape_name": "Float"
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Bounding box of the face. Default attribute.</simpara>\n      ",
                      "documentation": "\n         <p>Bounding box of the face. Default attribute.</p>\n      ",
                      "shape_name": "BoundingBox"
                    },
                    "AgeRange": {
                      "type": "structure",
                      "members": {
                        "Low": {
                          "type": "integer",
                          "zonbookDocumentation": "\n         <simpara>The lowest estimated age.</simpara>\n      ",
                          "documentation": "\n         <p>The lowest estimated age.</p>\n      ",
                          "shape_name": "UInteger",
                          "min_length": 0
                        },
                        "High": {
                          "type": "integer",
                          "zonbookDocumentation": "\n         <simpara>The highest estimated age.</simpara>\n      ",
                          "documentation": "\n         <p>The highest estimated age.</p>\n      ",
                          "shape_name": "UInteger",
                          "min_length": 0
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>The estimated age range, in years, for the face. Low represents the lowest estimated\n      age and High represents the highest estimated age.</simpara>\n      ",
                      "documentation": "\n         <p>The estimated age range, in years, for the face. Low represents the lowest estimated\n      age and High represents the highest estimated age.</p>\n      ",
                      "shape_name": "AgeRange"
                    },
                    "Smile": {
                      "type": "structure",
                      "members": {
                        "Value": {
                          "type": "boolean",
                          "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the face is smiling or not.</simpara>\n      ",
                          "documentation": "\n         <p>Boolean value that indicates whether the face is smiling or not.</p>\n      ",
                          "shape_name": "Boolean"
                        },
                        "Confidence": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                          "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                          "shape_name": "Percent",
                          "min_length": 0,
                          "max_length": 100
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Indicates whether or not the face is smiling, and the confidence level in the\n      determination.</simpara>\n      ",
                      "documentation": "\n         <p>Indicates whether or not the face is smiling, and the confidence level in the\n      determination.</p>\n      ",
                      "shape_name": "Smile"
                    },
                    "Eyeglasses": {
                      "type": "structure",
                      "members": {
                        "Value": {
                          "type": "boolean",
                          "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the face is wearing eye glasses or not.</simpara>\n      ",
                          "documentation": "\n         <p>Boolean value that indicates whether the face is wearing eye glasses or not.</p>\n      ",
                          "shape_name": "Boolean"
                        },
                        "Confidence": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                          "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                          "shape_name": "Percent",
                          "min_length": 0,
                          "max_length": 100
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Indicates whether or not the face is wearing eye glasses, and the confidence level in\n      the determination.</simpara>\n      ",
                      "documentation": "\n         <p>Indicates whether or not the face is wearing eye glasses, and the confidence level in\n      the determination.</p>\n      ",
                      "shape_name": "Eyeglasses"
                    },
                    "Sunglasses": {
                      "type": "structure",
                      "members": {
                        "Value": {
                          "type": "boolean",
                          "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the face is wearing sunglasses or not.</simpara>\n      ",
                          "documentation": "\n         <p>Boolean value that indicates whether the face is wearing sunglasses or not.</p>\n      ",
                          "shape_name": "Boolean"
                        },
                        "Confidence": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                          "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                          "shape_name": "Percent",
                          "min_length": 0,
                          "max_length": 100
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Indicates whether or not the face is wearing sunglasses, and the confidence level in\n      the determination.</simpara>\n      ",
                      "documentation": "\n         <p>Indicates whether or not the face is wearing sunglasses, and the confidence level in\n      the determination.</p>\n      ",
                      "shape_name": "Sunglasses"
                    },
                    "Gender": {
                      "type": "structure",
                      "members": {
                        "Value": {
                          "type": "string",
                          "enum": [
                            "Male",
                            "Female"
                          ],
                          "zonbookDocumentation": "\n         <simpara>Gender of the face.</simpara>\n      ",
                          "documentation": "\n         <p>Gender of the face.</p>\n      ",
                          "shape_name": "GenderType"
                        },
                        "Confidence": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                          "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                          "shape_name": "Percent",
                          "min_length": 0,
                          "max_length": 100
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Gender of the face and the confidence level in the determination.</simpara>\n      ",
                      "documentation": "\n         <p>Gender of the face and the confidence level in the determination.</p>\n      ",
                      "shape_name": "Gender"
                    },
                    "Beard": {
                      "type": "structure",
                      "members": {
                        "Value": {
                          "type": "boolean",
                          "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the face has beard or not.</simpara>\n      ",
                          "documentation": "\n         <p>Boolean value that indicates whether the face has beard or not.</p>\n      ",
                          "shape_name": "Boolean"
                        },
                        "Confidence": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                          "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                          "shape_name": "Percent",
                          "min_length": 0,
                          "max_length": 100
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Indicates whether or not the face has a beard, and the confidence level in the\n      determination.</simpara>\n      ",
                      "documentation": "\n         <p>Indicates whether or not the face has a beard, and the confidence level in the\n      determination.</p>\n      ",
                      "shape_name": "Beard"
                    },
                    "Mustache": {
                      "type": "structure",
                      "members": {
                        "Value": {
                          "type": "boolean",
                          "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the face has mustache or not.</simpara>\n      ",
                          "documentation": "\n         <p>Boolean value that indicates whether the face has mustache or not.</p>\n      ",
                          "shape_name": "Boolean"
                        },
                        "Confidence": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                          "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                          "shape_name": "Percent",
                          "min_length": 0,
                          "max_length": 100
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Indicates whether or not the face has a mustache, and the confidence level in the\n      determination.</simpara>\n      ",
                      "documentation": "\n         <p>Indicates whether or not the face has a mustache, and the confidence level in the\n      determination.</p>\n      ",
                      "shape_name": "Mustache"
                    },
                    "EyesOpen": {
                      "type": "structure",
                      "members": {
                        "Value": {
                          "type": "boolean",
                          "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the eyes on the face are open.</simpara>\n      ",
                          "documentation": "\n         <p>Boolean value that indicates whether the eyes on the face are open.</p>\n      ",
                          "shape_name": "Boolean"
                        },
                        "Confidence": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                          "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                          "shape_name": "Percent",
                          "min_length": 0,
                          "max_length": 100
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Indicates whether or not the eyes on the face are open, and the confidence level in the\n      determination.</simpara>\n      ",
                      "documentation": "\n         <p>Indicates whether or not the eyes on the face are open, and the confidence level in the\n      determination.</p>\n      ",
                      "shape_name": "EyeOpen"
                    },
                    "MouthOpen": {
                      "type": "structure",
                      "members": {
                        "Value": {
                          "type": "boolean",
                          "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the mouth on the face is open or not.</simpara>\n      ",
                          "documentation": "\n         <p>Boolean value that indicates whether the mouth on the face is open or not.</p>\n      ",
                          "shape_name": "Boolean"
                        },
                        "Confidence": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                          "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                          "shape_name": "Percent",
                          "min_length": 0,
                          "max_length": 100
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Indicates whether or not the mouth on the face is open, and the confidence level in the\n      determination.</simpara>\n      ",
                      "documentation": "\n         <p>Indicates whether or not the mouth on the face is open, and the confidence level in the\n      determination.</p>\n      ",
                      "shape_name": "MouthOpen"
                    },
                    "Emotions": {
                      "type": "list",
                      "zonbookDocumentation": "\n         <simpara>The emotions detected on the face, and the confidence level in the determination. For\n      example, HAPPY, SAD, and ANGRY. </simpara>\n      ",
                      "documentation": "\n         <p>The emotions detected on the face, and the confidence level in the determination. For\n      example, HAPPY, SAD, and ANGRY. </p>\n      ",
                      "shape_name": "Emotions",
                      "members": {
                        "type": "structure",
                        "members": {
                          "Type": {
                            "type": "string",
                            "enum": [
                              "HAPPY",
                              "SAD",
                              "ANGRY",
                              "CONFUSED",
                              "DISGUSTED",
                              "SURPRISED",
                              "CALM",
                              "UNKNOWN"
                            ],
                            "zonbookDocumentation": "\n         <simpara>Type of emotion detected.</simpara>\n      ",
                            "documentation": "\n         <p>Type of emotion detected.</p>\n      ",
                            "shape_name": "EmotionName"
                          },
                          "Confidence": {
                            "type": "float",
                            "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                            "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                            "shape_name": "Percent",
                            "min_length": 0,
                            "max_length": 100
                          }
                        },
                        "zonbookDocumentation": "\n         <simpara>The emotions detected on the face, and the confidence level in the determination. For\n      example, HAPPY, SAD, and ANGRY.</simpara>\n      ",
                        "documentation": "\n         <p>The emotions detected on the face, and the confidence level in the determination. For\n      example, HAPPY, SAD, and ANGRY.</p>\n      ",
                        "shape_name": "Emotion"
                      }
                    },
                    "Landmarks": {
                      "type": "list",
                      "zonbookDocumentation": "\n         <simpara>Indicates the location of landmarks on the face. Default attribute.</simpara>\n      ",
                      "documentation": "\n         <p>Indicates the location of landmarks on the face. Default attribute.</p>\n      ",
                      "shape_name": "Landmarks",
                      "members": {
                        "type": "structure",
                        "members": {
                          "Type": {
                            "type": "string",
                            "enum": [
                              "eyeLeft",
                              "eyeRight",
                              "nose",
                              "mouthLeft",
                              "mouthRight",
                              "leftEyeBrowLeft",
                              "leftEyeBrowRight",
                              "leftEyeBrowUp",
                              "rightEyeBrowLeft",
                              "rightEyeBrowRight",
                              "rightEyeBrowUp",
                              "leftEyeLeft",
                              "leftEyeRight",
                              "leftEyeUp",
                              "leftEyeDown",
                              "rightEyeLeft",
                              "rightEyeRight",
                              "rightEyeUp",
                              "rightEyeDown",
                              "noseLeft",
                              "noseRight",
                              "mouthUp",
                              "mouthDown",
                              "leftPupil",
                              "rightPupil"
                            ],
                            "zonbookDocumentation": "\n         <simpara>Type of the landmark.</simpara>\n      ",
                            "documentation": "\n         <p>Type of the landmark.</p>\n      ",
                            "shape_name": "LandmarkType"
                          },
                          "X": {
                            "type": "float",
                            "zonbookDocumentation": "\n         <simpara>x-coordinate from the top left of the landmark expressed as the ratio of the width of\n      the image. For example, if the images is 700x200 and the x-coordinate of the landmark is at\n      350 pixels, this value is 0.5. </simpara>\n      ",
                            "documentation": "\n         <p>x-coordinate from the top left of the landmark expressed as the ratio of the width of\n      the image. For example, if the images is 700x200 and the x-coordinate of the landmark is at\n      350 pixels, this value is 0.5. </p>\n      ",
                            "shape_name": "Float"
                          },
                          "Y": {
                            "type": "float",
                            "zonbookDocumentation": "\n         <simpara>y-coordinate from the top left of the landmark expressed as the ratio of the height of\n      the image. For example, if the images is 700x200 and the y-coordinate of the landmark is at\n      100 pixels, this value is 0.5.</simpara>\n      ",
                            "documentation": "\n         <p>y-coordinate from the top left of the landmark expressed as the ratio of the height of\n      the image. For example, if the images is 700x200 and the y-coordinate of the landmark is at\n      100 pixels, this value is 0.5.</p>\n      ",
                            "shape_name": "Float"
                          }
                        },
                        "zonbookDocumentation": "\n         <simpara>Indicates the location of the landmark on the face.</simpara>\n      ",
                        "documentation": "\n         <p>Indicates the location of the landmark on the face.</p>\n      ",
                        "shape_name": "Landmark"
                      }
                    },
                    "Pose": {
                      "type": "structure",
                      "members": {
                        "Roll": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Value representing the face rotation on the roll axis.</simpara>\n      ",
                          "documentation": "\n         <p>Value representing the face rotation on the roll axis.</p>\n      ",
                          "shape_name": "Degree",
                          "min_length": -180,
                          "max_length": 180
                        },
                        "Yaw": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Value representing the face rotation on the yaw axis.</simpara>\n      ",
                          "documentation": "\n         <p>Value representing the face rotation on the yaw axis.</p>\n      ",
                          "shape_name": "Degree",
                          "min_length": -180,
                          "max_length": 180
                        },
                        "Pitch": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Value representing the face rotation on the pitch axis.</simpara>\n      ",
                          "documentation": "\n         <p>Value representing the face rotation on the pitch axis.</p>\n      ",
                          "shape_name": "Degree",
                          "min_length": -180,
                          "max_length": 180
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Indicates the pose of the face as determined by its pitch, roll, and yaw. Default attribute.</simpara>\n      ",
                      "documentation": "\n         <p>Indicates the pose of the face as determined by its pitch, roll, and yaw. Default attribute.</p>\n      ",
                      "shape_name": "Pose"
                    },
                    "Quality": {
                      "type": "structure",
                      "members": {
                        "Brightness": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Value representing brightness of the face. The service returns a value between 0 and\n      100 (inclusive). A higher value indicates a brighter face image.</simpara>\n      ",
                          "documentation": "\n         <p>Value representing brightness of the face. The service returns a value between 0 and\n      100 (inclusive). A higher value indicates a brighter face image.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Sharpness": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Value representing sharpness of the face. The service returns a value between 0 and 100\n      (inclusive). A higher value indicates a sharper face image.</simpara>\n      ",
                          "documentation": "\n         <p>Value representing sharpness of the face. The service returns a value between 0 and 100\n      (inclusive). A higher value indicates a sharper face image.</p>\n      ",
                          "shape_name": "Float"
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Identifies image brightness and sharpness. Default attribute.</simpara>\n      ",
                      "documentation": "\n         <p>Identifies image brightness and sharpness. Default attribute.</p>\n      ",
                      "shape_name": "ImageQuality"
                    },
                    "Confidence": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Confidence level that the bounding box contains a face (and not a different object such\n      as a tree). Default attribute.</simpara>\n      ",
                      "documentation": "\n         <p>Confidence level that the bounding box contains a face (and not a different object such\n      as a tree). Default attribute.</p>\n      ",
                      "shape_name": "Percent",
                      "min_length": 0,
                      "max_length": 100
                    }
                  },
                  "zonbookDocumentation": "\n         <para>Structure containing attributes of a face that was detected, but not indexed, by <code>IndexFaces</code>.\n    </para>\n      ",
                  "documentation": "\n         <p>Structure containing attributes of a face that was detected, but not indexed, by <code>IndexFaces</code>.\n    </p>\n      ",
                  "shape_name": "FaceDetail"
                }
              },
              "zonbookDocumentation": "\n         <para>A face detected by <xref linkend=\"API_IndexFaces\"/> but not indexed. Use the <code>Reasons</code> \n      response attribute to determine why a face is not indexed.</para>\n      ",
              "documentation": "\n         <p>A face detected by  but not indexed. Use the <code>Reasons</code> \n      response attribute to determine why a face is not indexed.</p>\n      ",
              "shape_name": "UnindexedFace"
            }
          }
        },
        "shape_name": "IndexFacesResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is unable to access the S3 object specified in the request.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is unable to access the S3 object specified in the request.</p>\n      ",
          "shape_name": "InvalidS3ObjectException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The input image size exceeds the allowed limit. For more information, see <xref linkend=\"limits\"/>. </simpara>\n    \n      ",
          "documentation": "\n    \n         <p>The input image size exceeds the allowed limit. For more information, see \n      Limits in Amazon Rekognition in the Amazon Rekognition Developer Guide. </p>\n      ",
          "shape_name": "ImageTooLargeException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The collection specified in the request cannot be found.</simpara>\n      ",
          "documentation": "\n         <p>The collection specified in the request cannot be found.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The provided image format is not supported. </simpara>\n      ",
          "documentation": "\n         <p>The provided image format is not supported. </p>\n      ",
          "shape_name": "InvalidImageFormatException"
        }
      ],
      "documentation": "\n         <p>Detects faces in the input image and adds them to the specified collection. </p>\n\n         <p>Amazon Rekognition does not save the actual faces detected.\n      Instead, the underlying detection algorithm first detects the faces in the input image,\n      and for each face extracts facial features into a feature vector, and stores it\n       in the back-end database.\n       Amazon Rekognition uses feature vectors when performing face match and search\n       operations using the  and\n       operations.</p>\n         <p>To get the number of faces in a collection, call .\n      </p>\n         <p>If you are using version 1.0 of the face detection model, <code>IndexFaces</code> \n     indexes the 15 largest faces in the input image. Later versions of the face detection model index\n     the 100 largest faces in the input image. To determine which version of the model you are using, call\n      and supply the collection ID. You also get the model\n     version from the value of <code>FaceModelVersion</code> in the response from <code>IndexFaces</code>.\n     </p>\n    \n         <p>For more information, see Model Versioning in the Amazon Rekognition Developer Guide.</p> \n    \n    \n         <p>If you provide the optional <code>ExternalImageID</code> for the\n      input image you provided, Amazon Rekognition associates this ID with all faces that it\n      detects. When you call the  operation, the response returns\n      the external ID. You can use this external image ID to create a\n      client-side index to associate the faces with each image. You can then use the index to\n      find all faces in an image.</p>\n         <p>You can specify the maximum number of faces to index with the <code>MaxFaces</code>\n        input parameter. This is useful when you want to index the largest faces in\n        an image, and you don't want to index other faces detected in the image.</p>\n         <p>The <code>QualityFilter</code> input parameter allows you to filter out detected faces\n      that don’t meet the required quality bar chosen by Amazon Rekognition. The quality bar is based on a \n      variety of common use cases.</p>\n    \n     \n         <p>In response, the operation returns an array of metadata for all detected faces, <code>FaceRecords</code>.\n      This includes: </p>\n         <ul>\n            <li>\n               <p>The bounding box, <code>BoundingBox</code>, of the detected face. </p>\n            </li>\n            <li>\n               <p>A confidence value, <code>Confidence</code>, indicating the confidence that the bounding box contains a face.</p>\n            </li>\n            <li>\n               <p>A face ID, <code>faceId</code>, assigned by the service for each face that is detected and stored.</p>\n            </li>\n            <li>\n               <p>An image ID, <code>ImageId</code>, assigned by the service for the input image.</p>\n            </li>\n         </ul>\n\n         <p>If you request all facial attributes (using the <code>detectionAttributes</code> parameter),\n      Amazon Rekognition returns detailed facial attributes such as facial landmarks\n      (for example, location of eye and mouth) and other facial attributes such gender.\n\n      If you provide the same image, specify the same collection, and use\n      the same external ID in the <code>IndexFaces</code> operation,\n      Amazon Rekognition doesn't save duplicate face metadata.</p>\n         <p>Information about faces detected in an image, but not indexed, is returned\n      in an array of  objects, <code>UnindexedFaces</code>. \n        Faces are not indexed for reasons such as:</p>\n         <ul>\n            <li>\n               <p>The face is too blurry.</p>\n            </li>\n            <li>\n               <p>The image is too dark.</p>\n            </li>\n            <li>\n               <p>The face has an extreme pose.</p>\n            </li>\n            <li>\n               <p>The face is too small.</p>\n            </li>\n            <li>\n               <p>The number of faces detected exceeds the value of the <code>MaxFaces</code> request parameter.</p>\n            </li>\n         </ul>  \n        \n        <p/>\n      \n\n    \n         <p>For more information, see Adding Faces to a Collection in the Amazon Rekognition Developer Guide.</p> \n\n    \n         <p>The input image is passed either as base64-encoded image bytes or as a reference\n      to an image in an Amazon S3 bucket. If you use the Amazon CLI to call Amazon Rekognition operations,\n      passing image bytes is not supported. The image must be either a PNG or JPEG formatted file.\n    </p>\n         <p>This operation requires permissions to perform the <code>rekognition:IndexFaces</code> action.</p>\n\n\n    \n      "
    },
    "DetectModerationLabels": {
      "name": "DetectModerationLabels",
      "input": {
        "type": "structure",
        "members": {
          "Image": {
            "type": "structure",
            "members": {
              "Bytes": {
                "type": "blob",
                "zonbookDocumentation": "\n         <simpara>Blob of image bytes up to 5 MBs.</simpara>\n      ",
                "documentation": "\n         <p>Blob of image bytes up to 5 MBs.</p>\n      ",
                "shape_name": "ImageBlob",
                "min_length": 1,
                "max_length": 5242880
              },
              "S3Object": {
                "type": "structure",
                "members": {
                  "Bucket": {
                    "type": "string",
                    "pattern": "[0-9A-Za-z\\.\\-_]*",
                    "zonbookDocumentation": "\n         <simpara>Name of the S3 bucket.</simpara>\n      ",
                    "documentation": "\n         <p>Name of the S3 bucket.</p>\n      ",
                    "shape_name": "S3Bucket",
                    "min_length": 3,
                    "max_length": 255
                  },
                  "Name": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>S3 object key name.</simpara>\n      ",
                    "documentation": "\n         <p>S3 object key name.</p>\n      ",
                    "shape_name": "S3ObjectName",
                    "min_length": 1,
                    "max_length": 1024
                  },
                  "Version": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>If the bucket is versioning enabled, you can specify the object version. </simpara>\n      ",
                    "documentation": "\n         <p>If the bucket is versioning enabled, you can specify the object version. </p>\n      ",
                    "shape_name": "S3ObjectVersion",
                    "min_length": 1,
                    "max_length": 1024
                  }
                },
                "zonbookDocumentation": "\n         <simpara>Identifies an S3 object as the image source.</simpara>\n      ",
                "documentation": "\n         <p>Identifies an S3 object as the image source.</p>\n      ",
                "shape_name": "S3Object"
              }
            },
            "zonbookDocumentation": "\n\n         <simpara>The input image as base64-encoded bytes or an S3 object.\n      If you use the AWS CLI to call Amazon Rekognition operations,\n      passing base64-encoded image bytes is not supported. </simpara>\n\n      ",
            "documentation": "\n\n         <p>The input image as base64-encoded bytes or an S3 object.\n      If you use the AWS CLI to call Amazon Rekognition operations,\n      passing base64-encoded image bytes is not supported. </p>\n\n      ",
            "required": true,
            "shape_name": "Image"
          },
          "MinConfidence": {
            "type": "float",
            "zonbookDocumentation": "\n         <simpara>Specifies the minimum confidence level for the labels to return. Amazon Rekognition doesn't\n      return any labels with a confidence level lower than this specified value.</simpara>\n         <simpara>If you don't specify <code>MinConfidence</code>, the operation returns labels with\n      confidence values greater than or equal to 50 percent.</simpara>\n      ",
            "documentation": "\n         <p>Specifies the minimum confidence level for the labels to return. Amazon Rekognition doesn't\n      return any labels with a confidence level lower than this specified value.</p>\n         <p>If you don't specify <code>MinConfidence</code>, the operation returns labels with\n      confidence values greater than or equal to 50 percent.</p>\n      ",
            "shape_name": "Percent",
            "min_length": 0,
            "max_length": 100
          }
        },
        "shape_name": "DetectModerationLabelsRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "ModerationLabels": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>Array of detected Moderation labels and the time, in millseconds from the\n      start of the video, they were detected.</simpara>\n      ",
            "documentation": "\n         <p>Array of detected Moderation labels and the time, in millseconds from the\n      start of the video, they were detected.</p>\n      ",
            "shape_name": "ModerationLabels",
            "members": {
              "type": "structure",
              "members": {
                "Confidence": {
                  "type": "float",
                  "zonbookDocumentation": "\n         <simpara>Specifies the confidence that Amazon Rekognition has that the label has been correctly\n      identified.</simpara>\n         <simpara>If you don't specify the <code>MinConfidence</code> parameter in the call to\n        <code>DetectModerationLabels</code>, the operation returns labels with a confidence value\n      greater than or equal to 50 percent.</simpara>\n      ",
                  "documentation": "\n         <p>Specifies the confidence that Amazon Rekognition has that the label has been correctly\n      identified.</p>\n         <p>If you don't specify the <code>MinConfidence</code> parameter in the call to\n        <code>DetectModerationLabels</code>, the operation returns labels with a confidence value\n      greater than or equal to 50 percent.</p>\n      ",
                  "shape_name": "Percent",
                  "min_length": 0,
                  "max_length": 100
                },
                "Name": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The label name for the type of content detected in the image.</simpara>\n      ",
                  "documentation": "\n         <p>The label name for the type of content detected in the image.</p>\n      ",
                  "shape_name": "String"
                },
                "ParentName": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The name for the parent label. Labels at the top-level of the hierarchy have the parent\n      label <code>\"\"</code>.</simpara>\n      ",
                  "documentation": "\n         <p>The name for the parent label. Labels at the top-level of the hierarchy have the parent\n      label <code>\"\"</code>.</p>\n      ",
                  "shape_name": "String"
                }
              },
              "zonbookDocumentation": "\n         <simpara>Provides information about a single type of moderated content found in an image or video. Each type of\n     moderated content has a label within a hierarchical taxonomy. For more information, see\n   <xref linkend=\"moderation\"/>.</simpara>\n    \n\n      ",
              "documentation": "\n     \n         <p>Provides information about a single type of moderated content found in an image or video. Each type of\n      moderated content has a label within a hierarchical taxonomy. For more information, see\n      Detecting Unsafe Content in the Amazon Rekognition Developer Guide.</p>\n\n      ",
              "shape_name": "ModerationLabel"
            }
          }
        },
        "shape_name": "DetectModerationLabelsResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is unable to access the S3 object specified in the request.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is unable to access the S3 object specified in the request.</p>\n      ",
          "shape_name": "InvalidS3ObjectException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The input image size exceeds the allowed limit. For more information, see <xref linkend=\"limits\"/>. </simpara>\n    \n      ",
          "documentation": "\n    \n         <p>The input image size exceeds the allowed limit. For more information, see \n      Limits in Amazon Rekognition in the Amazon Rekognition Developer Guide. </p>\n      ",
          "shape_name": "ImageTooLargeException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The provided image format is not supported. </simpara>\n      ",
          "documentation": "\n         <p>The provided image format is not supported. </p>\n      ",
          "shape_name": "InvalidImageFormatException"
        }
      ],
      "documentation": "\n\n         <p>Detects explicit or suggestive adult content in a specified JPEG or PNG format image.\n     Use <code>DetectModerationLabels</code> to moderate images depending on your requirements.\n     For example, you might want to filter images that contain nudity, but not images containing\n     suggestive content.</p>\n         <p>To filter images, use the labels returned by <code>DetectModerationLabels</code>\n     to determine which types of content are appropriate.</p>\n     \n         <p>For information about moderation labels,\n      see Detecting Unsafe Content in the Amazon Rekognition Developer Guide.</p>\n         <p>You pass the input image either as base64-encoded image bytes or as a reference\n      to an image in an Amazon S3 bucket. If you use the Amazon CLI to call Amazon Rekognition operations,\n      passing image bytes is not supported. The image must be either a PNG or JPEG formatted file.\n    </p>\n     \n      "
    },
    "RecognizeCelebrities": {
      "name": "RecognizeCelebrities",
      "input": {
        "type": "structure",
        "members": {
          "Image": {
            "type": "structure",
            "members": {
              "Bytes": {
                "type": "blob",
                "zonbookDocumentation": "\n         <simpara>Blob of image bytes up to 5 MBs.</simpara>\n      ",
                "documentation": "\n         <p>Blob of image bytes up to 5 MBs.</p>\n      ",
                "shape_name": "ImageBlob",
                "min_length": 1,
                "max_length": 5242880
              },
              "S3Object": {
                "type": "structure",
                "members": {
                  "Bucket": {
                    "type": "string",
                    "pattern": "[0-9A-Za-z\\.\\-_]*",
                    "zonbookDocumentation": "\n         <simpara>Name of the S3 bucket.</simpara>\n      ",
                    "documentation": "\n         <p>Name of the S3 bucket.</p>\n      ",
                    "shape_name": "S3Bucket",
                    "min_length": 3,
                    "max_length": 255
                  },
                  "Name": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>S3 object key name.</simpara>\n      ",
                    "documentation": "\n         <p>S3 object key name.</p>\n      ",
                    "shape_name": "S3ObjectName",
                    "min_length": 1,
                    "max_length": 1024
                  },
                  "Version": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>If the bucket is versioning enabled, you can specify the object version. </simpara>\n      ",
                    "documentation": "\n         <p>If the bucket is versioning enabled, you can specify the object version. </p>\n      ",
                    "shape_name": "S3ObjectVersion",
                    "min_length": 1,
                    "max_length": 1024
                  }
                },
                "zonbookDocumentation": "\n         <simpara>Identifies an S3 object as the image source.</simpara>\n      ",
                "documentation": "\n         <p>Identifies an S3 object as the image source.</p>\n      ",
                "shape_name": "S3Object"
              }
            },
            "zonbookDocumentation": "\n         <simpara>The input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call\n      Amazon Rekognition operations, passing base64-encoded image bytes is not supported. </simpara>\n      ",
            "documentation": "\n         <p>The input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call\n      Amazon Rekognition operations, passing base64-encoded image bytes is not supported. </p>\n      ",
            "required": true,
            "shape_name": "Image"
          }
        },
        "shape_name": "RecognizeCelebritiesRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "CelebrityFaces": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>Details about each celebrity found in the image. Amazon Rekognition can detect a maximum of 15\n      celebrities in an image.</simpara>\n      ",
            "documentation": "\n         <p>Details about each celebrity found in the image. Amazon Rekognition can detect a maximum of 15\n      celebrities in an image.</p>\n      ",
            "shape_name": "CelebrityList",
            "members": {
              "type": "structure",
              "members": {
                "Urls": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <simpara>An array of URLs pointing to additional information about the celebrity. If there is no\n      additional information about the celebrity, this list is empty.</simpara>\n      ",
                  "documentation": "\n         <p>An array of URLs pointing to additional information about the celebrity. If there is no\n      additional information about the celebrity, this list is empty.</p>\n      ",
                  "shape_name": "Urls",
                  "members": {
                    "type": "string",
                    "shape_name": "Url",
                    "documentation": null
                  }
                },
                "Name": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The name of the celebrity.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the celebrity.</p>\n      ",
                  "shape_name": "String"
                },
                "Id": {
                  "type": "string",
                  "pattern": "[0-9A-Za-z]*",
                  "zonbookDocumentation": "\n         <simpara>A unique identifier for the celebrity. </simpara>\n      ",
                  "documentation": "\n         <p>A unique identifier for the celebrity. </p>\n      ",
                  "shape_name": "RekognitionUniqueId"
                },
                "Face": {
                  "type": "structure",
                  "members": {
                    "BoundingBox": {
                      "type": "structure",
                      "members": {
                        "Width": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Width of the bounding box as a ratio of the overall image width.</simpara>\n      ",
                          "documentation": "\n         <p>Width of the bounding box as a ratio of the overall image width.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Height": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Height of the bounding box as a ratio of the overall image height.</simpara>\n      ",
                          "documentation": "\n         <p>Height of the bounding box as a ratio of the overall image height.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Left": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Left coordinate of the bounding box as a ratio of overall image width.</simpara>\n      ",
                          "documentation": "\n         <p>Left coordinate of the bounding box as a ratio of overall image width.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Top": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Top coordinate of the bounding box as a ratio of overall image height.</simpara>\n      ",
                          "documentation": "\n         <p>Top coordinate of the bounding box as a ratio of overall image height.</p>\n      ",
                          "shape_name": "Float"
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Bounding box of the face.</simpara>\n      ",
                      "documentation": "\n         <p>Bounding box of the face.</p>\n      ",
                      "shape_name": "BoundingBox"
                    },
                    "Confidence": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Level of confidence that what the bounding box contains is a face.</simpara>\n      ",
                      "documentation": "\n         <p>Level of confidence that what the bounding box contains is a face.</p>\n      ",
                      "shape_name": "Percent",
                      "min_length": 0,
                      "max_length": 100
                    },
                    "Landmarks": {
                      "type": "list",
                      "zonbookDocumentation": "\n         <simpara>An array of facial landmarks.</simpara>\n      ",
                      "documentation": "\n         <p>An array of facial landmarks.</p>\n      ",
                      "shape_name": "Landmarks",
                      "members": {
                        "type": "structure",
                        "members": {
                          "Type": {
                            "type": "string",
                            "enum": [
                              "eyeLeft",
                              "eyeRight",
                              "nose",
                              "mouthLeft",
                              "mouthRight",
                              "leftEyeBrowLeft",
                              "leftEyeBrowRight",
                              "leftEyeBrowUp",
                              "rightEyeBrowLeft",
                              "rightEyeBrowRight",
                              "rightEyeBrowUp",
                              "leftEyeLeft",
                              "leftEyeRight",
                              "leftEyeUp",
                              "leftEyeDown",
                              "rightEyeLeft",
                              "rightEyeRight",
                              "rightEyeUp",
                              "rightEyeDown",
                              "noseLeft",
                              "noseRight",
                              "mouthUp",
                              "mouthDown",
                              "leftPupil",
                              "rightPupil"
                            ],
                            "zonbookDocumentation": "\n         <simpara>Type of the landmark.</simpara>\n      ",
                            "documentation": "\n         <p>Type of the landmark.</p>\n      ",
                            "shape_name": "LandmarkType"
                          },
                          "X": {
                            "type": "float",
                            "zonbookDocumentation": "\n         <simpara>x-coordinate from the top left of the landmark expressed as the ratio of the width of\n      the image. For example, if the images is 700x200 and the x-coordinate of the landmark is at\n      350 pixels, this value is 0.5. </simpara>\n      ",
                            "documentation": "\n         <p>x-coordinate from the top left of the landmark expressed as the ratio of the width of\n      the image. For example, if the images is 700x200 and the x-coordinate of the landmark is at\n      350 pixels, this value is 0.5. </p>\n      ",
                            "shape_name": "Float"
                          },
                          "Y": {
                            "type": "float",
                            "zonbookDocumentation": "\n         <simpara>y-coordinate from the top left of the landmark expressed as the ratio of the height of\n      the image. For example, if the images is 700x200 and the y-coordinate of the landmark is at\n      100 pixels, this value is 0.5.</simpara>\n      ",
                            "documentation": "\n         <p>y-coordinate from the top left of the landmark expressed as the ratio of the height of\n      the image. For example, if the images is 700x200 and the y-coordinate of the landmark is at\n      100 pixels, this value is 0.5.</p>\n      ",
                            "shape_name": "Float"
                          }
                        },
                        "zonbookDocumentation": "\n         <simpara>Indicates the location of the landmark on the face.</simpara>\n      ",
                        "documentation": "\n         <p>Indicates the location of the landmark on the face.</p>\n      ",
                        "shape_name": "Landmark"
                      }
                    },
                    "Pose": {
                      "type": "structure",
                      "members": {
                        "Roll": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Value representing the face rotation on the roll axis.</simpara>\n      ",
                          "documentation": "\n         <p>Value representing the face rotation on the roll axis.</p>\n      ",
                          "shape_name": "Degree",
                          "min_length": -180,
                          "max_length": 180
                        },
                        "Yaw": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Value representing the face rotation on the yaw axis.</simpara>\n      ",
                          "documentation": "\n         <p>Value representing the face rotation on the yaw axis.</p>\n      ",
                          "shape_name": "Degree",
                          "min_length": -180,
                          "max_length": 180
                        },
                        "Pitch": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Value representing the face rotation on the pitch axis.</simpara>\n      ",
                          "documentation": "\n         <p>Value representing the face rotation on the pitch axis.</p>\n      ",
                          "shape_name": "Degree",
                          "min_length": -180,
                          "max_length": 180
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Indicates the pose of the face as determined by its pitch, roll, and yaw.</simpara>\n      ",
                      "documentation": "\n         <p>Indicates the pose of the face as determined by its pitch, roll, and yaw.</p>\n      ",
                      "shape_name": "Pose"
                    },
                    "Quality": {
                      "type": "structure",
                      "members": {
                        "Brightness": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Value representing brightness of the face. The service returns a value between 0 and\n      100 (inclusive). A higher value indicates a brighter face image.</simpara>\n      ",
                          "documentation": "\n         <p>Value representing brightness of the face. The service returns a value between 0 and\n      100 (inclusive). A higher value indicates a brighter face image.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Sharpness": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Value representing sharpness of the face. The service returns a value between 0 and 100\n      (inclusive). A higher value indicates a sharper face image.</simpara>\n      ",
                          "documentation": "\n         <p>Value representing sharpness of the face. The service returns a value between 0 and 100\n      (inclusive). A higher value indicates a sharper face image.</p>\n      ",
                          "shape_name": "Float"
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Identifies face image brightness and sharpness. </simpara>\n      ",
                      "documentation": "\n         <p>Identifies face image brightness and sharpness. </p>\n      ",
                      "shape_name": "ImageQuality"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Provides information about the celebrity's face, such as its location on the\n      image.</simpara>\n      ",
                  "documentation": "\n         <p>Provides information about the celebrity's face, such as its location on the\n      image.</p>\n      ",
                  "shape_name": "ComparedFace"
                },
                "MatchConfidence": {
                  "type": "float",
                  "zonbookDocumentation": "\n         <simpara>The confidence, in percentage, that Rekognition has that the recognized face is the\n      celebrity.</simpara>\n      ",
                  "documentation": "\n         <p>The confidence, in percentage, that Rekognition has that the recognized face is the\n      celebrity.</p>\n      ",
                  "shape_name": "Percent",
                  "min_length": 0,
                  "max_length": 100
                }
              },
              "zonbookDocumentation": "\n         <simpara>Provides information about a celebrity recognized by the <xref linkend=\"API_RecognizeCelebrities\"/> operation.</simpara>\n      ",
              "documentation": "\n         <p>Provides information about a celebrity recognized by the  operation.</p>\n      ",
              "shape_name": "Celebrity"
            }
          },
          "UnrecognizedFaces": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>Details about each unrecognized face in the image.</simpara>\n      ",
            "documentation": "\n         <p>Details about each unrecognized face in the image.</p>\n      ",
            "shape_name": "ComparedFaceList",
            "members": {
              "type": "structure",
              "members": {
                "BoundingBox": {
                  "type": "structure",
                  "members": {
                    "Width": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Width of the bounding box as a ratio of the overall image width.</simpara>\n      ",
                      "documentation": "\n         <p>Width of the bounding box as a ratio of the overall image width.</p>\n      ",
                      "shape_name": "Float"
                    },
                    "Height": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Height of the bounding box as a ratio of the overall image height.</simpara>\n      ",
                      "documentation": "\n         <p>Height of the bounding box as a ratio of the overall image height.</p>\n      ",
                      "shape_name": "Float"
                    },
                    "Left": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Left coordinate of the bounding box as a ratio of overall image width.</simpara>\n      ",
                      "documentation": "\n         <p>Left coordinate of the bounding box as a ratio of overall image width.</p>\n      ",
                      "shape_name": "Float"
                    },
                    "Top": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Top coordinate of the bounding box as a ratio of overall image height.</simpara>\n      ",
                      "documentation": "\n         <p>Top coordinate of the bounding box as a ratio of overall image height.</p>\n      ",
                      "shape_name": "Float"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Bounding box of the face.</simpara>\n      ",
                  "documentation": "\n         <p>Bounding box of the face.</p>\n      ",
                  "shape_name": "BoundingBox"
                },
                "Confidence": {
                  "type": "float",
                  "zonbookDocumentation": "\n         <simpara>Level of confidence that what the bounding box contains is a face.</simpara>\n      ",
                  "documentation": "\n         <p>Level of confidence that what the bounding box contains is a face.</p>\n      ",
                  "shape_name": "Percent",
                  "min_length": 0,
                  "max_length": 100
                },
                "Landmarks": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <simpara>An array of facial landmarks.</simpara>\n      ",
                  "documentation": "\n         <p>An array of facial landmarks.</p>\n      ",
                  "shape_name": "Landmarks",
                  "members": {
                    "type": "structure",
                    "members": {
                      "Type": {
                        "type": "string",
                        "enum": [
                          "eyeLeft",
                          "eyeRight",
                          "nose",
                          "mouthLeft",
                          "mouthRight",
                          "leftEyeBrowLeft",
                          "leftEyeBrowRight",
                          "leftEyeBrowUp",
                          "rightEyeBrowLeft",
                          "rightEyeBrowRight",
                          "rightEyeBrowUp",
                          "leftEyeLeft",
                          "leftEyeRight",
                          "leftEyeUp",
                          "leftEyeDown",
                          "rightEyeLeft",
                          "rightEyeRight",
                          "rightEyeUp",
                          "rightEyeDown",
                          "noseLeft",
                          "noseRight",
                          "mouthUp",
                          "mouthDown",
                          "leftPupil",
                          "rightPupil"
                        ],
                        "zonbookDocumentation": "\n         <simpara>Type of the landmark.</simpara>\n      ",
                        "documentation": "\n         <p>Type of the landmark.</p>\n      ",
                        "shape_name": "LandmarkType"
                      },
                      "X": {
                        "type": "float",
                        "zonbookDocumentation": "\n         <simpara>x-coordinate from the top left of the landmark expressed as the ratio of the width of\n      the image. For example, if the images is 700x200 and the x-coordinate of the landmark is at\n      350 pixels, this value is 0.5. </simpara>\n      ",
                        "documentation": "\n         <p>x-coordinate from the top left of the landmark expressed as the ratio of the width of\n      the image. For example, if the images is 700x200 and the x-coordinate of the landmark is at\n      350 pixels, this value is 0.5. </p>\n      ",
                        "shape_name": "Float"
                      },
                      "Y": {
                        "type": "float",
                        "zonbookDocumentation": "\n         <simpara>y-coordinate from the top left of the landmark expressed as the ratio of the height of\n      the image. For example, if the images is 700x200 and the y-coordinate of the landmark is at\n      100 pixels, this value is 0.5.</simpara>\n      ",
                        "documentation": "\n         <p>y-coordinate from the top left of the landmark expressed as the ratio of the height of\n      the image. For example, if the images is 700x200 and the y-coordinate of the landmark is at\n      100 pixels, this value is 0.5.</p>\n      ",
                        "shape_name": "Float"
                      }
                    },
                    "zonbookDocumentation": "\n         <simpara>Indicates the location of the landmark on the face.</simpara>\n      ",
                    "documentation": "\n         <p>Indicates the location of the landmark on the face.</p>\n      ",
                    "shape_name": "Landmark"
                  }
                },
                "Pose": {
                  "type": "structure",
                  "members": {
                    "Roll": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Value representing the face rotation on the roll axis.</simpara>\n      ",
                      "documentation": "\n         <p>Value representing the face rotation on the roll axis.</p>\n      ",
                      "shape_name": "Degree",
                      "min_length": -180,
                      "max_length": 180
                    },
                    "Yaw": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Value representing the face rotation on the yaw axis.</simpara>\n      ",
                      "documentation": "\n         <p>Value representing the face rotation on the yaw axis.</p>\n      ",
                      "shape_name": "Degree",
                      "min_length": -180,
                      "max_length": 180
                    },
                    "Pitch": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Value representing the face rotation on the pitch axis.</simpara>\n      ",
                      "documentation": "\n         <p>Value representing the face rotation on the pitch axis.</p>\n      ",
                      "shape_name": "Degree",
                      "min_length": -180,
                      "max_length": 180
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Indicates the pose of the face as determined by its pitch, roll, and yaw.</simpara>\n      ",
                  "documentation": "\n         <p>Indicates the pose of the face as determined by its pitch, roll, and yaw.</p>\n      ",
                  "shape_name": "Pose"
                },
                "Quality": {
                  "type": "structure",
                  "members": {
                    "Brightness": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Value representing brightness of the face. The service returns a value between 0 and\n      100 (inclusive). A higher value indicates a brighter face image.</simpara>\n      ",
                      "documentation": "\n         <p>Value representing brightness of the face. The service returns a value between 0 and\n      100 (inclusive). A higher value indicates a brighter face image.</p>\n      ",
                      "shape_name": "Float"
                    },
                    "Sharpness": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Value representing sharpness of the face. The service returns a value between 0 and 100\n      (inclusive). A higher value indicates a sharper face image.</simpara>\n      ",
                      "documentation": "\n         <p>Value representing sharpness of the face. The service returns a value between 0 and 100\n      (inclusive). A higher value indicates a sharper face image.</p>\n      ",
                      "shape_name": "Float"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Identifies face image brightness and sharpness. </simpara>\n      ",
                  "documentation": "\n         <p>Identifies face image brightness and sharpness. </p>\n      ",
                  "shape_name": "ImageQuality"
                }
              },
              "zonbookDocumentation": "\n\n         <simpara>Provides face metadata for target image faces that are analysed by\n        <code>CompareFaces</code> and <code>RecognizeCelebrities</code>.</simpara>\n\n      ",
              "documentation": "\n\n         <p>Provides face metadata for target image faces that are analysed by\n        <code>CompareFaces</code> and <code>RecognizeCelebrities</code>.</p>\n\n      ",
              "shape_name": "ComparedFace"
            }
          },
          "OrientationCorrection": {
            "type": "string",
            "enum": [
              "ROTATE_0",
              "ROTATE_90",
              "ROTATE_180",
              "ROTATE_270"
            ],
            "zonbookDocumentation": "\n         <simpara>The orientation of the input image (counterclockwise direction). If your application\n      displays the image, you can use this value to correct the orientation. The bounding box\n      coordinates returned in <code>CelebrityFaces</code> and <code>UnrecognizedFaces</code>\n      represent face locations before the image orientation is corrected. </simpara>\n         <note>\n            <simpara>If the input image is in .jpeg format, it might contain exchangeable image (Exif)\n        metadata that includes the image's orientation. If so, and the Exif metadata for the input\n        image populates the orientation field, the value of <code>OrientationCorrection</code> is\n        null and the <code>CelebrityFaces</code> and <code>UnrecognizedFaces</code> bounding box\n        coordinates represent face locations after Exif metadata is used to correct the image\n        orientation. Images in .png format don't contain Exif metadata. </simpara>\n         </note>\n      ",
            "documentation": "\n         <p>The orientation of the input image (counterclockwise direction). If your application\n      displays the image, you can use this value to correct the orientation. The bounding box\n      coordinates returned in <code>CelebrityFaces</code> and <code>UnrecognizedFaces</code>\n      represent face locations before the image orientation is corrected. </p>\n         <note>\n            <p>If the input image is in .jpeg format, it might contain exchangeable image (Exif)\n        metadata that includes the image's orientation. If so, and the Exif metadata for the input\n        image populates the orientation field, the value of <code>OrientationCorrection</code> is\n        null and the <code>CelebrityFaces</code> and <code>UnrecognizedFaces</code> bounding box\n        coordinates represent face locations after Exif metadata is used to correct the image\n        orientation. Images in .png format don't contain Exif metadata. </p>\n         </note>\n      ",
            "shape_name": "OrientationCorrection"
          }
        },
        "shape_name": "RecognizeCelebritiesResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is unable to access the S3 object specified in the request.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is unable to access the S3 object specified in the request.</p>\n      ",
          "shape_name": "InvalidS3ObjectException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The provided image format is not supported. </simpara>\n      ",
          "documentation": "\n         <p>The provided image format is not supported. </p>\n      ",
          "shape_name": "InvalidImageFormatException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The input image size exceeds the allowed limit. For more information, see <xref linkend=\"limits\"/>. </simpara>\n    \n      ",
          "documentation": "\n    \n         <p>The input image size exceeds the allowed limit. For more information, see \n      Limits in Amazon Rekognition in the Amazon Rekognition Developer Guide. </p>\n      ",
          "shape_name": "ImageTooLargeException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The provided image format is not supported. </simpara>\n      ",
          "documentation": "\n         <p>The provided image format is not supported. </p>\n      ",
          "shape_name": "InvalidImageFormatException"
        }
      ],
      "documentation": "\n   \n         <p>Returns an array of celebrities recognized in the input image.  For more information, see Recognizing Celebrities\n    in the Amazon Rekognition Developer Guide. </p>\n         <p>\n            <code>RecognizeCelebrities</code> returns the 100 largest faces in the image. It lists recognized celebrities in the\n  <code>CelebrityFaces</code> array and unrecognized faces in the <code>UnrecognizedFaces</code> array. \n    <code>RecognizeCelebrities</code> doesn't return celebrities whose faces are not amongst the largest 100 faces in the image.</p>\n\n         <p>For each celebrity recognized, the <code>RecognizeCelebrities</code> returns a <code>Celebrity</code> object. The <code>Celebrity</code> object\n  contains the celebrity name, ID, URL links to additional information, match confidence, and a <code>ComparedFace</code>\n  object that you can use to locate the celebrity's face on the image.</p>\n         <p>Rekognition does not retain information about which images a celebrity has been recognized in. Your application must store this\n    information and use the <code>Celebrity</code> ID property as a unique identifier for the celebrity. If you don't store the celebrity name or additional\n    information URLs returned by <code>RecognizeCelebrities</code>, you will need the ID to identify the celebrity in a call to the\n     operation.</p>\n         <p>You pass the imput image either as base64-encoded image bytes or as a reference\n    to an image in an Amazon S3 bucket. If you use the Amazon CLI to call Amazon Rekognition operations,\n    passing image bytes is not supported. The image must be either a PNG or JPEG formatted file.\n  </p>\n\n\n\n    \n         <p>For an example, see Recognizing Celebrities in an Image in the Amazon Rekognition Developer Guide.</p>\n         <p>This operation requires permissions to perform the\n        <code>rekognition:RecognizeCelebrities</code> operation.</p>\n    \n      "
    },
    "GetCelebrityInfo": {
      "name": "GetCelebrityInfo",
      "input": {
        "type": "structure",
        "members": {
          "Id": {
            "type": "string",
            "pattern": "[0-9A-Za-z]*",
            "zonbookDocumentation": "\n         <simpara>The ID for the celebrity. You get the celebrity ID from a call to the <xref linkend=\"API_RecognizeCelebrities\"/> operation,\n   which recognizes celebrities in an image. </simpara>\n      ",
            "documentation": "\n         <p>The ID for the celebrity. You get the celebrity ID from a call to the  operation,\n   which recognizes celebrities in an image. </p>\n      ",
            "required": true,
            "shape_name": "RekognitionUniqueId"
          }
        },
        "shape_name": "GetCelebrityInfoRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Urls": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of URLs pointing to additional celebrity information. </simpara>\n      ",
            "documentation": "\n         <p>An array of URLs pointing to additional celebrity information. </p>\n      ",
            "shape_name": "Urls",
            "members": {
              "type": "string",
              "shape_name": "Url",
              "documentation": null
            }
          },
          "Name": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The name of the celebrity.</simpara>\n      ",
            "documentation": "\n         <p>The name of the celebrity.</p>\n      ",
            "shape_name": "String"
          }
        },
        "shape_name": "GetCelebrityInfoResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The collection specified in the request cannot be found.</simpara>\n      ",
          "documentation": "\n         <p>The collection specified in the request cannot be found.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        }
      ],
      "documentation": "\n         <p>Gets the name and additional information about a celebrity based on his or her Rekognition\n      ID. The additional information is returned as an array of URLs. If there is no additional\n      information about the celebrity, this list is empty.</p>\n    \n         <p>For more information, see Recognizing Celebrities in an Image in\n      the Amazon Rekognition Developer Guide.</p>\n         <p>This operation requires permissions to perform the\n        <code>rekognition:GetCelebrityInfo</code> action. </p>\n    \n      "
    },
    "DetectText": {
      "name": "DetectText",
      "input": {
        "type": "structure",
        "members": {
          "Image": {
            "type": "structure",
            "members": {
              "Bytes": {
                "type": "blob",
                "zonbookDocumentation": "\n         <simpara>Blob of image bytes up to 5 MBs.</simpara>\n      ",
                "documentation": "\n         <p>Blob of image bytes up to 5 MBs.</p>\n      ",
                "shape_name": "ImageBlob",
                "min_length": 1,
                "max_length": 5242880
              },
              "S3Object": {
                "type": "structure",
                "members": {
                  "Bucket": {
                    "type": "string",
                    "pattern": "[0-9A-Za-z\\.\\-_]*",
                    "zonbookDocumentation": "\n         <simpara>Name of the S3 bucket.</simpara>\n      ",
                    "documentation": "\n         <p>Name of the S3 bucket.</p>\n      ",
                    "shape_name": "S3Bucket",
                    "min_length": 3,
                    "max_length": 255
                  },
                  "Name": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>S3 object key name.</simpara>\n      ",
                    "documentation": "\n         <p>S3 object key name.</p>\n      ",
                    "shape_name": "S3ObjectName",
                    "min_length": 1,
                    "max_length": 1024
                  },
                  "Version": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>If the bucket is versioning enabled, you can specify the object version. </simpara>\n      ",
                    "documentation": "\n         <p>If the bucket is versioning enabled, you can specify the object version. </p>\n      ",
                    "shape_name": "S3ObjectVersion",
                    "min_length": 1,
                    "max_length": 1024
                  }
                },
                "zonbookDocumentation": "\n         <simpara>Identifies an S3 object as the image source.</simpara>\n      ",
                "documentation": "\n         <p>Identifies an S3 object as the image source.</p>\n      ",
                "shape_name": "S3Object"
              }
            },
            "zonbookDocumentation": "\n         <simpara>The input image as base64-encoded bytes or an Amazon S3 object. If you use the AWS CLI\n      to call Amazon Rekognition operations, you can't pass image bytes. </simpara>\n      ",
            "documentation": "\n         <p>The input image as base64-encoded bytes or an Amazon S3 object. If you use the AWS CLI\n      to call Amazon Rekognition operations, you can't pass image bytes. </p>\n      ",
            "required": true,
            "shape_name": "Image"
          }
        },
        "shape_name": "DetectTextRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "TextDetections": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of text that was detected in the input image.</simpara>\n      ",
            "documentation": "\n         <p>An array of text that was detected in the input image.</p>\n      ",
            "shape_name": "TextDetectionList",
            "members": {
              "type": "structure",
              "members": {
                "DetectedText": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The word or line of text recognized by Amazon Rekognition. </simpara>\n      ",
                  "documentation": "\n         <p>The word or line of text recognized by Amazon Rekognition. </p>\n      ",
                  "shape_name": "String"
                },
                "Type": {
                  "type": "string",
                  "enum": [
                    "LINE",
                    "WORD"
                  ],
                  "zonbookDocumentation": "\n         <simpara>The type of text that was detected.</simpara>\n      ",
                  "documentation": "\n         <p>The type of text that was detected.</p>\n      ",
                  "shape_name": "TextTypes"
                },
                "Id": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <simpara>The identifier for the detected text. The identifier is only unique for a single call\n      to <code>DetectText</code>. </simpara>\n      ",
                  "documentation": "\n         <p>The identifier for the detected text. The identifier is only unique for a single call\n      to <code>DetectText</code>. </p>\n      ",
                  "shape_name": "UInteger",
                  "min_length": 0
                },
                "ParentId": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <simpara>The Parent identifier for the detected text identified by the value of <code>ID</code>.\n      If the type of detected text is <code>LINE</code>, the value of <code>ParentId</code> is\n        <code>Null</code>. </simpara>\n      ",
                  "documentation": "\n         <p>The Parent identifier for the detected text identified by the value of <code>ID</code>.\n      If the type of detected text is <code>LINE</code>, the value of <code>ParentId</code> is\n        <code>Null</code>. </p>\n      ",
                  "shape_name": "UInteger",
                  "min_length": 0
                },
                "Confidence": {
                  "type": "float",
                  "zonbookDocumentation": "\n         <simpara>The confidence that Amazon Rekognition has in the accuracy of the detected text and the accuracy\n      of the geometry points around the detected text.</simpara>\n      ",
                  "documentation": "\n         <p>The confidence that Amazon Rekognition has in the accuracy of the detected text and the accuracy\n      of the geometry points around the detected text.</p>\n      ",
                  "shape_name": "Percent",
                  "min_length": 0,
                  "max_length": 100
                },
                "Geometry": {
                  "type": "structure",
                  "members": {
                    "BoundingBox": {
                      "type": "structure",
                      "members": {
                        "Width": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Width of the bounding box as a ratio of the overall image width.</simpara>\n      ",
                          "documentation": "\n         <p>Width of the bounding box as a ratio of the overall image width.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Height": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Height of the bounding box as a ratio of the overall image height.</simpara>\n      ",
                          "documentation": "\n         <p>Height of the bounding box as a ratio of the overall image height.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Left": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Left coordinate of the bounding box as a ratio of overall image width.</simpara>\n      ",
                          "documentation": "\n         <p>Left coordinate of the bounding box as a ratio of overall image width.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Top": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Top coordinate of the bounding box as a ratio of overall image height.</simpara>\n      ",
                          "documentation": "\n         <p>Top coordinate of the bounding box as a ratio of overall image height.</p>\n      ",
                          "shape_name": "Float"
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>An axis-aligned coarse representation of the detected text's location on the\n      image.</simpara>\n      ",
                      "documentation": "\n         <p>An axis-aligned coarse representation of the detected text's location on the\n      image.</p>\n      ",
                      "shape_name": "BoundingBox"
                    },
                    "Polygon": {
                      "type": "list",
                      "zonbookDocumentation": "\n         <simpara>Within the bounding box, a fine-grained polygon around the detected text.</simpara>\n      ",
                      "documentation": "\n         <p>Within the bounding box, a fine-grained polygon around the detected text.</p>\n      ",
                      "shape_name": "Polygon",
                      "members": {
                        "type": "structure",
                        "members": {
                          "X": {
                            "type": "float",
                            "zonbookDocumentation": "\n         <simpara>The value of the X coordinate for a point on a <code>Polygon</code>.</simpara>\n      ",
                            "documentation": "\n         <p>The value of the X coordinate for a point on a <code>Polygon</code>.</p>\n      ",
                            "shape_name": "Float"
                          },
                          "Y": {
                            "type": "float",
                            "zonbookDocumentation": "\n         <simpara>The value of the Y coordinate for a point on a <code>Polygon</code>.</simpara>\n      ",
                            "documentation": "\n         <p>The value of the Y coordinate for a point on a <code>Polygon</code>.</p>\n      ",
                            "shape_name": "Float"
                          }
                        },
                        "zonbookDocumentation": "\n         <simpara>The X and Y coordinates of a point on an image. The X and Y values returned are ratios\n      of the overall image size. For example, if the input image is 700x200 and the \n      operation returns X=0.5 and Y=0.25, then the point is at the (350,50) pixel coordinate on the image.</simpara>\n         <simpara>An array of <code>Point</code> objects,\n        <code>Polygon</code>, is returned by <xref linkend=\"API_DetectText\"/>. <code>Polygon</code>\n      represents a fine-grained polygon around detected text. For more information, see <xref linkend=\"API_Geometry\"/>. </simpara>\n    \n      ",
                        "documentation": "\n         <p>The X and Y coordinates of a point on an image. The X and Y values returned are ratios\n      of the overall image size. For example, if the input image is 700x200 and the \n      operation returns X=0.5 and Y=0.25, then the point is at the (350,50) pixel coordinate on the image.</p>\n      \n         <p>An array of <code>Point</code> objects,\n      <code>Polygon</code>, is returned by . <code>Polygon</code>\n      represents a fine-grained polygon around detected text. For more information, see Geometry in the\n      Amazon Rekognition Developer Guide. </p>\n      ",
                        "shape_name": "Point"
                      }
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>The location of the detected text on the image. Includes an axis aligned coarse\n      bounding box surrounding the text and a finer grain polygon for more accurate spatial\n      information.</simpara>\n      ",
                  "documentation": "\n         <p>The location of the detected text on the image. Includes an axis aligned coarse\n      bounding box surrounding the text and a finer grain polygon for more accurate spatial\n      information.</p>\n      ",
                  "shape_name": "Geometry"
                }
              },
              "zonbookDocumentation": "\n         <simpara>Information about a word or line of text detected by <xref linkend=\"API_DetectText\"/>.</simpara>\n         <simpara>The <code>DetectedText</code> field contains the text that Amazon Rekognition detected in the\n      image. </simpara>\n         <simpara>Every word and line has an identifier (<code>Id</code>). Each word belongs to a line\n      and has a parent identifier (<code>ParentId</code>) that identifies the line of text in which\n      the word appears. The word <code>Id</code> is also an index for the word within a line of\n      words. </simpara>\n         <simpara>For more information, see <xref linkend=\"text-detection\"/>.</simpara>\n    \n      ",
              "documentation": "\n         <p>Information about a word or line of text detected by .</p>\n         <p>The <code>DetectedText</code> field contains the text that Amazon Rekognition detected in the\n      image. </p>\n         <p>Every word and line has an identifier (<code>Id</code>). Each word belongs to a line\n      and has a parent identifier (<code>ParentId</code>) that identifies the line of text in which\n      the word appears. The word <code>Id</code> is also an index for the word within a line of\n      words. </p>\n    \n         <p>For more information, see Detecting Text in the Amazon Rekognition Developer Guide.</p>\n      ",
              "shape_name": "TextDetection"
            }
          }
        },
        "shape_name": "DetectTextResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is unable to access the S3 object specified in the request.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is unable to access the S3 object specified in the request.</p>\n      ",
          "shape_name": "InvalidS3ObjectException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The input image size exceeds the allowed limit. For more information, see <xref linkend=\"limits\"/>. </simpara>\n    \n      ",
          "documentation": "\n    \n         <p>The input image size exceeds the allowed limit. For more information, see \n      Limits in Amazon Rekognition in the Amazon Rekognition Developer Guide. </p>\n      ",
          "shape_name": "ImageTooLargeException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The provided image format is not supported. </simpara>\n      ",
          "documentation": "\n         <p>The provided image format is not supported. </p>\n      ",
          "shape_name": "InvalidImageFormatException"
        }
      ],
      "documentation": "\n    \n         <p>Detects text in the input image and converts it into machine-readable text.</p>\n         <p>Pass the input image as base64-encoded image bytes or as a reference to an image in an\n      Amazon S3 bucket. If you use the AWS CLI to call Amazon Rekognition operations, you must pass it as a\n      reference to an image in an Amazon S3 bucket. For the AWS CLI, passing image bytes is not\n      supported. The image must be either a .png or .jpeg formatted file. </p>\n         <p>The <code>DetectText</code> operation returns text in an array of  elements, <code>TextDetections</code>. Each\n        <code>TextDetection</code> element provides information about a single word or line of text\n      that was detected in the image. </p>\n         <p>A word is one or more ISO basic latin script characters that are not separated by spaces.\n        <code>DetectText</code> can detect up to 50 words in an image.</p>\n         <p>A line is a string of equally spaced words. A line isn't necessarily a complete\n      sentence. For example, a driver's license number is detected as a line. A line ends when there\n      is no aligned text after it. Also, a line ends when there is a large gap between words,\n      relative to the length of the words. This means, depending on the gap between words, Amazon Rekognition\n      may detect multiple lines in text aligned in the same direction. Periods don't represent the\n      end of a line. If a sentence spans multiple lines, the <code>DetectText</code> operation\n      returns multiple lines.</p>\n         <p>To determine whether a <code>TextDetection</code> element is a line of text or a word,\n      use the <code>TextDetection</code> object <code>Type</code> field. </p>\n         <p>To be detected, text must be within +/- 90 degrees orientation of the horizontal axis.</p>\n    \n         <p>For more information, see DetectText in the Amazon Rekognition Developer Guide.</p>\n      "
    },
    "StartLabelDetection": {
      "name": "StartLabelDetection",
      "input": {
        "type": "structure",
        "members": {
          "Video": {
            "type": "structure",
            "members": {
              "S3Object": {
                "type": "structure",
                "members": {
                  "Bucket": {
                    "type": "string",
                    "pattern": "[0-9A-Za-z\\.\\-_]*",
                    "zonbookDocumentation": "\n         <simpara>Name of the S3 bucket.</simpara>\n      ",
                    "documentation": "\n         <p>Name of the S3 bucket.</p>\n      ",
                    "shape_name": "S3Bucket",
                    "min_length": 3,
                    "max_length": 255
                  },
                  "Name": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>S3 object key name.</simpara>\n      ",
                    "documentation": "\n         <p>S3 object key name.</p>\n      ",
                    "shape_name": "S3ObjectName",
                    "min_length": 1,
                    "max_length": 1024
                  },
                  "Version": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>If the bucket is versioning enabled, you can specify the object version. </simpara>\n      ",
                    "documentation": "\n         <p>If the bucket is versioning enabled, you can specify the object version. </p>\n      ",
                    "shape_name": "S3ObjectVersion",
                    "min_length": 1,
                    "max_length": 1024
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The Amazon S3 bucket name and file name for the video.</simpara>\n      ",
                "documentation": "\n        <p>The Amazon S3 bucket name and file name for the video.</p>\n      ",
                "shape_name": "S3Object"
              }
            },
            "zonbookDocumentation": "\n         <simpara>The video in which you want to detect labels. The video must be stored\n      in an Amazon S3 bucket.</simpara>\n      ",
            "documentation": "\n         <p>The video in which you want to detect labels. The video must be stored\n      in an Amazon S3 bucket.</p>\n      ",
            "required": true,
            "shape_name": "Video"
          },
          "ClientRequestToken": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9-_]+$",
            "zonbookDocumentation": "\n         <simpara>Idempotent token used to identify the start request. If you use the same token with multiple\n      <code>StartLabelDetection</code> requests, the same <code>JobId</code> is returned. Use\n      <code>ClientRequestToken</code> to prevent the same job from being accidently started more than once. </simpara>\n      ",
            "documentation": "\n         <p>Idempotent token used to identify the start request. If you use the same token with multiple\n      <code>StartLabelDetection</code> requests, the same <code>JobId</code> is returned. Use\n      <code>ClientRequestToken</code> to prevent the same job from being accidently started more than once. </p>\n      ",
            "shape_name": "ClientRequestToken",
            "min_length": 1,
            "max_length": 64
          },
          "MinConfidence": {
            "type": "float",
            "zonbookDocumentation": "\n         <simpara>Specifies the minimum confidence that Amazon Rekognition Video must have in order to return a detected label. Confidence\n       represents how certain Amazon Rekognition is that a label is correctly identified.0 is the lowest confidence.\n       100 is the highest confidence.  Amazon Rekognition Video doesn't return any labels with a confidence level\n       lower than this specified value.</simpara>\n         <simpara>If you don't specify <code>MinConfidence</code>, the operation returns labels with confidence\n     values greater than or equal to 50 percent.</simpara>\n      ",
            "documentation": "\n         <p>Specifies the minimum confidence that Amazon Rekognition Video must have in order to return a detected label. Confidence\n       represents how certain Amazon Rekognition is that a label is correctly identified.0 is the lowest confidence.\n       100 is the highest confidence.  Amazon Rekognition Video doesn't return any labels with a confidence level\n       lower than this specified value.</p>\n         <p>If you don't specify <code>MinConfidence</code>, the operation returns labels with confidence\n     values greater than or equal to 50 percent.</p>\n      ",
            "shape_name": "Percent",
            "min_length": 0,
            "max_length": 100
          },
          "NotificationChannel": {
            "type": "structure",
            "members": {
              "SNSTopicArn": {
                "type": "string",
                "pattern": "(^arn:aws:sns:.*:\\w{12}:.+$)",
                "zonbookDocumentation": "\n        <simpara>The Amazon SNS topic to which Amazon Rekognition to posts the completion status.</simpara>\n      ",
                "documentation": "\n        <p>The Amazon SNS topic to which Amazon Rekognition to posts the completion status.</p>\n      ",
                "required": true,
                "shape_name": "SNSTopicArn"
              },
              "RoleArn": {
                "type": "string",
                "pattern": "arn:aws:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+",
                "zonbookDocumentation": "\n        <para>The ARN of an IAM role that gives Amazon Rekognition publishing permissions to the Amazon SNS topic. </para>\n      ",
                "documentation": "\n        <p>The ARN of an IAM role that gives Amazon Rekognition publishing permissions to the Amazon SNS topic. </p>\n      ",
                "required": true,
                "shape_name": "RoleArn"
              }
            },
            "zonbookDocumentation": "\n         <simpara>The Amazon SNS topic ARN you want Amazon Rekognition Video to publish the completion status of the label detection\n        operation to. </simpara>\n      ",
            "documentation": "\n         <p>The Amazon SNS topic ARN you want Amazon Rekognition Video to publish the completion status of the label detection\n        operation to. </p>\n      ",
            "shape_name": "NotificationChannel"
          },
          "JobTag": {
            "type": "string",
            "pattern": "[a-zA-Z0-9_.\\-:]+",
            "zonbookDocumentation": "\n         <para>Unique identifier you specify to identify the job in the completion status published to the Amazon Simple Notification Service topic. </para>\n      ",
            "documentation": "\n         <p>Unique identifier you specify to identify the job in the completion status published to the Amazon Simple Notification Service topic. </p>\n      ",
            "shape_name": "JobTag",
            "min_length": 1,
            "max_length": 256
          }
        },
        "shape_name": "StartLabelDetectionRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "JobId": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9-_]+$",
            "zonbookDocumentation": "\n         <simpara>The identifier for the label detection job. Use <code>JobId</code> to identify the job in\n    a subsequent call to <code>GetLabelDetection</code>. </simpara>\n      ",
            "documentation": "\n         <p>The identifier for the label detection job. Use <code>JobId</code> to identify the job in\n    a subsequent call to <code>GetLabelDetection</code>. </p>\n      ",
            "shape_name": "JobId",
            "min_length": 1,
            "max_length": 64
          }
        },
        "shape_name": "StartLabelDetectionResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <para>A <code>ClientRequestToken</code> input parameter was reused with an operation, but at least one of the other input\n        parameters is different from the previous call to the operation.</para>\n      ",
          "documentation": "\n         <p>A <code>ClientRequestToken</code> input parameter was reused with an operation, but at least one of the other input\n        parameters is different from the previous call to the operation.</p>\n      ",
          "shape_name": "IdempotentParameterMismatchException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is unable to access the S3 object specified in the request.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is unable to access the S3 object specified in the request.</p>\n      ",
          "shape_name": "InvalidS3ObjectException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The file size or duration of the supplied media is too large. The maximum file size is 8GB.\n        The maximum duration is 2 hours. </simpara>\n      ",
          "documentation": "\n         <p>The file size or duration of the supplied media is too large. The maximum file size is 8GB.\n        The maximum duration is 2 hours. </p>\n      ",
          "shape_name": "VideoTooLargeException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An Amazon Rekognition service limit was exceeded. For example, if you start too many Amazon Rekognition Video jobs concurrently, calls to start operations \n            (<code>StartLabelDetection</code>, for example) will raise a <code>LimitExceededException</code> exception (HTTP status code: 400) until\n            the number of concurrently running jobs is below the Amazon Rekognition service limit.  </simpara>\n      ",
          "documentation": "\n        <p>An Amazon Rekognition service limit was exceeded. For example, if you start too many Amazon Rekognition Video jobs concurrently, calls to start operations \n            (<code>StartLabelDetection</code>, for example) will raise a <code>LimitExceededException</code> exception (HTTP status code: 400) until\n            the number of concurrently running jobs is below the Amazon Rekognition service limit.  </p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        }
      ],
      "documentation": "\n         <p>Starts asynchronous detection of labels in a stored video.</p>\n         <p>Amazon Rekognition Video can detect labels in a video. Labels are instances of real-world entities.\n       This includes objects like flower, tree, and table; events like\n       wedding, graduation, and birthday party; concepts like landscape, evening, and nature; and activities\n       like a person getting out of a car or a person skiing.</p>\n\n         <p>The video must be stored in an Amazon S3 bucket. Use <a>Video</a> to specify the bucket name\n       and the filename of the video.\n        <code>StartLabelDetection</code> returns a job identifier (<code>JobId</code>) which you use to get the\n       results of the operation. When label detection is finished, Amazon Rekognition Video publishes a completion status\n        to the Amazon Simple Notification Service topic that you specify in <code>NotificationChannel</code>.</p>\n         <p>To get the results of the label detection operation, first check that the status value published to the Amazon SNS\n        topic is <code>SUCCEEDED</code>. If so, call   and pass the job identifier\n       (<code>JobId</code>) from the initial call to <code>StartLabelDetection</code>.</p>\n        <p/>\n      "
    },
    "StartContentModeration": {
      "name": "StartContentModeration",
      "input": {
        "type": "structure",
        "members": {
          "Video": {
            "type": "structure",
            "members": {
              "S3Object": {
                "type": "structure",
                "members": {
                  "Bucket": {
                    "type": "string",
                    "pattern": "[0-9A-Za-z\\.\\-_]*",
                    "zonbookDocumentation": "\n         <simpara>Name of the S3 bucket.</simpara>\n      ",
                    "documentation": "\n         <p>Name of the S3 bucket.</p>\n      ",
                    "shape_name": "S3Bucket",
                    "min_length": 3,
                    "max_length": 255
                  },
                  "Name": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>S3 object key name.</simpara>\n      ",
                    "documentation": "\n         <p>S3 object key name.</p>\n      ",
                    "shape_name": "S3ObjectName",
                    "min_length": 1,
                    "max_length": 1024
                  },
                  "Version": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>If the bucket is versioning enabled, you can specify the object version. </simpara>\n      ",
                    "documentation": "\n         <p>If the bucket is versioning enabled, you can specify the object version. </p>\n      ",
                    "shape_name": "S3ObjectVersion",
                    "min_length": 1,
                    "max_length": 1024
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The Amazon S3 bucket name and file name for the video.</simpara>\n      ",
                "documentation": "\n        <p>The Amazon S3 bucket name and file name for the video.</p>\n      ",
                "shape_name": "S3Object"
              }
            },
            "zonbookDocumentation": "\n         <simpara>The video in which you want to moderate content. The video must be stored\n      in an Amazon S3 bucket.</simpara>\n      ",
            "documentation": "\n         <p>The video in which you want to moderate content. The video must be stored\n      in an Amazon S3 bucket.</p>\n      ",
            "required": true,
            "shape_name": "Video"
          },
          "MinConfidence": {
            "type": "float",
            "zonbookDocumentation": "\n         <simpara>Specifies the minimum confidence that Amazon Rekognition must have in order to return a moderated content label. Confidence\n      represents how certain Amazon Rekognition is that the moderated content is correctly identified. 0 is the lowest confidence.\n      100 is the highest confidence.  Amazon Rekognition doesn't return any moderated content labels with a confidence level\n      lower than this specified value.</simpara>  \n      ",
            "documentation": "\n         <p>Specifies the minimum confidence that Amazon Rekognition must have in order to return a moderated content label. Confidence\n      represents how certain Amazon Rekognition is that the moderated content is correctly identified. 0 is the lowest confidence.\n      100 is the highest confidence.  Amazon Rekognition doesn't return any moderated content labels with a confidence level\n      lower than this specified value.</p>  \n      ",
            "shape_name": "Percent",
            "min_length": 0,
            "max_length": 100
          },
          "ClientRequestToken": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9-_]+$",
            "zonbookDocumentation": "\n         <simpara>Idempotent token used to identify the start request. If you use the same token with multiple\n      <code>StartContentModeration</code> requests, the same <code>JobId</code> is returned. Use\n      <code>ClientRequestToken</code> to prevent the same job from being accidently started more than once. </simpara>\n      ",
            "documentation": "\n         <p>Idempotent token used to identify the start request. If you use the same token with multiple\n      <code>StartContentModeration</code> requests, the same <code>JobId</code> is returned. Use\n      <code>ClientRequestToken</code> to prevent the same job from being accidently started more than once. </p>\n      ",
            "shape_name": "ClientRequestToken",
            "min_length": 1,
            "max_length": 64
          },
          "NotificationChannel": {
            "type": "structure",
            "members": {
              "SNSTopicArn": {
                "type": "string",
                "pattern": "(^arn:aws:sns:.*:\\w{12}:.+$)",
                "zonbookDocumentation": "\n        <simpara>The Amazon SNS topic to which Amazon Rekognition to posts the completion status.</simpara>\n      ",
                "documentation": "\n        <p>The Amazon SNS topic to which Amazon Rekognition to posts the completion status.</p>\n      ",
                "required": true,
                "shape_name": "SNSTopicArn"
              },
              "RoleArn": {
                "type": "string",
                "pattern": "arn:aws:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+",
                "zonbookDocumentation": "\n        <para>The ARN of an IAM role that gives Amazon Rekognition publishing permissions to the Amazon SNS topic. </para>\n      ",
                "documentation": "\n        <p>The ARN of an IAM role that gives Amazon Rekognition publishing permissions to the Amazon SNS topic. </p>\n      ",
                "required": true,
                "shape_name": "RoleArn"
              }
            },
            "zonbookDocumentation": "\n         <simpara>The Amazon SNS topic ARN that you want Amazon Rekognition Video to publish the completion status of the\n      content moderation analysis to.</simpara>\n      ",
            "documentation": "\n         <p>The Amazon SNS topic ARN that you want Amazon Rekognition Video to publish the completion status of the\n      content moderation analysis to.</p>\n      ",
            "shape_name": "NotificationChannel"
          },
          "JobTag": {
            "type": "string",
            "pattern": "[a-zA-Z0-9_.\\-:]+",
            "zonbookDocumentation": "\n         <para>Unique identifier you specify to identify the job in the completion status published to the Amazon Simple Notification Service topic. </para>\n      ",
            "documentation": "\n         <p>Unique identifier you specify to identify the job in the completion status published to the Amazon Simple Notification Service topic. </p>\n      ",
            "shape_name": "JobTag",
            "min_length": 1,
            "max_length": 256
          }
        },
        "shape_name": "StartContentModerationRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "JobId": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9-_]+$",
            "zonbookDocumentation": "\n         <simpara>The identifier for the content moderation analysis job. Use <code>JobId</code> to identify the job in\n      a subsequent call to <code>GetContentModeration</code>.</simpara>\n      ",
            "documentation": "\n         <p>The identifier for the content moderation analysis job. Use <code>JobId</code> to identify the job in\n      a subsequent call to <code>GetContentModeration</code>.</p>\n      ",
            "shape_name": "JobId",
            "min_length": 1,
            "max_length": 64
          }
        },
        "shape_name": "StartContentModerationResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <para>A <code>ClientRequestToken</code> input parameter was reused with an operation, but at least one of the other input\n        parameters is different from the previous call to the operation.</para>\n      ",
          "documentation": "\n         <p>A <code>ClientRequestToken</code> input parameter was reused with an operation, but at least one of the other input\n        parameters is different from the previous call to the operation.</p>\n      ",
          "shape_name": "IdempotentParameterMismatchException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is unable to access the S3 object specified in the request.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is unable to access the S3 object specified in the request.</p>\n      ",
          "shape_name": "InvalidS3ObjectException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The file size or duration of the supplied media is too large. The maximum file size is 8GB.\n        The maximum duration is 2 hours. </simpara>\n      ",
          "documentation": "\n         <p>The file size or duration of the supplied media is too large. The maximum file size is 8GB.\n        The maximum duration is 2 hours. </p>\n      ",
          "shape_name": "VideoTooLargeException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An Amazon Rekognition service limit was exceeded. For example, if you start too many Amazon Rekognition Video jobs concurrently, calls to start operations \n            (<code>StartLabelDetection</code>, for example) will raise a <code>LimitExceededException</code> exception (HTTP status code: 400) until\n            the number of concurrently running jobs is below the Amazon Rekognition service limit.  </simpara>\n      ",
          "documentation": "\n        <p>An Amazon Rekognition service limit was exceeded. For example, if you start too many Amazon Rekognition Video jobs concurrently, calls to start operations \n            (<code>StartLabelDetection</code>, for example) will raise a <code>LimitExceededException</code> exception (HTTP status code: 400) until\n            the number of concurrently running jobs is below the Amazon Rekognition service limit.  </p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        }
      ],
      "documentation": "\n         <p> Starts asynchronous detection of explicit or suggestive adult content in a stored video.</p>\n         <p>Amazon Rekognition Video can moderate content in a video stored in an Amazon S3 bucket. Use <a>Video</a> to specify the bucket name\n      and the filename of the video. <code>StartContentModeration</code>\n        returns a job identifier (<code>JobId</code>) which you use to get the results of the analysis.\n        When content moderation analysis is finished, Amazon Rekognition Video publishes a completion status\n        to the Amazon Simple Notification Service topic that you specify in <code>NotificationChannel</code>.</p>\n        <p>To get the results of the content moderation analysis, first check that the status value published to the Amazon SNS\n        topic is <code>SUCCEEDED</code>. If so, call  and pass the job identifier\n        (<code>JobId</code>) from the initial call to <code>StartContentModeration</code>. </p>\n      \n         <p>For more information, see Detecting Unsafe Content in the Amazon Rekognition Developer Guide.</p>\n      "
    },
    "StartFaceDetection": {
      "name": "StartFaceDetection",
      "input": {
        "type": "structure",
        "members": {
          "Video": {
            "type": "structure",
            "members": {
              "S3Object": {
                "type": "structure",
                "members": {
                  "Bucket": {
                    "type": "string",
                    "pattern": "[0-9A-Za-z\\.\\-_]*",
                    "zonbookDocumentation": "\n         <simpara>Name of the S3 bucket.</simpara>\n      ",
                    "documentation": "\n         <p>Name of the S3 bucket.</p>\n      ",
                    "shape_name": "S3Bucket",
                    "min_length": 3,
                    "max_length": 255
                  },
                  "Name": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>S3 object key name.</simpara>\n      ",
                    "documentation": "\n         <p>S3 object key name.</p>\n      ",
                    "shape_name": "S3ObjectName",
                    "min_length": 1,
                    "max_length": 1024
                  },
                  "Version": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>If the bucket is versioning enabled, you can specify the object version. </simpara>\n      ",
                    "documentation": "\n         <p>If the bucket is versioning enabled, you can specify the object version. </p>\n      ",
                    "shape_name": "S3ObjectVersion",
                    "min_length": 1,
                    "max_length": 1024
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The Amazon S3 bucket name and file name for the video.</simpara>\n      ",
                "documentation": "\n        <p>The Amazon S3 bucket name and file name for the video.</p>\n      ",
                "shape_name": "S3Object"
              }
            },
            "zonbookDocumentation": "\n         <simpara>The video in which you want to detect faces. The video must be stored\n      in an Amazon S3 bucket.</simpara>\n      ",
            "documentation": "\n         <p>The video in which you want to detect faces. The video must be stored\n      in an Amazon S3 bucket.</p>\n      ",
            "required": true,
            "shape_name": "Video"
          },
          "ClientRequestToken": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9-_]+$",
            "zonbookDocumentation": "\n         <simpara>Idempotent token used to identify the start request. If you use the same token with multiple\n      <code>StartFaceDetection</code> requests, the same <code>JobId</code> is returned. Use\n      <code>ClientRequestToken</code> to prevent the same job from being accidently started more than once. </simpara>\n      ",
            "documentation": "\n         <p>Idempotent token used to identify the start request. If you use the same token with multiple\n      <code>StartFaceDetection</code> requests, the same <code>JobId</code> is returned. Use\n      <code>ClientRequestToken</code> to prevent the same job from being accidently started more than once. </p>\n      ",
            "shape_name": "ClientRequestToken",
            "min_length": 1,
            "max_length": 64
          },
          "NotificationChannel": {
            "type": "structure",
            "members": {
              "SNSTopicArn": {
                "type": "string",
                "pattern": "(^arn:aws:sns:.*:\\w{12}:.+$)",
                "zonbookDocumentation": "\n        <simpara>The Amazon SNS topic to which Amazon Rekognition to posts the completion status.</simpara>\n      ",
                "documentation": "\n        <p>The Amazon SNS topic to which Amazon Rekognition to posts the completion status.</p>\n      ",
                "required": true,
                "shape_name": "SNSTopicArn"
              },
              "RoleArn": {
                "type": "string",
                "pattern": "arn:aws:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+",
                "zonbookDocumentation": "\n        <para>The ARN of an IAM role that gives Amazon Rekognition publishing permissions to the Amazon SNS topic. </para>\n      ",
                "documentation": "\n        <p>The ARN of an IAM role that gives Amazon Rekognition publishing permissions to the Amazon SNS topic. </p>\n      ",
                "required": true,
                "shape_name": "RoleArn"
              }
            },
            "zonbookDocumentation": "\n         <simpara>The ARN of the Amazon SNS topic to which you want Amazon Rekognition Video to publish the completion status of the\n         face detection operation.</simpara>\n      ",
            "documentation": "\n         <p>The ARN of the Amazon SNS topic to which you want Amazon Rekognition Video to publish the completion status of the\n         face detection operation.</p>\n      ",
            "shape_name": "NotificationChannel"
          },
          "FaceAttributes": {
            "type": "string",
            "enum": [
              "DEFAULT",
              "ALL"
            ],
            "zonbookDocumentation": "\n         <simpara>The face attributes you want returned.</simpara>\n         <simpara>\n            <code>DEFAULT</code> - The following subset of facial attributes are returned: BoundingBox, Confidence, Pose, Quality and Landmarks. </simpara>\n         <simpara>\n            <code>ALL</code> - All facial attributes are returned.</simpara>\n      ",
            "documentation": "\n         <p>The face attributes you want returned.</p>\n         <p>\n            <code>DEFAULT</code> - The following subset of facial attributes are returned: BoundingBox, Confidence, Pose, Quality and Landmarks. </p>\n         <p>\n            <code>ALL</code> - All facial attributes are returned.</p>\n      ",
            "shape_name": "FaceAttributes"
          },
          "JobTag": {
            "type": "string",
            "pattern": "[a-zA-Z0-9_.\\-:]+",
            "zonbookDocumentation": "\n         <para>Unique identifier you specify to identify the job in the completion status published to the Amazon Simple Notification Service topic. </para>\n      ",
            "documentation": "\n         <p>Unique identifier you specify to identify the job in the completion status published to the Amazon Simple Notification Service topic. </p>\n      ",
            "shape_name": "JobTag",
            "min_length": 1,
            "max_length": 256
          }
        },
        "shape_name": "StartFaceDetectionRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "JobId": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9-_]+$",
            "zonbookDocumentation": "\n         <simpara>The identifier for the face detection job. Use <code>JobId</code> to identify the job in\n    a subsequent call to <code>GetFaceDetection</code>.</simpara>\n      ",
            "documentation": "\n         <p>The identifier for the face detection job. Use <code>JobId</code> to identify the job in\n    a subsequent call to <code>GetFaceDetection</code>.</p>\n      ",
            "shape_name": "JobId",
            "min_length": 1,
            "max_length": 64
          }
        },
        "shape_name": "StartFaceDetectionResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <para>A <code>ClientRequestToken</code> input parameter was reused with an operation, but at least one of the other input\n        parameters is different from the previous call to the operation.</para>\n      ",
          "documentation": "\n         <p>A <code>ClientRequestToken</code> input parameter was reused with an operation, but at least one of the other input\n        parameters is different from the previous call to the operation.</p>\n      ",
          "shape_name": "IdempotentParameterMismatchException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is unable to access the S3 object specified in the request.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is unable to access the S3 object specified in the request.</p>\n      ",
          "shape_name": "InvalidS3ObjectException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The file size or duration of the supplied media is too large. The maximum file size is 8GB.\n        The maximum duration is 2 hours. </simpara>\n      ",
          "documentation": "\n         <p>The file size or duration of the supplied media is too large. The maximum file size is 8GB.\n        The maximum duration is 2 hours. </p>\n      ",
          "shape_name": "VideoTooLargeException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An Amazon Rekognition service limit was exceeded. For example, if you start too many Amazon Rekognition Video jobs concurrently, calls to start operations \n            (<code>StartLabelDetection</code>, for example) will raise a <code>LimitExceededException</code> exception (HTTP status code: 400) until\n            the number of concurrently running jobs is below the Amazon Rekognition service limit.  </simpara>\n      ",
          "documentation": "\n        <p>An Amazon Rekognition service limit was exceeded. For example, if you start too many Amazon Rekognition Video jobs concurrently, calls to start operations \n            (<code>StartLabelDetection</code>, for example) will raise a <code>LimitExceededException</code> exception (HTTP status code: 400) until\n            the number of concurrently running jobs is below the Amazon Rekognition service limit.  </p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        }
      ],
      "documentation": "\n         <p>Starts asynchronous detection of faces in a stored video.</p>\n         <p>Amazon Rekognition Video can detect faces in a video stored in an Amazon S3 bucket.\n       Use <a>Video</a> to specify the bucket name and the filename of the video.\n       <code>StartFaceDetection</code> returns a job identifier (<code>JobId</code>) that you\n       use to get the results of the operation.\n       When face detection is finished, Amazon Rekognition Video publishes a completion status\n       to the Amazon Simple Notification Service topic that you specify in <code>NotificationChannel</code>.\n       To get the results of the label detection operation, first check that the status value published to the Amazon SNS\n       topic is <code>SUCCEEDED</code>. If so, call   and pass the job identifier\n      (<code>JobId</code>) from the initial call to <code>StartFaceDetection</code>.</p>\n     \n         <p>For more information, see Detecting Faces in a Stored Video in the \n     Amazon Rekognition Developer Guide.</p>\n      "
    },
    "StartPersonTracking": {
      "name": "StartPersonTracking",
      "input": {
        "type": "structure",
        "members": {
          "Video": {
            "type": "structure",
            "members": {
              "S3Object": {
                "type": "structure",
                "members": {
                  "Bucket": {
                    "type": "string",
                    "pattern": "[0-9A-Za-z\\.\\-_]*",
                    "zonbookDocumentation": "\n         <simpara>Name of the S3 bucket.</simpara>\n      ",
                    "documentation": "\n         <p>Name of the S3 bucket.</p>\n      ",
                    "shape_name": "S3Bucket",
                    "min_length": 3,
                    "max_length": 255
                  },
                  "Name": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>S3 object key name.</simpara>\n      ",
                    "documentation": "\n         <p>S3 object key name.</p>\n      ",
                    "shape_name": "S3ObjectName",
                    "min_length": 1,
                    "max_length": 1024
                  },
                  "Version": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>If the bucket is versioning enabled, you can specify the object version. </simpara>\n      ",
                    "documentation": "\n         <p>If the bucket is versioning enabled, you can specify the object version. </p>\n      ",
                    "shape_name": "S3ObjectVersion",
                    "min_length": 1,
                    "max_length": 1024
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The Amazon S3 bucket name and file name for the video.</simpara>\n      ",
                "documentation": "\n        <p>The Amazon S3 bucket name and file name for the video.</p>\n      ",
                "shape_name": "S3Object"
              }
            },
            "zonbookDocumentation": "\n         <simpara>The video in which you want to detect people. The video must be stored\n      in an Amazon S3 bucket.</simpara>\n      ",
            "documentation": "\n         <p>The video in which you want to detect people. The video must be stored\n      in an Amazon S3 bucket.</p>\n      ",
            "required": true,
            "shape_name": "Video"
          },
          "ClientRequestToken": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9-_]+$",
            "zonbookDocumentation": "\n         <simpara>Idempotent token used to identify the start request. If you use the same token with multiple\n      <code>StartPersonTracking</code> requests, the same <code>JobId</code> is returned. Use\n      <code>ClientRequestToken</code> to prevent the same job from being accidently started more than once. </simpara>\n      ",
            "documentation": "\n         <p>Idempotent token used to identify the start request. If you use the same token with multiple\n      <code>StartPersonTracking</code> requests, the same <code>JobId</code> is returned. Use\n      <code>ClientRequestToken</code> to prevent the same job from being accidently started more than once. </p>\n      ",
            "shape_name": "ClientRequestToken",
            "min_length": 1,
            "max_length": 64
          },
          "NotificationChannel": {
            "type": "structure",
            "members": {
              "SNSTopicArn": {
                "type": "string",
                "pattern": "(^arn:aws:sns:.*:\\w{12}:.+$)",
                "zonbookDocumentation": "\n        <simpara>The Amazon SNS topic to which Amazon Rekognition to posts the completion status.</simpara>\n      ",
                "documentation": "\n        <p>The Amazon SNS topic to which Amazon Rekognition to posts the completion status.</p>\n      ",
                "required": true,
                "shape_name": "SNSTopicArn"
              },
              "RoleArn": {
                "type": "string",
                "pattern": "arn:aws:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+",
                "zonbookDocumentation": "\n        <para>The ARN of an IAM role that gives Amazon Rekognition publishing permissions to the Amazon SNS topic. </para>\n      ",
                "documentation": "\n        <p>The ARN of an IAM role that gives Amazon Rekognition publishing permissions to the Amazon SNS topic. </p>\n      ",
                "required": true,
                "shape_name": "RoleArn"
              }
            },
            "zonbookDocumentation": "\n         <simpara>The Amazon SNS topic ARN you want Amazon Rekognition Video to publish the completion status of the people detection\n        operation to.</simpara>\n      ",
            "documentation": "\n         <p>The Amazon SNS topic ARN you want Amazon Rekognition Video to publish the completion status of the people detection\n        operation to.</p>\n      ",
            "shape_name": "NotificationChannel"
          },
          "JobTag": {
            "type": "string",
            "pattern": "[a-zA-Z0-9_.\\-:]+",
            "zonbookDocumentation": "\n         <para>Unique identifier you specify to identify the job in the completion status published to the Amazon Simple Notification Service topic. </para>\n      ",
            "documentation": "\n         <p>Unique identifier you specify to identify the job in the completion status published to the Amazon Simple Notification Service topic. </p>\n      ",
            "shape_name": "JobTag",
            "min_length": 1,
            "max_length": 256
          }
        },
        "shape_name": "StartPersonTrackingRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "JobId": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9-_]+$",
            "zonbookDocumentation": "\n         <simpara>The identifier for the person detection job. Use <code>JobId</code> to identify the job in\n    a subsequent call to <code>GetPersonTracking</code>.</simpara>\n      ",
            "documentation": "\n         <p>The identifier for the person detection job. Use <code>JobId</code> to identify the job in\n    a subsequent call to <code>GetPersonTracking</code>.</p>\n      ",
            "shape_name": "JobId",
            "min_length": 1,
            "max_length": 64
          }
        },
        "shape_name": "StartPersonTrackingResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <para>A <code>ClientRequestToken</code> input parameter was reused with an operation, but at least one of the other input\n        parameters is different from the previous call to the operation.</para>\n      ",
          "documentation": "\n         <p>A <code>ClientRequestToken</code> input parameter was reused with an operation, but at least one of the other input\n        parameters is different from the previous call to the operation.</p>\n      ",
          "shape_name": "IdempotentParameterMismatchException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is unable to access the S3 object specified in the request.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is unable to access the S3 object specified in the request.</p>\n      ",
          "shape_name": "InvalidS3ObjectException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The file size or duration of the supplied media is too large. The maximum file size is 8GB.\n        The maximum duration is 2 hours. </simpara>\n      ",
          "documentation": "\n         <p>The file size or duration of the supplied media is too large. The maximum file size is 8GB.\n        The maximum duration is 2 hours. </p>\n      ",
          "shape_name": "VideoTooLargeException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An Amazon Rekognition service limit was exceeded. For example, if you start too many Amazon Rekognition Video jobs concurrently, calls to start operations \n            (<code>StartLabelDetection</code>, for example) will raise a <code>LimitExceededException</code> exception (HTTP status code: 400) until\n            the number of concurrently running jobs is below the Amazon Rekognition service limit.  </simpara>\n      ",
          "documentation": "\n        <p>An Amazon Rekognition service limit was exceeded. For example, if you start too many Amazon Rekognition Video jobs concurrently, calls to start operations \n            (<code>StartLabelDetection</code>, for example) will raise a <code>LimitExceededException</code> exception (HTTP status code: 400) until\n            the number of concurrently running jobs is below the Amazon Rekognition service limit.  </p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        }
      ],
      "documentation": "\n         <p>Starts the asynchronous tracking of persons in a stored video.</p>\n         <p>Amazon Rekognition Video can track persons in a video stored in an Amazon S3 bucket. Use <a>Video</a> to specify the bucket name\n       and the filename of the video. <code>StartPersonTracking</code>\n       returns a job identifier (<code>JobId</code>) which you use to get the results of the operation.\n       When label detection is finished, Amazon Rekognition publishes a completion status\n       to the Amazon Simple Notification Service topic that you specify in <code>NotificationChannel</code>. </p>\n         <p>To get the results of the person detection operation, first check that the status value published to the Amazon SNS\n       topic is <code>SUCCEEDED</code>. If so, call   and pass the job identifier\n      (<code>JobId</code>) from the initial call to <code>StartPersonTracking</code>.</p>\n      "
    },
    "StartCelebrityRecognition": {
      "name": "StartCelebrityRecognition",
      "input": {
        "type": "structure",
        "members": {
          "Video": {
            "type": "structure",
            "members": {
              "S3Object": {
                "type": "structure",
                "members": {
                  "Bucket": {
                    "type": "string",
                    "pattern": "[0-9A-Za-z\\.\\-_]*",
                    "zonbookDocumentation": "\n         <simpara>Name of the S3 bucket.</simpara>\n      ",
                    "documentation": "\n         <p>Name of the S3 bucket.</p>\n      ",
                    "shape_name": "S3Bucket",
                    "min_length": 3,
                    "max_length": 255
                  },
                  "Name": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>S3 object key name.</simpara>\n      ",
                    "documentation": "\n         <p>S3 object key name.</p>\n      ",
                    "shape_name": "S3ObjectName",
                    "min_length": 1,
                    "max_length": 1024
                  },
                  "Version": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>If the bucket is versioning enabled, you can specify the object version. </simpara>\n      ",
                    "documentation": "\n         <p>If the bucket is versioning enabled, you can specify the object version. </p>\n      ",
                    "shape_name": "S3ObjectVersion",
                    "min_length": 1,
                    "max_length": 1024
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The Amazon S3 bucket name and file name for the video.</simpara>\n      ",
                "documentation": "\n        <p>The Amazon S3 bucket name and file name for the video.</p>\n      ",
                "shape_name": "S3Object"
              }
            },
            "zonbookDocumentation": "\n         <simpara>The video in which you want to recognize celebrities. The video must be stored\n      in an Amazon S3 bucket.</simpara>\n      ",
            "documentation": "\n         <p>The video in which you want to recognize celebrities. The video must be stored\n      in an Amazon S3 bucket.</p>\n      ",
            "required": true,
            "shape_name": "Video"
          },
          "ClientRequestToken": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9-_]+$",
            "zonbookDocumentation": "\n         <simpara>Idempotent token used to identify the start request. If you use the same token with multiple\n    <code>StartCelebrityRecognition</code> requests, the same <code>JobId</code> is returned. Use\n      <code>ClientRequestToken</code> to prevent the same job from being accidently started more than once. </simpara>\n      ",
            "documentation": "\n         <p>Idempotent token used to identify the start request. If you use the same token with multiple\n    <code>StartCelebrityRecognition</code> requests, the same <code>JobId</code> is returned. Use\n      <code>ClientRequestToken</code> to prevent the same job from being accidently started more than once. </p>\n      ",
            "shape_name": "ClientRequestToken",
            "min_length": 1,
            "max_length": 64
          },
          "NotificationChannel": {
            "type": "structure",
            "members": {
              "SNSTopicArn": {
                "type": "string",
                "pattern": "(^arn:aws:sns:.*:\\w{12}:.+$)",
                "zonbookDocumentation": "\n        <simpara>The Amazon SNS topic to which Amazon Rekognition to posts the completion status.</simpara>\n      ",
                "documentation": "\n        <p>The Amazon SNS topic to which Amazon Rekognition to posts the completion status.</p>\n      ",
                "required": true,
                "shape_name": "SNSTopicArn"
              },
              "RoleArn": {
                "type": "string",
                "pattern": "arn:aws:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+",
                "zonbookDocumentation": "\n        <para>The ARN of an IAM role that gives Amazon Rekognition publishing permissions to the Amazon SNS topic. </para>\n      ",
                "documentation": "\n        <p>The ARN of an IAM role that gives Amazon Rekognition publishing permissions to the Amazon SNS topic. </p>\n      ",
                "required": true,
                "shape_name": "RoleArn"
              }
            },
            "zonbookDocumentation": "\n         <simpara>The Amazon SNS topic ARN that you want Amazon Rekognition Video to publish the completion status of the\n      celebrity recognition analysis to.</simpara>\n      ",
            "documentation": "\n         <p>The Amazon SNS topic ARN that you want Amazon Rekognition Video to publish the completion status of the\n      celebrity recognition analysis to.</p>\n      ",
            "shape_name": "NotificationChannel"
          },
          "JobTag": {
            "type": "string",
            "pattern": "[a-zA-Z0-9_.\\-:]+",
            "zonbookDocumentation": "\n         <para>Unique identifier you specify to identify the job in the completion status published to the Amazon Simple Notification Service topic. </para>\n      ",
            "documentation": "\n         <p>Unique identifier you specify to identify the job in the completion status published to the Amazon Simple Notification Service topic. </p>\n      ",
            "shape_name": "JobTag",
            "min_length": 1,
            "max_length": 256
          }
        },
        "shape_name": "StartCelebrityRecognitionRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "JobId": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9-_]+$",
            "zonbookDocumentation": "\n         <simpara>The identifier for the celebrity recognition analysis job. Use <code>JobId</code> to identify the job in\n      a subsequent call to <code>GetCelebrityRecognition</code>.</simpara>\n      ",
            "documentation": "\n         <p>The identifier for the celebrity recognition analysis job. Use <code>JobId</code> to identify the job in\n      a subsequent call to <code>GetCelebrityRecognition</code>.</p>\n      ",
            "shape_name": "JobId",
            "min_length": 1,
            "max_length": 64
          }
        },
        "shape_name": "StartCelebrityRecognitionResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <para>A <code>ClientRequestToken</code> input parameter was reused with an operation, but at least one of the other input\n        parameters is different from the previous call to the operation.</para>\n      ",
          "documentation": "\n         <p>A <code>ClientRequestToken</code> input parameter was reused with an operation, but at least one of the other input\n        parameters is different from the previous call to the operation.</p>\n      ",
          "shape_name": "IdempotentParameterMismatchException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is unable to access the S3 object specified in the request.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is unable to access the S3 object specified in the request.</p>\n      ",
          "shape_name": "InvalidS3ObjectException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The file size or duration of the supplied media is too large. The maximum file size is 8GB.\n        The maximum duration is 2 hours. </simpara>\n      ",
          "documentation": "\n         <p>The file size or duration of the supplied media is too large. The maximum file size is 8GB.\n        The maximum duration is 2 hours. </p>\n      ",
          "shape_name": "VideoTooLargeException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An Amazon Rekognition service limit was exceeded. For example, if you start too many Amazon Rekognition Video jobs concurrently, calls to start operations \n            (<code>StartLabelDetection</code>, for example) will raise a <code>LimitExceededException</code> exception (HTTP status code: 400) until\n            the number of concurrently running jobs is below the Amazon Rekognition service limit.  </simpara>\n      ",
          "documentation": "\n        <p>An Amazon Rekognition service limit was exceeded. For example, if you start too many Amazon Rekognition Video jobs concurrently, calls to start operations \n            (<code>StartLabelDetection</code>, for example) will raise a <code>LimitExceededException</code> exception (HTTP status code: 400) until\n            the number of concurrently running jobs is below the Amazon Rekognition service limit.  </p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        }
      ],
      "documentation": "\n         <p>Starts asynchronous recognition of celebrities in a stored video.</p>\n         <p>Amazon Rekognition Video can detect celebrities in a video must be stored in an Amazon S3 bucket. Use <a>Video</a> to specify the bucket name\n      and the filename of the video.\n      <code>StartCelebrityRecognition</code>\n      returns a job identifier (<code>JobId</code>) which you use to get the results of the analysis.\n      When celebrity recognition analysis is finished, Amazon Rekognition Video publishes a completion status\n      to the Amazon Simple Notification Service topic that you specify in <code>NotificationChannel</code>.\n      To get the results of the celebrity recognition analysis, first check that the status value published to the Amazon SNS\n      topic is <code>SUCCEEDED</code>. If so, call   and pass the job identifier\n      (<code>JobId</code>) from the initial call to <code>StartCelebrityRecognition</code>. </p>\n      \n         <p>For more information, see Recognizing Celebrities in the Amazon Rekognition Developer Guide.</p>\n      "
    },
    "StartFaceSearch": {
      "name": "StartFaceSearch",
      "input": {
        "type": "structure",
        "members": {
          "Video": {
            "type": "structure",
            "members": {
              "S3Object": {
                "type": "structure",
                "members": {
                  "Bucket": {
                    "type": "string",
                    "pattern": "[0-9A-Za-z\\.\\-_]*",
                    "zonbookDocumentation": "\n         <simpara>Name of the S3 bucket.</simpara>\n      ",
                    "documentation": "\n         <p>Name of the S3 bucket.</p>\n      ",
                    "shape_name": "S3Bucket",
                    "min_length": 3,
                    "max_length": 255
                  },
                  "Name": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>S3 object key name.</simpara>\n      ",
                    "documentation": "\n         <p>S3 object key name.</p>\n      ",
                    "shape_name": "S3ObjectName",
                    "min_length": 1,
                    "max_length": 1024
                  },
                  "Version": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>If the bucket is versioning enabled, you can specify the object version. </simpara>\n      ",
                    "documentation": "\n         <p>If the bucket is versioning enabled, you can specify the object version. </p>\n      ",
                    "shape_name": "S3ObjectVersion",
                    "min_length": 1,
                    "max_length": 1024
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The Amazon S3 bucket name and file name for the video.</simpara>\n      ",
                "documentation": "\n        <p>The Amazon S3 bucket name and file name for the video.</p>\n      ",
                "shape_name": "S3Object"
              }
            },
            "zonbookDocumentation": "\n         <simpara>The video you want to search. The video must be stored in an Amazon S3 bucket. </simpara>\n      ",
            "documentation": "\n         <p>The video you want to search. The video must be stored in an Amazon S3 bucket. </p>\n      ",
            "required": true,
            "shape_name": "Video"
          },
          "ClientRequestToken": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9-_]+$",
            "zonbookDocumentation": "\n         <simpara>Idempotent token used to identify the start request. If you use the same token with multiple\n      <code>StartFaceSearch</code> requests, the same <code>JobId</code> is returned. Use\n      <code>ClientRequestToken</code> to prevent the same job from being accidently started more than once. </simpara>\n      ",
            "documentation": "\n         <p>Idempotent token used to identify the start request. If you use the same token with multiple\n      <code>StartFaceSearch</code> requests, the same <code>JobId</code> is returned. Use\n      <code>ClientRequestToken</code> to prevent the same job from being accidently started more than once. </p>\n      ",
            "shape_name": "ClientRequestToken",
            "min_length": 1,
            "max_length": 64
          },
          "FaceMatchThreshold": {
            "type": "float",
            "zonbookDocumentation": "\n         <simpara>The minimum confidence in the person match to return. For example, don't return any matches where confidence in matches is less than 70%. </simpara>\n      ",
            "documentation": "\n         <p>The minimum confidence in the person match to return. For example, don't return any matches where confidence in matches is less than 70%. </p>\n      ",
            "shape_name": "Percent",
            "min_length": 0,
            "max_length": 100
          },
          "CollectionId": {
            "type": "string",
            "pattern": "[a-zA-Z0-9_.\\-]+",
            "zonbookDocumentation": "\n         <simpara>ID of the collection that contains the faces you want to search for.</simpara>\n      ",
            "documentation": "\n         <p>ID of the collection that contains the faces you want to search for.</p>\n      ",
            "required": true,
            "shape_name": "CollectionId",
            "min_length": 1,
            "max_length": 255
          },
          "NotificationChannel": {
            "type": "structure",
            "members": {
              "SNSTopicArn": {
                "type": "string",
                "pattern": "(^arn:aws:sns:.*:\\w{12}:.+$)",
                "zonbookDocumentation": "\n        <simpara>The Amazon SNS topic to which Amazon Rekognition to posts the completion status.</simpara>\n      ",
                "documentation": "\n        <p>The Amazon SNS topic to which Amazon Rekognition to posts the completion status.</p>\n      ",
                "required": true,
                "shape_name": "SNSTopicArn"
              },
              "RoleArn": {
                "type": "string",
                "pattern": "arn:aws:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+",
                "zonbookDocumentation": "\n        <para>The ARN of an IAM role that gives Amazon Rekognition publishing permissions to the Amazon SNS topic. </para>\n      ",
                "documentation": "\n        <p>The ARN of an IAM role that gives Amazon Rekognition publishing permissions to the Amazon SNS topic. </p>\n      ",
                "required": true,
                "shape_name": "RoleArn"
              }
            },
            "zonbookDocumentation": "\n         <simpara>The ARN of the Amazon SNS topic to which you want Amazon Rekognition Video to publish the completion status of the search. </simpara>\n      ",
            "documentation": "\n         <p>The ARN of the Amazon SNS topic to which you want Amazon Rekognition Video to publish the completion status of the search. </p>\n      ",
            "shape_name": "NotificationChannel"
          },
          "JobTag": {
            "type": "string",
            "pattern": "[a-zA-Z0-9_.\\-:]+",
            "zonbookDocumentation": "\n         <para>Unique identifier you specify to identify the job in the completion status published to the Amazon Simple Notification Service topic. </para>\n      ",
            "documentation": "\n         <p>Unique identifier you specify to identify the job in the completion status published to the Amazon Simple Notification Service topic. </p>\n      ",
            "shape_name": "JobTag",
            "min_length": 1,
            "max_length": 256
          }
        },
        "shape_name": "StartFaceSearchRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "JobId": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9-_]+$",
            "zonbookDocumentation": "\n         <simpara>The identifier for the search job. Use <code>JobId</code> to identify the job in a subsequent call to <code>GetFaceSearch</code>. </simpara>\n      ",
            "documentation": "\n         <p>The identifier for the search job. Use <code>JobId</code> to identify the job in a subsequent call to <code>GetFaceSearch</code>. </p>\n      ",
            "shape_name": "JobId",
            "min_length": 1,
            "max_length": 64
          }
        },
        "shape_name": "StartFaceSearchResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <para>A <code>ClientRequestToken</code> input parameter was reused with an operation, but at least one of the other input\n        parameters is different from the previous call to the operation.</para>\n      ",
          "documentation": "\n         <p>A <code>ClientRequestToken</code> input parameter was reused with an operation, but at least one of the other input\n        parameters is different from the previous call to the operation.</p>\n      ",
          "shape_name": "IdempotentParameterMismatchException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is unable to access the S3 object specified in the request.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is unable to access the S3 object specified in the request.</p>\n      ",
          "shape_name": "InvalidS3ObjectException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The file size or duration of the supplied media is too large. The maximum file size is 8GB.\n        The maximum duration is 2 hours. </simpara>\n      ",
          "documentation": "\n         <p>The file size or duration of the supplied media is too large. The maximum file size is 8GB.\n        The maximum duration is 2 hours. </p>\n      ",
          "shape_name": "VideoTooLargeException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An Amazon Rekognition service limit was exceeded. For example, if you start too many Amazon Rekognition Video jobs concurrently, calls to start operations \n            (<code>StartLabelDetection</code>, for example) will raise a <code>LimitExceededException</code> exception (HTTP status code: 400) until\n            the number of concurrently running jobs is below the Amazon Rekognition service limit.  </simpara>\n      ",
          "documentation": "\n        <p>An Amazon Rekognition service limit was exceeded. For example, if you start too many Amazon Rekognition Video jobs concurrently, calls to start operations \n            (<code>StartLabelDetection</code>, for example) will raise a <code>LimitExceededException</code> exception (HTTP status code: 400) until\n            the number of concurrently running jobs is below the Amazon Rekognition service limit.  </p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The collection specified in the request cannot be found.</simpara>\n      ",
          "documentation": "\n         <p>The collection specified in the request cannot be found.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        }
      ],
      "documentation": "\n         <p>Starts the asynchronous search for faces in a collection that match the faces of persons detected in a stored video.</p>\n         <p>The video must be stored in an Amazon S3 bucket. Use <a>Video</a> to specify the bucket name\n      and the filename of the video. <code>StartFaceSearch</code>\n      returns a job identifier (<code>JobId</code>) which you use to get the search results once the search has completed.\n      When searching is finished, Amazon Rekognition Video publishes a completion status\n      to the Amazon Simple Notification Service topic that you specify in <code>NotificationChannel</code>.\n      To get the search results, first check that the status value published to the Amazon SNS\n      topic is <code>SUCCEEDED</code>. If so, call  and pass the job identifier\n      (<code>JobId</code>) from the initial call to <code>StartFaceSearch</code>. For more information, see\n      <a>procedure-person-search-videos</a>.</p>\n      "
    },
    "GetLabelDetection": {
      "name": "GetLabelDetection",
      "input": {
        "type": "structure",
        "members": {
          "JobId": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9-_]+$",
            "zonbookDocumentation": "\n         <simpara>Job identifier for the label detection operation for which you want results returned. You get the job identifer from\n      an initial call to <code>StartlabelDetection</code>.</simpara>\n      ",
            "documentation": "\n         <p>Job identifier for the label detection operation for which you want results returned. You get the job identifer from\n      an initial call to <code>StartlabelDetection</code>.</p>\n      ",
            "required": true,
            "shape_name": "JobId",
            "min_length": 1,
            "max_length": 64
          },
          "MaxResults": {
            "type": "integer",
            "zonbookDocumentation": "\n         <simpara>Maximum number of results to return per paginated call. The largest value you can specify is 1000. \n       If you specify a value greater than 1000, a maximum of 1000 results is returned.\n       The default value is 1000.</simpara>\n      ",
            "documentation": "\n         <p>Maximum number of results to return per paginated call. The largest value you can specify is 1000. \n       If you specify a value greater than 1000, a maximum of 1000 results is returned.\n       The default value is 1000.</p>\n      ",
            "shape_name": "MaxResults",
            "min_length": 1
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>If the previous response was incomplete (because there are more labels to retrieve), Amazon Rekognition Video returns a pagination\n         token in the response. You can use this pagination token to retrieve the next set of labels. </simpara>\n      ",
            "documentation": "\n         <p>If the previous response was incomplete (because there are more labels to retrieve), Amazon Rekognition Video returns a pagination\n         token in the response. You can use this pagination token to retrieve the next set of labels. </p>\n      ",
            "shape_name": "PaginationToken",
            "max_length": 255
          },
          "SortBy": {
            "type": "string",
            "enum": [
              "NAME",
              "TIMESTAMP"
            ],
            "zonbookDocumentation": "\n         <simpara>Sort to use for elements in the <code>Labels</code> array.\n      Use <code>TIMESTAMP</code> to sort array elements by the time labels are detected.\n      Use <code>NAME</code> to alphabetically group elements for a label together.\n      Within each label group, the array element are sorted by detection confidence.\n      The default sort is by <code>TIMESTAMP</code>.</simpara>\n      ",
            "documentation": "\n         <p>Sort to use for elements in the <code>Labels</code> array.\n      Use <code>TIMESTAMP</code> to sort array elements by the time labels are detected.\n      Use <code>NAME</code> to alphabetically group elements for a label together.\n      Within each label group, the array element are sorted by detection confidence.\n      The default sort is by <code>TIMESTAMP</code>.</p>\n      ",
            "shape_name": "LabelDetectionSortBy"
          }
        },
        "shape_name": "GetLabelDetectionRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "JobStatus": {
            "type": "string",
            "enum": [
              "IN_PROGRESS",
              "SUCCEEDED",
              "FAILED"
            ],
            "zonbookDocumentation": "\n         <simpara>The current status of the label detection job.</simpara>\n      ",
            "documentation": "\n         <p>The current status of the label detection job.</p>\n      ",
            "shape_name": "VideoJobStatus"
          },
          "StatusMessage": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>If the job fails, <code>StatusMessage</code> provides a descriptive error message.</simpara>\n      ",
            "documentation": "\n         <p>If the job fails, <code>StatusMessage</code> provides a descriptive error message.</p>\n      ",
            "shape_name": "StatusMessage"
          },
          "VideoMetadata": {
            "type": "structure",
            "members": {
              "Codec": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>Type of compression used in the analyzed video. </simpara>\n      ",
                "documentation": "\n        <p>Type of compression used in the analyzed video. </p>\n      ",
                "shape_name": "String"
              },
              "DurationMillis": {
                "type": "long",
                "zonbookDocumentation": "\n        <simpara>Length of the video in milliseconds.</simpara>\n      ",
                "documentation": "\n        <p>Length of the video in milliseconds.</p>\n      ",
                "shape_name": "ULong",
                "min_length": 0
              },
              "Format": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>Format of the analyzed video. Possible values are MP4, MOV and AVI. </simpara>\n      ",
                "documentation": "\n        <p>Format of the analyzed video. Possible values are MP4, MOV and AVI. </p>\n      ",
                "shape_name": "String"
              },
              "FrameRate": {
                "type": "float",
                "zonbookDocumentation": "\n        <simpara>Number of frames per second in the video.</simpara>\n      ",
                "documentation": "\n        <p>Number of frames per second in the video.</p>\n      ",
                "shape_name": "Float"
              },
              "FrameHeight": {
                "type": "long",
                "zonbookDocumentation": "\n        <simpara>Vertical pixel dimension of the video.</simpara>\n      ",
                "documentation": "\n        <p>Vertical pixel dimension of the video.</p>\n      ",
                "shape_name": "ULong",
                "min_length": 0
              },
              "FrameWidth": {
                "type": "long",
                "zonbookDocumentation": "\n        <simpara>Horizontal pixel dimension of the video.</simpara>\n      ",
                "documentation": "\n        <p>Horizontal pixel dimension of the video.</p>\n      ",
                "shape_name": "ULong",
                "min_length": 0
              }
            },
            "zonbookDocumentation": "\n         <simpara>Information about a video that Amazon Rekognition Video analyzed. <code>Videometadata</code> is returned in\n       every page of paginated responses from a Amazon Rekognition video operation.</simpara>\n      ",
            "documentation": "\n         <p>Information about a video that Amazon Rekognition Video analyzed. <code>Videometadata</code> is returned in\n       every page of paginated responses from a Amazon Rekognition video operation.</p>\n      ",
            "shape_name": "VideoMetadata"
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>If the response is truncated, Amazon Rekognition Video returns this token that you can use in the subsequent request\n        to retrieve the next set of labels.</simpara>\n      ",
            "documentation": "\n         <p>If the response is truncated, Amazon Rekognition Video returns this token that you can use in the subsequent request\n        to retrieve the next set of labels.</p>\n      ",
            "shape_name": "PaginationToken",
            "max_length": 255
          },
          "Labels": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of labels detected in the video. Each element contains the detected label and the time,\n        in milliseconds from the start of the video, that the label was detected. </simpara>\n      ",
            "documentation": "\n         <p>An array of labels detected in the video. Each element contains the detected label and the time,\n        in milliseconds from the start of the video, that the label was detected. </p>\n      ",
            "shape_name": "LabelDetections",
            "members": {
              "type": "structure",
              "members": {
                "Timestamp": {
                  "type": "long",
                  "zonbookDocumentation": "\n        <simpara>Time, in milliseconds from the start of the video, that the label was detected.</simpara>\n      ",
                  "documentation": "\n        <p>Time, in milliseconds from the start of the video, that the label was detected.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "Label": {
                  "type": "structure",
                  "members": {
                    "Name": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The name (label) of the object.</simpara>\n      ",
                      "documentation": "\n         <p>The name (label) of the object.</p>\n      ",
                      "shape_name": "String"
                    },
                    "Confidence": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Level of confidence.</simpara>\n      ",
                      "documentation": "\n         <p>Level of confidence.</p>\n      ",
                      "shape_name": "Percent",
                      "min_length": 0,
                      "max_length": 100
                    }
                  },
                  "zonbookDocumentation": "\n        <simpara>Details about the detected label.</simpara>\n      ",
                  "documentation": "\n        <p>Details about the detected label.</p>\n      ",
                  "shape_name": "Label"
                }
              },
              "zonbookDocumentation": "\n        <simpara>Information about a label detected in a video analysis request and the time the label was detected in the video. </simpara>\n      ",
              "documentation": "\n        <p>Information about a label detected in a video analysis request and the time the label was detected in the video. </p>\n      ",
              "shape_name": "LabelDetection"
            }
          }
        },
        "shape_name": "GetLabelDetectionResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Pagination token in the request is not valid.</simpara>\n      ",
          "documentation": "\n         <p>Pagination token in the request is not valid.</p>\n      ",
          "shape_name": "InvalidPaginationTokenException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The collection specified in the request cannot be found.</simpara>\n      ",
          "documentation": "\n         <p>The collection specified in the request cannot be found.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        }
      ],
      "documentation": "\n         <p>Gets the label detection results of a Amazon Rekognition Video analysis started by .  </p>\n\n         <p>The label detection operation is started by a call to \n      which returns a job identifier (<code>JobId</code>). When the label detection operation finishes, Amazon Rekognition publishes a completion status to\n      the Amazon Simple Notification Service topic registered in the initial call to <code>StartlabelDetection</code>. To get the results\n      of the label detection operation, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.\n      If so, call   and pass the job identifier\n      (<code>JobId</code>) from the initial call to <code>StartLabelDetection</code>.</p>\n         <p>\n            <code>GetLabelDetection</code> returns an array of detected labels (<code>Labels</code>) sorted by the time\n       the labels were detected. You can also sort by the label name by specifying <code>NAME</code> for the\n       <code>SortBy</code> input parameter.</p>\n         <p>The labels returned include the label name, the percentage confidence in the accuracy of the detected label,\n        and the time the label was detected in the video.</p>\n         <p>Use MaxResults parameter to limit the number of labels returned. If there are more results than\n    specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a pagination token for getting the next set\n    of results. To get the next page of results, call <code>GetlabelDetection</code> and populate the <code>NextToken</code> request parameter with the token\n     value returned from the previous call to <code>GetLabelDetection</code>.</p>\n\n      "
    },
    "GetContentModeration": {
      "name": "GetContentModeration",
      "input": {
        "type": "structure",
        "members": {
          "JobId": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9-_]+$",
            "zonbookDocumentation": "\n         <simpara>The identifier for the content moderation job. Use <code>JobId</code> to identify the job in\n       a subsequent call to <code>GetContentModeration</code>.</simpara>\n     ",
            "documentation": "\n         <p>The identifier for the content moderation job. Use <code>JobId</code> to identify the job in\n       a subsequent call to <code>GetContentModeration</code>.</p>\n     ",
            "required": true,
            "shape_name": "JobId",
            "min_length": 1,
            "max_length": 64
          },
          "MaxResults": {
            "type": "integer",
            "zonbookDocumentation": "\n         <simpara>Maximum number of results to return per paginated call. The largest value you can specify is 1000. \n    If you specify a value greater than 1000, a maximum of 1000 results is returned.\n    The default value is 1000.</simpara>\n      ",
            "documentation": "\n         <p>Maximum number of results to return per paginated call. The largest value you can specify is 1000. \n    If you specify a value greater than 1000, a maximum of 1000 results is returned.\n    The default value is 1000.</p>\n      ",
            "shape_name": "MaxResults",
            "min_length": 1
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>If the previous response was incomplete (because there is more data to retrieve), Amazon Rekognition\n        returns a pagination token in the response. You can use this pagination token\n        to retrieve the next set of content moderation labels.</simpara>\n      ",
            "documentation": "\n         <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Rekognition\n        returns a pagination token in the response. You can use this pagination token\n        to retrieve the next set of content moderation labels.</p>\n      ",
            "shape_name": "PaginationToken",
            "max_length": 255
          },
          "SortBy": {
            "type": "string",
            "enum": [
              "NAME",
              "TIMESTAMP"
            ],
            "zonbookDocumentation": "\n         <simpara>Sort to use for elements in the <code>ModerationLabelDetections</code> array.\n       Use <code>TIMESTAMP</code> to sort array elements by the time labels are detected.\n       Use <code>NAME</code> to alphabetically group elements for a label together.\n       Within each label group, the array element are sorted by detection confidence.\n       The default sort is by <code>TIMESTAMP</code>.</simpara>\n      ",
            "documentation": "\n         <p>Sort to use for elements in the <code>ModerationLabelDetections</code> array.\n       Use <code>TIMESTAMP</code> to sort array elements by the time labels are detected.\n       Use <code>NAME</code> to alphabetically group elements for a label together.\n       Within each label group, the array element are sorted by detection confidence.\n       The default sort is by <code>TIMESTAMP</code>.</p>\n      ",
            "shape_name": "ContentModerationSortBy"
          }
        },
        "shape_name": "GetContentModerationRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "JobStatus": {
            "type": "string",
            "enum": [
              "IN_PROGRESS",
              "SUCCEEDED",
              "FAILED"
            ],
            "zonbookDocumentation": "\n         <simpara>The current status of the content moderation job.</simpara>\n      ",
            "documentation": "\n         <p>The current status of the content moderation job.</p>\n      ",
            "shape_name": "VideoJobStatus"
          },
          "StatusMessage": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>If the job fails, <code>StatusMessage</code> provides a descriptive error message.</simpara>\n      ",
            "documentation": "\n         <p>If the job fails, <code>StatusMessage</code> provides a descriptive error message.</p>\n      ",
            "shape_name": "StatusMessage"
          },
          "VideoMetadata": {
            "type": "structure",
            "members": {
              "Codec": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>Type of compression used in the analyzed video. </simpara>\n      ",
                "documentation": "\n        <p>Type of compression used in the analyzed video. </p>\n      ",
                "shape_name": "String"
              },
              "DurationMillis": {
                "type": "long",
                "zonbookDocumentation": "\n        <simpara>Length of the video in milliseconds.</simpara>\n      ",
                "documentation": "\n        <p>Length of the video in milliseconds.</p>\n      ",
                "shape_name": "ULong",
                "min_length": 0
              },
              "Format": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>Format of the analyzed video. Possible values are MP4, MOV and AVI. </simpara>\n      ",
                "documentation": "\n        <p>Format of the analyzed video. Possible values are MP4, MOV and AVI. </p>\n      ",
                "shape_name": "String"
              },
              "FrameRate": {
                "type": "float",
                "zonbookDocumentation": "\n        <simpara>Number of frames per second in the video.</simpara>\n      ",
                "documentation": "\n        <p>Number of frames per second in the video.</p>\n      ",
                "shape_name": "Float"
              },
              "FrameHeight": {
                "type": "long",
                "zonbookDocumentation": "\n        <simpara>Vertical pixel dimension of the video.</simpara>\n      ",
                "documentation": "\n        <p>Vertical pixel dimension of the video.</p>\n      ",
                "shape_name": "ULong",
                "min_length": 0
              },
              "FrameWidth": {
                "type": "long",
                "zonbookDocumentation": "\n        <simpara>Horizontal pixel dimension of the video.</simpara>\n      ",
                "documentation": "\n        <p>Horizontal pixel dimension of the video.</p>\n      ",
                "shape_name": "ULong",
                "min_length": 0
              }
            },
            "zonbookDocumentation": "\n         <simpara>Information about a video that Amazon Rekognition analyzed. <code>Videometadata</code>\n     is returned in every page of paginated responses from <code>GetContentModeration</code>. </simpara>\n      ",
            "documentation": "\n         <p>Information about a video that Amazon Rekognition analyzed. <code>Videometadata</code>\n     is returned in every page of paginated responses from <code>GetContentModeration</code>. </p>\n      ",
            "shape_name": "VideoMetadata"
          },
          "ModerationLabels": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>The detected moderation labels and the time(s) they were detected.</simpara>\n      ",
            "documentation": "\n         <p>The detected moderation labels and the time(s) they were detected.</p>\n      ",
            "shape_name": "ContentModerationDetections",
            "members": {
              "type": "structure",
              "members": {
                "Timestamp": {
                  "type": "long",
                  "zonbookDocumentation": "\n        <simpara>Time, in milliseconds from the beginning of the video, that the moderation label was detected.</simpara>\n      ",
                  "documentation": "\n        <p>Time, in milliseconds from the beginning of the video, that the moderation label was detected.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "ModerationLabel": {
                  "type": "structure",
                  "members": {
                    "Confidence": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Specifies the confidence that Amazon Rekognition has that the label has been correctly\n      identified.</simpara>\n         <simpara>If you don't specify the <code>MinConfidence</code> parameter in the call to\n        <code>DetectModerationLabels</code>, the operation returns labels with a confidence value\n      greater than or equal to 50 percent.</simpara>\n      ",
                      "documentation": "\n         <p>Specifies the confidence that Amazon Rekognition has that the label has been correctly\n      identified.</p>\n         <p>If you don't specify the <code>MinConfidence</code> parameter in the call to\n        <code>DetectModerationLabels</code>, the operation returns labels with a confidence value\n      greater than or equal to 50 percent.</p>\n      ",
                      "shape_name": "Percent",
                      "min_length": 0,
                      "max_length": 100
                    },
                    "Name": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The label name for the type of content detected in the image.</simpara>\n      ",
                      "documentation": "\n         <p>The label name for the type of content detected in the image.</p>\n      ",
                      "shape_name": "String"
                    },
                    "ParentName": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The name for the parent label. Labels at the top-level of the hierarchy have the parent\n      label <code>\"\"</code>.</simpara>\n      ",
                      "documentation": "\n         <p>The name for the parent label. Labels at the top-level of the hierarchy have the parent\n      label <code>\"\"</code>.</p>\n      ",
                      "shape_name": "String"
                    }
                  },
                  "zonbookDocumentation": "\n        <simpara>The moderation label detected by in the stored video.</simpara>\n      ",
                  "documentation": "\n        <p>The moderation label detected by in the stored video.</p>\n      ",
                  "shape_name": "ModerationLabel"
                }
              },
              "zonbookDocumentation": "\n        <simpara>Information about a moderation label detection in a stored video.</simpara>\n\n      ",
              "documentation": "\n        <p>Information about a moderation label detection in a stored video.</p>\n\n      ",
              "shape_name": "ContentModerationDetection"
            }
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>If the response is truncated, Amazon Rekognition Video returns this token that you can use in the subsequent\n     request to retrieve the next set of moderation labels. </simpara>\n      ",
            "documentation": "\n         <p>If the response is truncated, Amazon Rekognition Video returns this token that you can use in the subsequent\n     request to retrieve the next set of moderation labels. </p>\n      ",
            "shape_name": "PaginationToken",
            "max_length": 255
          }
        },
        "shape_name": "GetContentModerationResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Pagination token in the request is not valid.</simpara>\n      ",
          "documentation": "\n         <p>Pagination token in the request is not valid.</p>\n      ",
          "shape_name": "InvalidPaginationTokenException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The collection specified in the request cannot be found.</simpara>\n      ",
          "documentation": "\n         <p>The collection specified in the request cannot be found.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        }
      ],
      "documentation": "\n         <p>Gets the content moderation analysis results for a Amazon Rekognition Video analysis started by\n       .</p>\n\n         <p>Content moderation analysis of a video is an asynchronous operation. You start analysis by calling\n       . which returns a job identifier (<code>JobId</code>).\n       When analysis finishes, Amazon Rekognition Video publishes a completion status to the Amazon Simple Notification Service\n       topic registered in the initial call to <code>StartContentModeration</code>.\n       To get the results of the content moderation analysis, first check that the status value published to the Amazon SNS\n       topic is <code>SUCCEEDED</code>. If so, call  <code>GetCelebrityDetection</code> and pass the job identifier\n       (<code>JobId</code>) from the initial call to <code>StartCelebrityDetection</code>. </p>\n       \n         <p>For more information, see Working with Stored Videos in the\n     Amazon Rekognition Devlopers Guide.</p>\n         <p>\n            <code>GetContentModeration</code> returns detected content moderation labels,\n      and the time they are detected, in an array, <code>ModerationLabels</code>, of\n       objects.\n     </p>\n         <p>By default, the moderated labels are returned sorted by time, in milliseconds from the start of the\n       video. You can also sort them by moderated label by specifying <code>NAME</code> for the <code>SortBy</code>\n       input parameter. </p>\n         <p>Since video analysis can return a large number of results, use the <code>MaxResults</code> parameter to limit\n      the number of labels returned in a single call to <code>GetContentModeration</code>. If there are more results than\n       specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a\n       pagination token for getting the next set of results. To get the next page of results, call <code>GetContentModeration</code>\n       and populate the <code>NextToken</code> request parameter with the value of <code>NextToken</code>\n       returned from the previous call to <code>GetContentModeration</code>.</p>\n     \n         <p>For more information, see Detecting Unsafe Content in the Amazon Rekognition Developer Guide.</p>\n\n\n      "
    },
    "GetFaceDetection": {
      "name": "GetFaceDetection",
      "input": {
        "type": "structure",
        "members": {
          "JobId": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9-_]+$",
            "zonbookDocumentation": "\n         <simpara>Unique identifier for the face detection job. The <code>JobId</code> is returned from <code>StartFaceDetection</code>.</simpara>\n      ",
            "documentation": "\n         <p>Unique identifier for the face detection job. The <code>JobId</code> is returned from <code>StartFaceDetection</code>.</p>\n      ",
            "required": true,
            "shape_name": "JobId",
            "min_length": 1,
            "max_length": 64
          },
          "MaxResults": {
            "type": "integer",
            "zonbookDocumentation": "\n         <simpara>Maximum number of results to return per paginated call. The largest value you can specify is 1000. \n       If you specify a value greater than 1000, a maximum of 1000 results is returned.\n       The default value is 1000.</simpara>\n      ",
            "documentation": "\n         <p>Maximum number of results to return per paginated call. The largest value you can specify is 1000. \n       If you specify a value greater than 1000, a maximum of 1000 results is returned.\n       The default value is 1000.</p>\n      ",
            "shape_name": "MaxResults",
            "min_length": 1
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>If the previous response was incomplete (because there are more faces to retrieve), Amazon Rekognition Video returns a pagination\n       token in the response. You can use this pagination token to retrieve the next set of faces.</simpara>\n      ",
            "documentation": "\n         <p>If the previous response was incomplete (because there are more faces to retrieve), Amazon Rekognition Video returns a pagination\n       token in the response. You can use this pagination token to retrieve the next set of faces.</p>\n      ",
            "shape_name": "PaginationToken",
            "max_length": 255
          }
        },
        "shape_name": "GetFaceDetectionRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "JobStatus": {
            "type": "string",
            "enum": [
              "IN_PROGRESS",
              "SUCCEEDED",
              "FAILED"
            ],
            "zonbookDocumentation": "\n         <simpara>The current status of the face detection job.</simpara>\n      ",
            "documentation": "\n         <p>The current status of the face detection job.</p>\n      ",
            "shape_name": "VideoJobStatus"
          },
          "StatusMessage": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>If the job fails, <code>StatusMessage</code> provides a descriptive error message.</simpara>\n      ",
            "documentation": "\n         <p>If the job fails, <code>StatusMessage</code> provides a descriptive error message.</p>\n      ",
            "shape_name": "StatusMessage"
          },
          "VideoMetadata": {
            "type": "structure",
            "members": {
              "Codec": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>Type of compression used in the analyzed video. </simpara>\n      ",
                "documentation": "\n        <p>Type of compression used in the analyzed video. </p>\n      ",
                "shape_name": "String"
              },
              "DurationMillis": {
                "type": "long",
                "zonbookDocumentation": "\n        <simpara>Length of the video in milliseconds.</simpara>\n      ",
                "documentation": "\n        <p>Length of the video in milliseconds.</p>\n      ",
                "shape_name": "ULong",
                "min_length": 0
              },
              "Format": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>Format of the analyzed video. Possible values are MP4, MOV and AVI. </simpara>\n      ",
                "documentation": "\n        <p>Format of the analyzed video. Possible values are MP4, MOV and AVI. </p>\n      ",
                "shape_name": "String"
              },
              "FrameRate": {
                "type": "float",
                "zonbookDocumentation": "\n        <simpara>Number of frames per second in the video.</simpara>\n      ",
                "documentation": "\n        <p>Number of frames per second in the video.</p>\n      ",
                "shape_name": "Float"
              },
              "FrameHeight": {
                "type": "long",
                "zonbookDocumentation": "\n        <simpara>Vertical pixel dimension of the video.</simpara>\n      ",
                "documentation": "\n        <p>Vertical pixel dimension of the video.</p>\n      ",
                "shape_name": "ULong",
                "min_length": 0
              },
              "FrameWidth": {
                "type": "long",
                "zonbookDocumentation": "\n        <simpara>Horizontal pixel dimension of the video.</simpara>\n      ",
                "documentation": "\n        <p>Horizontal pixel dimension of the video.</p>\n      ",
                "shape_name": "ULong",
                "min_length": 0
              }
            },
            "zonbookDocumentation": "\n         <simpara>Information about a video that Amazon Rekognition Video analyzed. <code>Videometadata</code> is returned in\n       every page of paginated responses from a Amazon Rekognition video operation.</simpara>\n      ",
            "documentation": "\n         <p>Information about a video that Amazon Rekognition Video analyzed. <code>Videometadata</code> is returned in\n       every page of paginated responses from a Amazon Rekognition video operation.</p>\n      ",
            "shape_name": "VideoMetadata"
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>If the response is truncated, Amazon Rekognition returns this token that you can use in the subsequent request to retrieve the next set of faces. </simpara>\n      ",
            "documentation": "\n         <p>If the response is truncated, Amazon Rekognition returns this token that you can use in the subsequent request to retrieve the next set of faces. </p>\n      ",
            "shape_name": "PaginationToken",
            "max_length": 255
          },
          "Faces": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of faces detected in the video. Each element contains a detected face's details and the time,\n       in milliseconds from the start of the video, the face was detected. </simpara>\n      ",
            "documentation": "\n         <p>An array of faces detected in the video. Each element contains a detected face's details and the time,\n       in milliseconds from the start of the video, the face was detected. </p>\n      ",
            "shape_name": "FaceDetections",
            "members": {
              "type": "structure",
              "members": {
                "Timestamp": {
                  "type": "long",
                  "zonbookDocumentation": "\n        <simpara>Time, in milliseconds from the start of the video, that the face was detected.</simpara>\n      ",
                  "documentation": "\n        <p>Time, in milliseconds from the start of the video, that the face was detected.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "Face": {
                  "type": "structure",
                  "members": {
                    "BoundingBox": {
                      "type": "structure",
                      "members": {
                        "Width": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Width of the bounding box as a ratio of the overall image width.</simpara>\n      ",
                          "documentation": "\n         <p>Width of the bounding box as a ratio of the overall image width.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Height": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Height of the bounding box as a ratio of the overall image height.</simpara>\n      ",
                          "documentation": "\n         <p>Height of the bounding box as a ratio of the overall image height.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Left": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Left coordinate of the bounding box as a ratio of overall image width.</simpara>\n      ",
                          "documentation": "\n         <p>Left coordinate of the bounding box as a ratio of overall image width.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Top": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Top coordinate of the bounding box as a ratio of overall image height.</simpara>\n      ",
                          "documentation": "\n         <p>Top coordinate of the bounding box as a ratio of overall image height.</p>\n      ",
                          "shape_name": "Float"
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Bounding box of the face. Default attribute.</simpara>\n      ",
                      "documentation": "\n         <p>Bounding box of the face. Default attribute.</p>\n      ",
                      "shape_name": "BoundingBox"
                    },
                    "AgeRange": {
                      "type": "structure",
                      "members": {
                        "Low": {
                          "type": "integer",
                          "zonbookDocumentation": "\n         <simpara>The lowest estimated age.</simpara>\n      ",
                          "documentation": "\n         <p>The lowest estimated age.</p>\n      ",
                          "shape_name": "UInteger",
                          "min_length": 0
                        },
                        "High": {
                          "type": "integer",
                          "zonbookDocumentation": "\n         <simpara>The highest estimated age.</simpara>\n      ",
                          "documentation": "\n         <p>The highest estimated age.</p>\n      ",
                          "shape_name": "UInteger",
                          "min_length": 0
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>The estimated age range, in years, for the face. Low represents the lowest estimated\n      age and High represents the highest estimated age.</simpara>\n      ",
                      "documentation": "\n         <p>The estimated age range, in years, for the face. Low represents the lowest estimated\n      age and High represents the highest estimated age.</p>\n      ",
                      "shape_name": "AgeRange"
                    },
                    "Smile": {
                      "type": "structure",
                      "members": {
                        "Value": {
                          "type": "boolean",
                          "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the face is smiling or not.</simpara>\n      ",
                          "documentation": "\n         <p>Boolean value that indicates whether the face is smiling or not.</p>\n      ",
                          "shape_name": "Boolean"
                        },
                        "Confidence": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                          "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                          "shape_name": "Percent",
                          "min_length": 0,
                          "max_length": 100
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Indicates whether or not the face is smiling, and the confidence level in the\n      determination.</simpara>\n      ",
                      "documentation": "\n         <p>Indicates whether or not the face is smiling, and the confidence level in the\n      determination.</p>\n      ",
                      "shape_name": "Smile"
                    },
                    "Eyeglasses": {
                      "type": "structure",
                      "members": {
                        "Value": {
                          "type": "boolean",
                          "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the face is wearing eye glasses or not.</simpara>\n      ",
                          "documentation": "\n         <p>Boolean value that indicates whether the face is wearing eye glasses or not.</p>\n      ",
                          "shape_name": "Boolean"
                        },
                        "Confidence": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                          "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                          "shape_name": "Percent",
                          "min_length": 0,
                          "max_length": 100
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Indicates whether or not the face is wearing eye glasses, and the confidence level in\n      the determination.</simpara>\n      ",
                      "documentation": "\n         <p>Indicates whether or not the face is wearing eye glasses, and the confidence level in\n      the determination.</p>\n      ",
                      "shape_name": "Eyeglasses"
                    },
                    "Sunglasses": {
                      "type": "structure",
                      "members": {
                        "Value": {
                          "type": "boolean",
                          "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the face is wearing sunglasses or not.</simpara>\n      ",
                          "documentation": "\n         <p>Boolean value that indicates whether the face is wearing sunglasses or not.</p>\n      ",
                          "shape_name": "Boolean"
                        },
                        "Confidence": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                          "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                          "shape_name": "Percent",
                          "min_length": 0,
                          "max_length": 100
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Indicates whether or not the face is wearing sunglasses, and the confidence level in\n      the determination.</simpara>\n      ",
                      "documentation": "\n         <p>Indicates whether or not the face is wearing sunglasses, and the confidence level in\n      the determination.</p>\n      ",
                      "shape_name": "Sunglasses"
                    },
                    "Gender": {
                      "type": "structure",
                      "members": {
                        "Value": {
                          "type": "string",
                          "enum": [
                            "Male",
                            "Female"
                          ],
                          "zonbookDocumentation": "\n         <simpara>Gender of the face.</simpara>\n      ",
                          "documentation": "\n         <p>Gender of the face.</p>\n      ",
                          "shape_name": "GenderType"
                        },
                        "Confidence": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                          "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                          "shape_name": "Percent",
                          "min_length": 0,
                          "max_length": 100
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Gender of the face and the confidence level in the determination.</simpara>\n      ",
                      "documentation": "\n         <p>Gender of the face and the confidence level in the determination.</p>\n      ",
                      "shape_name": "Gender"
                    },
                    "Beard": {
                      "type": "structure",
                      "members": {
                        "Value": {
                          "type": "boolean",
                          "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the face has beard or not.</simpara>\n      ",
                          "documentation": "\n         <p>Boolean value that indicates whether the face has beard or not.</p>\n      ",
                          "shape_name": "Boolean"
                        },
                        "Confidence": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                          "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                          "shape_name": "Percent",
                          "min_length": 0,
                          "max_length": 100
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Indicates whether or not the face has a beard, and the confidence level in the\n      determination.</simpara>\n      ",
                      "documentation": "\n         <p>Indicates whether or not the face has a beard, and the confidence level in the\n      determination.</p>\n      ",
                      "shape_name": "Beard"
                    },
                    "Mustache": {
                      "type": "structure",
                      "members": {
                        "Value": {
                          "type": "boolean",
                          "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the face has mustache or not.</simpara>\n      ",
                          "documentation": "\n         <p>Boolean value that indicates whether the face has mustache or not.</p>\n      ",
                          "shape_name": "Boolean"
                        },
                        "Confidence": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                          "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                          "shape_name": "Percent",
                          "min_length": 0,
                          "max_length": 100
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Indicates whether or not the face has a mustache, and the confidence level in the\n      determination.</simpara>\n      ",
                      "documentation": "\n         <p>Indicates whether or not the face has a mustache, and the confidence level in the\n      determination.</p>\n      ",
                      "shape_name": "Mustache"
                    },
                    "EyesOpen": {
                      "type": "structure",
                      "members": {
                        "Value": {
                          "type": "boolean",
                          "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the eyes on the face are open.</simpara>\n      ",
                          "documentation": "\n         <p>Boolean value that indicates whether the eyes on the face are open.</p>\n      ",
                          "shape_name": "Boolean"
                        },
                        "Confidence": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                          "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                          "shape_name": "Percent",
                          "min_length": 0,
                          "max_length": 100
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Indicates whether or not the eyes on the face are open, and the confidence level in the\n      determination.</simpara>\n      ",
                      "documentation": "\n         <p>Indicates whether or not the eyes on the face are open, and the confidence level in the\n      determination.</p>\n      ",
                      "shape_name": "EyeOpen"
                    },
                    "MouthOpen": {
                      "type": "structure",
                      "members": {
                        "Value": {
                          "type": "boolean",
                          "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the mouth on the face is open or not.</simpara>\n      ",
                          "documentation": "\n         <p>Boolean value that indicates whether the mouth on the face is open or not.</p>\n      ",
                          "shape_name": "Boolean"
                        },
                        "Confidence": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                          "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                          "shape_name": "Percent",
                          "min_length": 0,
                          "max_length": 100
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Indicates whether or not the mouth on the face is open, and the confidence level in the\n      determination.</simpara>\n      ",
                      "documentation": "\n         <p>Indicates whether or not the mouth on the face is open, and the confidence level in the\n      determination.</p>\n      ",
                      "shape_name": "MouthOpen"
                    },
                    "Emotions": {
                      "type": "list",
                      "zonbookDocumentation": "\n         <simpara>The emotions detected on the face, and the confidence level in the determination. For\n      example, HAPPY, SAD, and ANGRY. </simpara>\n      ",
                      "documentation": "\n         <p>The emotions detected on the face, and the confidence level in the determination. For\n      example, HAPPY, SAD, and ANGRY. </p>\n      ",
                      "shape_name": "Emotions",
                      "members": {
                        "type": "structure",
                        "members": {
                          "Type": {
                            "type": "string",
                            "enum": [
                              "HAPPY",
                              "SAD",
                              "ANGRY",
                              "CONFUSED",
                              "DISGUSTED",
                              "SURPRISED",
                              "CALM",
                              "UNKNOWN"
                            ],
                            "zonbookDocumentation": "\n         <simpara>Type of emotion detected.</simpara>\n      ",
                            "documentation": "\n         <p>Type of emotion detected.</p>\n      ",
                            "shape_name": "EmotionName"
                          },
                          "Confidence": {
                            "type": "float",
                            "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                            "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                            "shape_name": "Percent",
                            "min_length": 0,
                            "max_length": 100
                          }
                        },
                        "zonbookDocumentation": "\n         <simpara>The emotions detected on the face, and the confidence level in the determination. For\n      example, HAPPY, SAD, and ANGRY.</simpara>\n      ",
                        "documentation": "\n         <p>The emotions detected on the face, and the confidence level in the determination. For\n      example, HAPPY, SAD, and ANGRY.</p>\n      ",
                        "shape_name": "Emotion"
                      }
                    },
                    "Landmarks": {
                      "type": "list",
                      "zonbookDocumentation": "\n         <simpara>Indicates the location of landmarks on the face. Default attribute.</simpara>\n      ",
                      "documentation": "\n         <p>Indicates the location of landmarks on the face. Default attribute.</p>\n      ",
                      "shape_name": "Landmarks",
                      "members": {
                        "type": "structure",
                        "members": {
                          "Type": {
                            "type": "string",
                            "enum": [
                              "eyeLeft",
                              "eyeRight",
                              "nose",
                              "mouthLeft",
                              "mouthRight",
                              "leftEyeBrowLeft",
                              "leftEyeBrowRight",
                              "leftEyeBrowUp",
                              "rightEyeBrowLeft",
                              "rightEyeBrowRight",
                              "rightEyeBrowUp",
                              "leftEyeLeft",
                              "leftEyeRight",
                              "leftEyeUp",
                              "leftEyeDown",
                              "rightEyeLeft",
                              "rightEyeRight",
                              "rightEyeUp",
                              "rightEyeDown",
                              "noseLeft",
                              "noseRight",
                              "mouthUp",
                              "mouthDown",
                              "leftPupil",
                              "rightPupil"
                            ],
                            "zonbookDocumentation": "\n         <simpara>Type of the landmark.</simpara>\n      ",
                            "documentation": "\n         <p>Type of the landmark.</p>\n      ",
                            "shape_name": "LandmarkType"
                          },
                          "X": {
                            "type": "float",
                            "zonbookDocumentation": "\n         <simpara>x-coordinate from the top left of the landmark expressed as the ratio of the width of\n      the image. For example, if the images is 700x200 and the x-coordinate of the landmark is at\n      350 pixels, this value is 0.5. </simpara>\n      ",
                            "documentation": "\n         <p>x-coordinate from the top left of the landmark expressed as the ratio of the width of\n      the image. For example, if the images is 700x200 and the x-coordinate of the landmark is at\n      350 pixels, this value is 0.5. </p>\n      ",
                            "shape_name": "Float"
                          },
                          "Y": {
                            "type": "float",
                            "zonbookDocumentation": "\n         <simpara>y-coordinate from the top left of the landmark expressed as the ratio of the height of\n      the image. For example, if the images is 700x200 and the y-coordinate of the landmark is at\n      100 pixels, this value is 0.5.</simpara>\n      ",
                            "documentation": "\n         <p>y-coordinate from the top left of the landmark expressed as the ratio of the height of\n      the image. For example, if the images is 700x200 and the y-coordinate of the landmark is at\n      100 pixels, this value is 0.5.</p>\n      ",
                            "shape_name": "Float"
                          }
                        },
                        "zonbookDocumentation": "\n         <simpara>Indicates the location of the landmark on the face.</simpara>\n      ",
                        "documentation": "\n         <p>Indicates the location of the landmark on the face.</p>\n      ",
                        "shape_name": "Landmark"
                      }
                    },
                    "Pose": {
                      "type": "structure",
                      "members": {
                        "Roll": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Value representing the face rotation on the roll axis.</simpara>\n      ",
                          "documentation": "\n         <p>Value representing the face rotation on the roll axis.</p>\n      ",
                          "shape_name": "Degree",
                          "min_length": -180,
                          "max_length": 180
                        },
                        "Yaw": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Value representing the face rotation on the yaw axis.</simpara>\n      ",
                          "documentation": "\n         <p>Value representing the face rotation on the yaw axis.</p>\n      ",
                          "shape_name": "Degree",
                          "min_length": -180,
                          "max_length": 180
                        },
                        "Pitch": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Value representing the face rotation on the pitch axis.</simpara>\n      ",
                          "documentation": "\n         <p>Value representing the face rotation on the pitch axis.</p>\n      ",
                          "shape_name": "Degree",
                          "min_length": -180,
                          "max_length": 180
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Indicates the pose of the face as determined by its pitch, roll, and yaw. Default attribute.</simpara>\n      ",
                      "documentation": "\n         <p>Indicates the pose of the face as determined by its pitch, roll, and yaw. Default attribute.</p>\n      ",
                      "shape_name": "Pose"
                    },
                    "Quality": {
                      "type": "structure",
                      "members": {
                        "Brightness": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Value representing brightness of the face. The service returns a value between 0 and\n      100 (inclusive). A higher value indicates a brighter face image.</simpara>\n      ",
                          "documentation": "\n         <p>Value representing brightness of the face. The service returns a value between 0 and\n      100 (inclusive). A higher value indicates a brighter face image.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Sharpness": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Value representing sharpness of the face. The service returns a value between 0 and 100\n      (inclusive). A higher value indicates a sharper face image.</simpara>\n      ",
                          "documentation": "\n         <p>Value representing sharpness of the face. The service returns a value between 0 and 100\n      (inclusive). A higher value indicates a sharper face image.</p>\n      ",
                          "shape_name": "Float"
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Identifies image brightness and sharpness. Default attribute.</simpara>\n      ",
                      "documentation": "\n         <p>Identifies image brightness and sharpness. Default attribute.</p>\n      ",
                      "shape_name": "ImageQuality"
                    },
                    "Confidence": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>Confidence level that the bounding box contains a face (and not a different object such\n      as a tree). Default attribute.</simpara>\n      ",
                      "documentation": "\n         <p>Confidence level that the bounding box contains a face (and not a different object such\n      as a tree). Default attribute.</p>\n      ",
                      "shape_name": "Percent",
                      "min_length": 0,
                      "max_length": 100
                    }
                  },
                  "zonbookDocumentation": "\n        <simpara>The face properties for the detected face.</simpara>\n      ",
                  "documentation": "\n        <p>The face properties for the detected face.</p>\n      ",
                  "shape_name": "FaceDetail"
                }
              },
              "zonbookDocumentation": "\n        <simpara>Information about a face detected in a video analysis request and the time the face was detected in the video. </simpara>\n      ",
              "documentation": "\n        <p>Information about a face detected in a video analysis request and the time the face was detected in the video. </p>\n      ",
              "shape_name": "FaceDetection"
            }
          }
        },
        "shape_name": "GetFaceDetectionResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Pagination token in the request is not valid.</simpara>\n      ",
          "documentation": "\n         <p>Pagination token in the request is not valid.</p>\n      ",
          "shape_name": "InvalidPaginationTokenException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The collection specified in the request cannot be found.</simpara>\n      ",
          "documentation": "\n         <p>The collection specified in the request cannot be found.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        }
      ],
      "documentation": "\n         <p>Gets face detection results for a Amazon Rekognition Video analysis started by .</p>\n         <p>Face detection with Amazon Rekognition Video is an asynchronous operation. You start face detection by calling \n     which returns a job identifier (<code>JobId</code>). When the face detection operation finishes, Amazon Rekognition Video publishes a completion status to\n     the Amazon Simple Notification Service topic registered in the initial call to <code>StartFaceDetection</code>. To get the results\n     of the face detection operation, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.\n     If so, call   and pass the job identifier\n     (<code>JobId</code>) from the initial call to <code>StartFaceDetection</code>.</p>\n         <p>\n            <code>GetFaceDetection</code> returns an array of detected faces (<code>Faces</code>) sorted by the time the faces were detected. </p>\n         <p>Use MaxResults parameter to limit the number of labels returned. If there are more results than\n   specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a pagination token for getting the next set\n   of results. To get the next page of results, call <code>GetFaceDetection</code> and populate the <code>NextToken</code> request parameter with the token\n    value returned from the previous call to <code>GetFaceDetection</code>.</p>\n      "
    },
    "GetPersonTracking": {
      "name": "GetPersonTracking",
      "input": {
        "type": "structure",
        "members": {
          "JobId": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9-_]+$",
            "zonbookDocumentation": "\n         <simpara>The identifier for a job that tracks persons in a video. You get the <code>JobId</code> from a call to <code>StartPersonTracking</code>.\n        </simpara>\n      ",
            "documentation": "\n         <p>The identifier for a job that tracks persons in a video. You get the <code>JobId</code> from a call to <code>StartPersonTracking</code>.\n        </p>\n      ",
            "required": true,
            "shape_name": "JobId",
            "min_length": 1,
            "max_length": 64
          },
          "MaxResults": {
            "type": "integer",
            "zonbookDocumentation": "\n         <simpara>Maximum number of results to return per paginated call. The largest value you can specify is 1000. \n      If you specify a value greater than 1000, a maximum of 1000 results is returned.\n      The default value is 1000.</simpara>\n      ",
            "documentation": "\n         <p>Maximum number of results to return per paginated call. The largest value you can specify is 1000. \n      If you specify a value greater than 1000, a maximum of 1000 results is returned.\n      The default value is 1000.</p>\n      ",
            "shape_name": "MaxResults",
            "min_length": 1
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>If the previous response was incomplete (because there are more persons to retrieve), Amazon Rekognition Video returns a pagination\n       token in the response. You can use this pagination token to retrieve the next set of persons. </simpara>\n      ",
            "documentation": "\n         <p>If the previous response was incomplete (because there are more persons to retrieve), Amazon Rekognition Video returns a pagination\n       token in the response. You can use this pagination token to retrieve the next set of persons. </p>\n      ",
            "shape_name": "PaginationToken",
            "max_length": 255
          },
          "SortBy": {
            "type": "string",
            "enum": [
              "INDEX",
              "TIMESTAMP"
            ],
            "zonbookDocumentation": "\n         <simpara>Sort to use for elements in the <code>Persons</code> array. Use <code>TIMESTAMP</code> to sort array elements\n       by the time persons are detected. Use <code>INDEX</code> to sort by the tracked persons.\n       If you sort by <code>INDEX</code>, the array elements for each person are sorted by detection confidence.\n       The default sort is by <code>TIMESTAMP</code>.</simpara>\n      ",
            "documentation": "\n         <p>Sort to use for elements in the <code>Persons</code> array. Use <code>TIMESTAMP</code> to sort array elements\n       by the time persons are detected. Use <code>INDEX</code> to sort by the tracked persons.\n       If you sort by <code>INDEX</code>, the array elements for each person are sorted by detection confidence.\n       The default sort is by <code>TIMESTAMP</code>.</p>\n      ",
            "shape_name": "PersonTrackingSortBy"
          }
        },
        "shape_name": "GetPersonTrackingRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "JobStatus": {
            "type": "string",
            "enum": [
              "IN_PROGRESS",
              "SUCCEEDED",
              "FAILED"
            ],
            "zonbookDocumentation": "\n         <simpara>The current status of the person tracking job.</simpara>\n      ",
            "documentation": "\n         <p>The current status of the person tracking job.</p>\n      ",
            "shape_name": "VideoJobStatus"
          },
          "StatusMessage": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>If the job fails, <code>StatusMessage</code> provides a descriptive error message.</simpara>\n      ",
            "documentation": "\n         <p>If the job fails, <code>StatusMessage</code> provides a descriptive error message.</p>\n      ",
            "shape_name": "StatusMessage"
          },
          "VideoMetadata": {
            "type": "structure",
            "members": {
              "Codec": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>Type of compression used in the analyzed video. </simpara>\n      ",
                "documentation": "\n        <p>Type of compression used in the analyzed video. </p>\n      ",
                "shape_name": "String"
              },
              "DurationMillis": {
                "type": "long",
                "zonbookDocumentation": "\n        <simpara>Length of the video in milliseconds.</simpara>\n      ",
                "documentation": "\n        <p>Length of the video in milliseconds.</p>\n      ",
                "shape_name": "ULong",
                "min_length": 0
              },
              "Format": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>Format of the analyzed video. Possible values are MP4, MOV and AVI. </simpara>\n      ",
                "documentation": "\n        <p>Format of the analyzed video. Possible values are MP4, MOV and AVI. </p>\n      ",
                "shape_name": "String"
              },
              "FrameRate": {
                "type": "float",
                "zonbookDocumentation": "\n        <simpara>Number of frames per second in the video.</simpara>\n      ",
                "documentation": "\n        <p>Number of frames per second in the video.</p>\n      ",
                "shape_name": "Float"
              },
              "FrameHeight": {
                "type": "long",
                "zonbookDocumentation": "\n        <simpara>Vertical pixel dimension of the video.</simpara>\n      ",
                "documentation": "\n        <p>Vertical pixel dimension of the video.</p>\n      ",
                "shape_name": "ULong",
                "min_length": 0
              },
              "FrameWidth": {
                "type": "long",
                "zonbookDocumentation": "\n        <simpara>Horizontal pixel dimension of the video.</simpara>\n      ",
                "documentation": "\n        <p>Horizontal pixel dimension of the video.</p>\n      ",
                "shape_name": "ULong",
                "min_length": 0
              }
            },
            "zonbookDocumentation": "\n         <simpara>Information about a video that Amazon Rekognition Video analyzed. <code>Videometadata</code> is returned in\n       every page of paginated responses from a Amazon Rekognition Video operation.</simpara>\n      ",
            "documentation": "\n         <p>Information about a video that Amazon Rekognition Video analyzed. <code>Videometadata</code> is returned in\n       every page of paginated responses from a Amazon Rekognition Video operation.</p>\n      ",
            "shape_name": "VideoMetadata"
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>If the response is truncated, Amazon Rekognition Video returns this token that you can use in the subsequent request to retrieve the next set of persons. </simpara>\n      ",
            "documentation": "\n         <p>If the response is truncated, Amazon Rekognition Video returns this token that you can use in the subsequent request to retrieve the next set of persons. </p>\n      ",
            "shape_name": "PaginationToken",
            "max_length": 255
          },
          "Persons": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of the persons detected in the video and the times they are tracked throughout the video.\n        An array element will exist for each time the person is tracked. </simpara>\n      ",
            "documentation": "\n         <p>An array of the persons detected in the video and the times they are tracked throughout the video.\n        An array element will exist for each time the person is tracked. </p>\n      ",
            "shape_name": "PersonDetections",
            "members": {
              "type": "structure",
              "members": {
                "Timestamp": {
                  "type": "long",
                  "zonbookDocumentation": "\n        <simpara>The time, in milliseconds from the start of the video, that the person was tracked.</simpara>\n      ",
                  "documentation": "\n        <p>The time, in milliseconds from the start of the video, that the person was tracked.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "Person": {
                  "type": "structure",
                  "members": {
                    "Index": {
                      "type": "long",
                      "zonbookDocumentation": "\n        <simpara>Identifier for the person detected person within a video. Use to keep track of the person throughout the video. The identifier is not stored by Amazon Rekognition.</simpara>\n      ",
                      "documentation": "\n        <p>Identifier for the person detected person within a video. Use to keep track of the person throughout the video. The identifier is not stored by Amazon Rekognition.</p>\n      ",
                      "shape_name": "PersonIndex"
                    },
                    "BoundingBox": {
                      "type": "structure",
                      "members": {
                        "Width": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Width of the bounding box as a ratio of the overall image width.</simpara>\n      ",
                          "documentation": "\n         <p>Width of the bounding box as a ratio of the overall image width.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Height": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Height of the bounding box as a ratio of the overall image height.</simpara>\n      ",
                          "documentation": "\n         <p>Height of the bounding box as a ratio of the overall image height.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Left": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Left coordinate of the bounding box as a ratio of overall image width.</simpara>\n      ",
                          "documentation": "\n         <p>Left coordinate of the bounding box as a ratio of overall image width.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Top": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Top coordinate of the bounding box as a ratio of overall image height.</simpara>\n      ",
                          "documentation": "\n         <p>Top coordinate of the bounding box as a ratio of overall image height.</p>\n      ",
                          "shape_name": "Float"
                        }
                      },
                      "zonbookDocumentation": "\n        <simpara>Bounding box around the detected person.</simpara>\n      ",
                      "documentation": "\n        <p>Bounding box around the detected person.</p>\n      ",
                      "shape_name": "BoundingBox"
                    },
                    "Face": {
                      "type": "structure",
                      "members": {
                        "BoundingBox": {
                          "type": "structure",
                          "members": {
                            "Width": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Width of the bounding box as a ratio of the overall image width.</simpara>\n      ",
                              "documentation": "\n         <p>Width of the bounding box as a ratio of the overall image width.</p>\n      ",
                              "shape_name": "Float"
                            },
                            "Height": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Height of the bounding box as a ratio of the overall image height.</simpara>\n      ",
                              "documentation": "\n         <p>Height of the bounding box as a ratio of the overall image height.</p>\n      ",
                              "shape_name": "Float"
                            },
                            "Left": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Left coordinate of the bounding box as a ratio of overall image width.</simpara>\n      ",
                              "documentation": "\n         <p>Left coordinate of the bounding box as a ratio of overall image width.</p>\n      ",
                              "shape_name": "Float"
                            },
                            "Top": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Top coordinate of the bounding box as a ratio of overall image height.</simpara>\n      ",
                              "documentation": "\n         <p>Top coordinate of the bounding box as a ratio of overall image height.</p>\n      ",
                              "shape_name": "Float"
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>Bounding box of the face. Default attribute.</simpara>\n      ",
                          "documentation": "\n         <p>Bounding box of the face. Default attribute.</p>\n      ",
                          "shape_name": "BoundingBox"
                        },
                        "AgeRange": {
                          "type": "structure",
                          "members": {
                            "Low": {
                              "type": "integer",
                              "zonbookDocumentation": "\n         <simpara>The lowest estimated age.</simpara>\n      ",
                              "documentation": "\n         <p>The lowest estimated age.</p>\n      ",
                              "shape_name": "UInteger",
                              "min_length": 0
                            },
                            "High": {
                              "type": "integer",
                              "zonbookDocumentation": "\n         <simpara>The highest estimated age.</simpara>\n      ",
                              "documentation": "\n         <p>The highest estimated age.</p>\n      ",
                              "shape_name": "UInteger",
                              "min_length": 0
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>The estimated age range, in years, for the face. Low represents the lowest estimated\n      age and High represents the highest estimated age.</simpara>\n      ",
                          "documentation": "\n         <p>The estimated age range, in years, for the face. Low represents the lowest estimated\n      age and High represents the highest estimated age.</p>\n      ",
                          "shape_name": "AgeRange"
                        },
                        "Smile": {
                          "type": "structure",
                          "members": {
                            "Value": {
                              "type": "boolean",
                              "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the face is smiling or not.</simpara>\n      ",
                              "documentation": "\n         <p>Boolean value that indicates whether the face is smiling or not.</p>\n      ",
                              "shape_name": "Boolean"
                            },
                            "Confidence": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                              "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                              "shape_name": "Percent",
                              "min_length": 0,
                              "max_length": 100
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>Indicates whether or not the face is smiling, and the confidence level in the\n      determination.</simpara>\n      ",
                          "documentation": "\n         <p>Indicates whether or not the face is smiling, and the confidence level in the\n      determination.</p>\n      ",
                          "shape_name": "Smile"
                        },
                        "Eyeglasses": {
                          "type": "structure",
                          "members": {
                            "Value": {
                              "type": "boolean",
                              "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the face is wearing eye glasses or not.</simpara>\n      ",
                              "documentation": "\n         <p>Boolean value that indicates whether the face is wearing eye glasses or not.</p>\n      ",
                              "shape_name": "Boolean"
                            },
                            "Confidence": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                              "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                              "shape_name": "Percent",
                              "min_length": 0,
                              "max_length": 100
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>Indicates whether or not the face is wearing eye glasses, and the confidence level in\n      the determination.</simpara>\n      ",
                          "documentation": "\n         <p>Indicates whether or not the face is wearing eye glasses, and the confidence level in\n      the determination.</p>\n      ",
                          "shape_name": "Eyeglasses"
                        },
                        "Sunglasses": {
                          "type": "structure",
                          "members": {
                            "Value": {
                              "type": "boolean",
                              "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the face is wearing sunglasses or not.</simpara>\n      ",
                              "documentation": "\n         <p>Boolean value that indicates whether the face is wearing sunglasses or not.</p>\n      ",
                              "shape_name": "Boolean"
                            },
                            "Confidence": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                              "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                              "shape_name": "Percent",
                              "min_length": 0,
                              "max_length": 100
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>Indicates whether or not the face is wearing sunglasses, and the confidence level in\n      the determination.</simpara>\n      ",
                          "documentation": "\n         <p>Indicates whether or not the face is wearing sunglasses, and the confidence level in\n      the determination.</p>\n      ",
                          "shape_name": "Sunglasses"
                        },
                        "Gender": {
                          "type": "structure",
                          "members": {
                            "Value": {
                              "type": "string",
                              "enum": [
                                "Male",
                                "Female"
                              ],
                              "zonbookDocumentation": "\n         <simpara>Gender of the face.</simpara>\n      ",
                              "documentation": "\n         <p>Gender of the face.</p>\n      ",
                              "shape_name": "GenderType"
                            },
                            "Confidence": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                              "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                              "shape_name": "Percent",
                              "min_length": 0,
                              "max_length": 100
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>Gender of the face and the confidence level in the determination.</simpara>\n      ",
                          "documentation": "\n         <p>Gender of the face and the confidence level in the determination.</p>\n      ",
                          "shape_name": "Gender"
                        },
                        "Beard": {
                          "type": "structure",
                          "members": {
                            "Value": {
                              "type": "boolean",
                              "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the face has beard or not.</simpara>\n      ",
                              "documentation": "\n         <p>Boolean value that indicates whether the face has beard or not.</p>\n      ",
                              "shape_name": "Boolean"
                            },
                            "Confidence": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                              "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                              "shape_name": "Percent",
                              "min_length": 0,
                              "max_length": 100
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>Indicates whether or not the face has a beard, and the confidence level in the\n      determination.</simpara>\n      ",
                          "documentation": "\n         <p>Indicates whether or not the face has a beard, and the confidence level in the\n      determination.</p>\n      ",
                          "shape_name": "Beard"
                        },
                        "Mustache": {
                          "type": "structure",
                          "members": {
                            "Value": {
                              "type": "boolean",
                              "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the face has mustache or not.</simpara>\n      ",
                              "documentation": "\n         <p>Boolean value that indicates whether the face has mustache or not.</p>\n      ",
                              "shape_name": "Boolean"
                            },
                            "Confidence": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                              "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                              "shape_name": "Percent",
                              "min_length": 0,
                              "max_length": 100
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>Indicates whether or not the face has a mustache, and the confidence level in the\n      determination.</simpara>\n      ",
                          "documentation": "\n         <p>Indicates whether or not the face has a mustache, and the confidence level in the\n      determination.</p>\n      ",
                          "shape_name": "Mustache"
                        },
                        "EyesOpen": {
                          "type": "structure",
                          "members": {
                            "Value": {
                              "type": "boolean",
                              "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the eyes on the face are open.</simpara>\n      ",
                              "documentation": "\n         <p>Boolean value that indicates whether the eyes on the face are open.</p>\n      ",
                              "shape_name": "Boolean"
                            },
                            "Confidence": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                              "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                              "shape_name": "Percent",
                              "min_length": 0,
                              "max_length": 100
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>Indicates whether or not the eyes on the face are open, and the confidence level in the\n      determination.</simpara>\n      ",
                          "documentation": "\n         <p>Indicates whether or not the eyes on the face are open, and the confidence level in the\n      determination.</p>\n      ",
                          "shape_name": "EyeOpen"
                        },
                        "MouthOpen": {
                          "type": "structure",
                          "members": {
                            "Value": {
                              "type": "boolean",
                              "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the mouth on the face is open or not.</simpara>\n      ",
                              "documentation": "\n         <p>Boolean value that indicates whether the mouth on the face is open or not.</p>\n      ",
                              "shape_name": "Boolean"
                            },
                            "Confidence": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                              "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                              "shape_name": "Percent",
                              "min_length": 0,
                              "max_length": 100
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>Indicates whether or not the mouth on the face is open, and the confidence level in the\n      determination.</simpara>\n      ",
                          "documentation": "\n         <p>Indicates whether or not the mouth on the face is open, and the confidence level in the\n      determination.</p>\n      ",
                          "shape_name": "MouthOpen"
                        },
                        "Emotions": {
                          "type": "list",
                          "zonbookDocumentation": "\n         <simpara>The emotions detected on the face, and the confidence level in the determination. For\n      example, HAPPY, SAD, and ANGRY. </simpara>\n      ",
                          "documentation": "\n         <p>The emotions detected on the face, and the confidence level in the determination. For\n      example, HAPPY, SAD, and ANGRY. </p>\n      ",
                          "shape_name": "Emotions",
                          "members": {
                            "type": "structure",
                            "members": {
                              "Type": {
                                "type": "string",
                                "enum": [
                                  "HAPPY",
                                  "SAD",
                                  "ANGRY",
                                  "CONFUSED",
                                  "DISGUSTED",
                                  "SURPRISED",
                                  "CALM",
                                  "UNKNOWN"
                                ],
                                "zonbookDocumentation": "\n         <simpara>Type of emotion detected.</simpara>\n      ",
                                "documentation": "\n         <p>Type of emotion detected.</p>\n      ",
                                "shape_name": "EmotionName"
                              },
                              "Confidence": {
                                "type": "float",
                                "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                                "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                                "shape_name": "Percent",
                                "min_length": 0,
                                "max_length": 100
                              }
                            },
                            "zonbookDocumentation": "\n         <simpara>The emotions detected on the face, and the confidence level in the determination. For\n      example, HAPPY, SAD, and ANGRY.</simpara>\n      ",
                            "documentation": "\n         <p>The emotions detected on the face, and the confidence level in the determination. For\n      example, HAPPY, SAD, and ANGRY.</p>\n      ",
                            "shape_name": "Emotion"
                          }
                        },
                        "Landmarks": {
                          "type": "list",
                          "zonbookDocumentation": "\n         <simpara>Indicates the location of landmarks on the face. Default attribute.</simpara>\n      ",
                          "documentation": "\n         <p>Indicates the location of landmarks on the face. Default attribute.</p>\n      ",
                          "shape_name": "Landmarks",
                          "members": {
                            "type": "structure",
                            "members": {
                              "Type": {
                                "type": "string",
                                "enum": [
                                  "eyeLeft",
                                  "eyeRight",
                                  "nose",
                                  "mouthLeft",
                                  "mouthRight",
                                  "leftEyeBrowLeft",
                                  "leftEyeBrowRight",
                                  "leftEyeBrowUp",
                                  "rightEyeBrowLeft",
                                  "rightEyeBrowRight",
                                  "rightEyeBrowUp",
                                  "leftEyeLeft",
                                  "leftEyeRight",
                                  "leftEyeUp",
                                  "leftEyeDown",
                                  "rightEyeLeft",
                                  "rightEyeRight",
                                  "rightEyeUp",
                                  "rightEyeDown",
                                  "noseLeft",
                                  "noseRight",
                                  "mouthUp",
                                  "mouthDown",
                                  "leftPupil",
                                  "rightPupil"
                                ],
                                "zonbookDocumentation": "\n         <simpara>Type of the landmark.</simpara>\n      ",
                                "documentation": "\n         <p>Type of the landmark.</p>\n      ",
                                "shape_name": "LandmarkType"
                              },
                              "X": {
                                "type": "float",
                                "zonbookDocumentation": "\n         <simpara>x-coordinate from the top left of the landmark expressed as the ratio of the width of\n      the image. For example, if the images is 700x200 and the x-coordinate of the landmark is at\n      350 pixels, this value is 0.5. </simpara>\n      ",
                                "documentation": "\n         <p>x-coordinate from the top left of the landmark expressed as the ratio of the width of\n      the image. For example, if the images is 700x200 and the x-coordinate of the landmark is at\n      350 pixels, this value is 0.5. </p>\n      ",
                                "shape_name": "Float"
                              },
                              "Y": {
                                "type": "float",
                                "zonbookDocumentation": "\n         <simpara>y-coordinate from the top left of the landmark expressed as the ratio of the height of\n      the image. For example, if the images is 700x200 and the y-coordinate of the landmark is at\n      100 pixels, this value is 0.5.</simpara>\n      ",
                                "documentation": "\n         <p>y-coordinate from the top left of the landmark expressed as the ratio of the height of\n      the image. For example, if the images is 700x200 and the y-coordinate of the landmark is at\n      100 pixels, this value is 0.5.</p>\n      ",
                                "shape_name": "Float"
                              }
                            },
                            "zonbookDocumentation": "\n         <simpara>Indicates the location of the landmark on the face.</simpara>\n      ",
                            "documentation": "\n         <p>Indicates the location of the landmark on the face.</p>\n      ",
                            "shape_name": "Landmark"
                          }
                        },
                        "Pose": {
                          "type": "structure",
                          "members": {
                            "Roll": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Value representing the face rotation on the roll axis.</simpara>\n      ",
                              "documentation": "\n         <p>Value representing the face rotation on the roll axis.</p>\n      ",
                              "shape_name": "Degree",
                              "min_length": -180,
                              "max_length": 180
                            },
                            "Yaw": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Value representing the face rotation on the yaw axis.</simpara>\n      ",
                              "documentation": "\n         <p>Value representing the face rotation on the yaw axis.</p>\n      ",
                              "shape_name": "Degree",
                              "min_length": -180,
                              "max_length": 180
                            },
                            "Pitch": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Value representing the face rotation on the pitch axis.</simpara>\n      ",
                              "documentation": "\n         <p>Value representing the face rotation on the pitch axis.</p>\n      ",
                              "shape_name": "Degree",
                              "min_length": -180,
                              "max_length": 180
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>Indicates the pose of the face as determined by its pitch, roll, and yaw. Default attribute.</simpara>\n      ",
                          "documentation": "\n         <p>Indicates the pose of the face as determined by its pitch, roll, and yaw. Default attribute.</p>\n      ",
                          "shape_name": "Pose"
                        },
                        "Quality": {
                          "type": "structure",
                          "members": {
                            "Brightness": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Value representing brightness of the face. The service returns a value between 0 and\n      100 (inclusive). A higher value indicates a brighter face image.</simpara>\n      ",
                              "documentation": "\n         <p>Value representing brightness of the face. The service returns a value between 0 and\n      100 (inclusive). A higher value indicates a brighter face image.</p>\n      ",
                              "shape_name": "Float"
                            },
                            "Sharpness": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Value representing sharpness of the face. The service returns a value between 0 and 100\n      (inclusive). A higher value indicates a sharper face image.</simpara>\n      ",
                              "documentation": "\n         <p>Value representing sharpness of the face. The service returns a value between 0 and 100\n      (inclusive). A higher value indicates a sharper face image.</p>\n      ",
                              "shape_name": "Float"
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>Identifies image brightness and sharpness. Default attribute.</simpara>\n      ",
                          "documentation": "\n         <p>Identifies image brightness and sharpness. Default attribute.</p>\n      ",
                          "shape_name": "ImageQuality"
                        },
                        "Confidence": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Confidence level that the bounding box contains a face (and not a different object such\n      as a tree). Default attribute.</simpara>\n      ",
                          "documentation": "\n         <p>Confidence level that the bounding box contains a face (and not a different object such\n      as a tree). Default attribute.</p>\n      ",
                          "shape_name": "Percent",
                          "min_length": 0,
                          "max_length": 100
                        }
                      },
                      "zonbookDocumentation": "\n        <simpara>Face details for the detected person.</simpara>\n      ",
                      "documentation": "\n        <p>Face details for the detected person.</p>\n      ",
                      "shape_name": "FaceDetail"
                    }
                  },
                  "zonbookDocumentation": "\n        <simpara>Details about a person tracked in a video.</simpara>\n      ",
                  "documentation": "\n        <p>Details about a person tracked in a video.</p>\n      ",
                  "shape_name": "PersonDetail"
                }
              },
              "zonbookDocumentation": "\n        <simpara>Details and tracking information for a single time a person is tracked in a video.\n            Amazon Rekognition operations that track persons return an array of <code>PersonDetection</code> objects\n            with elements for each time a person is tracked in a video. </simpara>\n         <simpara>For more information, see <xref linkend=\"API_GetPersonTracking\"/>. </simpara>\n      \n      ",
              "documentation": "\n        <p>Details and tracking information for a single time a person is tracked in a video.\n            Amazon Rekognition operations that track persons return an array of <code>PersonDetection</code> objects\n            with elements for each time a person is tracked in a video. </p>\n      \n         <p>For more information, see API_GetPersonTracking in the Amazon Rekognition Developer Guide. </p>\n      ",
              "shape_name": "PersonDetection"
            }
          }
        },
        "shape_name": "GetPersonTrackingResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Pagination token in the request is not valid.</simpara>\n      ",
          "documentation": "\n         <p>Pagination token in the request is not valid.</p>\n      ",
          "shape_name": "InvalidPaginationTokenException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The collection specified in the request cannot be found.</simpara>\n      ",
          "documentation": "\n         <p>The collection specified in the request cannot be found.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        }
      ],
      "documentation": "\n         <p>Gets the  person tracking results of a Amazon Rekognition Video analysis started by .</p>\n\n         <p>The person detection operation is started by a call to <code>StartPersonTracking</code>\n     which returns a job identifier (<code>JobId</code>). When the person detection operation finishes, Amazon Rekognition Video publishes a completion status to\n     the Amazon Simple Notification Service topic registered in the initial call to <code>StartPersonTracking</code>.</p>\n         <p>To get the results of the person tracking operation, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.\n     If so, call   and pass the job identifier\n     (<code>JobId</code>) from the initial call to <code>StartPersonTracking</code>.</p>\n         <p>\n            <code>GetPersonTracking</code> returns an array, <code>Persons</code>, of tracked persons and the time(s) they were tracked in the video. </p>\n         <note>\n            <p>\n               <code>GetPersonTracking</code> only returns the default  \n       facial attributes (<code>BoundingBox</code>, <code>Confidence</code>, \n       <code>Landmarks</code>, <code>Pose</code>, and <code>Quality</code>). The other facial attributes listed\n       in the <code>Face</code> object of the following response syntax are not returned. </p>\n       \n            <p>For more information, see FaceDetail in the Amazon Rekognition Developer Guide.</p>\n         </note>\n\n    \n         <p>By default, the array is sorted by the time(s) a person is tracked in the video.\n      You can sort by tracked persons by specifying <code>INDEX</code> for the <code>SortBy</code> input parameter.</p>\n\n         <p>Use the <code>MaxResults</code> parameter to limit the number of items returned. If there are more results than\n   specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a pagination token for getting the next set\n   of results. To get the next page of results, call <code>GetPersonTracking</code> and populate the <code>NextToken</code> request parameter with the token\n    value returned from the previous call to <code>GetPersonTracking</code>.</p>\n \n      "
    },
    "GetCelebrityRecognition": {
      "name": "GetCelebrityRecognition",
      "input": {
        "type": "structure",
        "members": {
          "JobId": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9-_]+$",
            "zonbookDocumentation": "\n         <simpara>Job identifier for the required celebrity recognition analysis. You can get the job identifer from\n      a call to <code>StartCelebrityRecognition</code>.</simpara>\n      ",
            "documentation": "\n         <p>Job identifier for the required celebrity recognition analysis. You can get the job identifer from\n      a call to <code>StartCelebrityRecognition</code>.</p>\n      ",
            "required": true,
            "shape_name": "JobId",
            "min_length": 1,
            "max_length": 64
          },
          "MaxResults": {
            "type": "integer",
            "zonbookDocumentation": "\n         <simpara>Maximum number of results to return per paginated call. The largest value you can specify is 1000. \n      If you specify a value greater than 1000, a maximum of 1000 results is returned.\n      The default value is 1000.</simpara>\n      ",
            "documentation": "\n         <p>Maximum number of results to return per paginated call. The largest value you can specify is 1000. \n      If you specify a value greater than 1000, a maximum of 1000 results is returned.\n      The default value is 1000.</p>\n      ",
            "shape_name": "MaxResults",
            "min_length": 1
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>If the previous response was incomplete (because there is more recognized celebrities to retrieve), Amazon Rekognition Video returns a pagination\n      token in the response. You can use this pagination token to retrieve the next set of celebrities. </simpara>\n      ",
            "documentation": "\n         <p>If the previous response was incomplete (because there is more recognized celebrities to retrieve), Amazon Rekognition Video returns a pagination\n      token in the response. You can use this pagination token to retrieve the next set of celebrities. </p>\n      ",
            "shape_name": "PaginationToken",
            "max_length": 255
          },
          "SortBy": {
            "type": "string",
            "enum": [
              "ID",
              "TIMESTAMP"
            ],
            "zonbookDocumentation": "\n         <simpara>Sort to use for celebrities returned in <code>Celebrities</code> field. Specify <code>ID</code> to sort by the celebrity identifier,\n        specify <code>TIMESTAMP</code> to sort by the time the celebrity was recognized.</simpara>\n      ",
            "documentation": "\n         <p>Sort to use for celebrities returned in <code>Celebrities</code> field. Specify <code>ID</code> to sort by the celebrity identifier,\n        specify <code>TIMESTAMP</code> to sort by the time the celebrity was recognized.</p>\n      ",
            "shape_name": "CelebrityRecognitionSortBy"
          }
        },
        "shape_name": "GetCelebrityRecognitionRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "JobStatus": {
            "type": "string",
            "enum": [
              "IN_PROGRESS",
              "SUCCEEDED",
              "FAILED"
            ],
            "zonbookDocumentation": "\n         <simpara>The current status of the celebrity recognition job.</simpara>\n      ",
            "documentation": "\n         <p>The current status of the celebrity recognition job.</p>\n      ",
            "shape_name": "VideoJobStatus"
          },
          "StatusMessage": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>If the job fails, <code>StatusMessage</code> provides a descriptive error message.</simpara>\n      ",
            "documentation": "\n         <p>If the job fails, <code>StatusMessage</code> provides a descriptive error message.</p>\n      ",
            "shape_name": "StatusMessage"
          },
          "VideoMetadata": {
            "type": "structure",
            "members": {
              "Codec": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>Type of compression used in the analyzed video. </simpara>\n      ",
                "documentation": "\n        <p>Type of compression used in the analyzed video. </p>\n      ",
                "shape_name": "String"
              },
              "DurationMillis": {
                "type": "long",
                "zonbookDocumentation": "\n        <simpara>Length of the video in milliseconds.</simpara>\n      ",
                "documentation": "\n        <p>Length of the video in milliseconds.</p>\n      ",
                "shape_name": "ULong",
                "min_length": 0
              },
              "Format": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>Format of the analyzed video. Possible values are MP4, MOV and AVI. </simpara>\n      ",
                "documentation": "\n        <p>Format of the analyzed video. Possible values are MP4, MOV and AVI. </p>\n      ",
                "shape_name": "String"
              },
              "FrameRate": {
                "type": "float",
                "zonbookDocumentation": "\n        <simpara>Number of frames per second in the video.</simpara>\n      ",
                "documentation": "\n        <p>Number of frames per second in the video.</p>\n      ",
                "shape_name": "Float"
              },
              "FrameHeight": {
                "type": "long",
                "zonbookDocumentation": "\n        <simpara>Vertical pixel dimension of the video.</simpara>\n      ",
                "documentation": "\n        <p>Vertical pixel dimension of the video.</p>\n      ",
                "shape_name": "ULong",
                "min_length": 0
              },
              "FrameWidth": {
                "type": "long",
                "zonbookDocumentation": "\n        <simpara>Horizontal pixel dimension of the video.</simpara>\n      ",
                "documentation": "\n        <p>Horizontal pixel dimension of the video.</p>\n      ",
                "shape_name": "ULong",
                "min_length": 0
              }
            },
            "zonbookDocumentation": "\n         <simpara>Information about a video that Amazon Rekognition Video analyzed. <code>Videometadata</code> is returned in\n      every page of paginated responses from a Amazon Rekognition Video operation.</simpara>\n      ",
            "documentation": "\n         <p>Information about a video that Amazon Rekognition Video analyzed. <code>Videometadata</code> is returned in\n      every page of paginated responses from a Amazon Rekognition Video operation.</p>\n      ",
            "shape_name": "VideoMetadata"
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>If the response is truncated, Amazon Rekognition Video returns this token that you can use in the subsequent request\n      to retrieve the next set of celebrities.</simpara>\n      ",
            "documentation": "\n         <p>If the response is truncated, Amazon Rekognition Video returns this token that you can use in the subsequent request\n      to retrieve the next set of celebrities.</p>\n      ",
            "shape_name": "PaginationToken",
            "max_length": 255
          },
          "Celebrities": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>Array of celebrities recognized in the video.</simpara>\n      ",
            "documentation": "\n         <p>Array of celebrities recognized in the video.</p>\n      ",
            "shape_name": "CelebrityRecognitions",
            "members": {
              "type": "structure",
              "members": {
                "Timestamp": {
                  "type": "long",
                  "zonbookDocumentation": "\n        <simpara>The time, in milliseconds from the start of the video, that the celebrity was recognized.</simpara>\n      ",
                  "documentation": "\n        <p>The time, in milliseconds from the start of the video, that the celebrity was recognized.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "Celebrity": {
                  "type": "structure",
                  "members": {
                    "Urls": {
                      "type": "list",
                      "zonbookDocumentation": "\n        <simpara>An array of URLs pointing to additional celebrity information. </simpara>\n      ",
                      "documentation": "\n        <p>An array of URLs pointing to additional celebrity information. </p>\n      ",
                      "shape_name": "Urls",
                      "members": {
                        "type": "string",
                        "shape_name": "Url",
                        "documentation": null
                      }
                    },
                    "Name": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The name of the celebrity.</simpara>\n      ",
                      "documentation": "\n        <p>The name of the celebrity.</p>\n      ",
                      "shape_name": "String"
                    },
                    "Id": {
                      "type": "string",
                      "pattern": "[0-9A-Za-z]*",
                      "zonbookDocumentation": "\n        <simpara>The unique identifier for the celebrity. </simpara>\n      ",
                      "documentation": "\n        <p>The unique identifier for the celebrity. </p>\n      ",
                      "shape_name": "RekognitionUniqueId"
                    },
                    "Confidence": {
                      "type": "float",
                      "zonbookDocumentation": "\n        <simpara>The confidence, in percentage, that Amazon Rekognition has that the recognized face is the celebrity. </simpara>\n      ",
                      "documentation": "\n        <p>The confidence, in percentage, that Amazon Rekognition has that the recognized face is the celebrity. </p>\n      ",
                      "shape_name": "Percent",
                      "min_length": 0,
                      "max_length": 100
                    },
                    "BoundingBox": {
                      "type": "structure",
                      "members": {
                        "Width": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Width of the bounding box as a ratio of the overall image width.</simpara>\n      ",
                          "documentation": "\n         <p>Width of the bounding box as a ratio of the overall image width.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Height": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Height of the bounding box as a ratio of the overall image height.</simpara>\n      ",
                          "documentation": "\n         <p>Height of the bounding box as a ratio of the overall image height.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Left": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Left coordinate of the bounding box as a ratio of overall image width.</simpara>\n      ",
                          "documentation": "\n         <p>Left coordinate of the bounding box as a ratio of overall image width.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Top": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Top coordinate of the bounding box as a ratio of overall image height.</simpara>\n      ",
                          "documentation": "\n         <p>Top coordinate of the bounding box as a ratio of overall image height.</p>\n      ",
                          "shape_name": "Float"
                        }
                      },
                      "zonbookDocumentation": "\n        <para>Bounding box around the body of a celebrity.</para>\n      ",
                      "documentation": "\n        <p>Bounding box around the body of a celebrity.</p>\n      ",
                      "shape_name": "BoundingBox"
                    },
                    "Face": {
                      "type": "structure",
                      "members": {
                        "BoundingBox": {
                          "type": "structure",
                          "members": {
                            "Width": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Width of the bounding box as a ratio of the overall image width.</simpara>\n      ",
                              "documentation": "\n         <p>Width of the bounding box as a ratio of the overall image width.</p>\n      ",
                              "shape_name": "Float"
                            },
                            "Height": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Height of the bounding box as a ratio of the overall image height.</simpara>\n      ",
                              "documentation": "\n         <p>Height of the bounding box as a ratio of the overall image height.</p>\n      ",
                              "shape_name": "Float"
                            },
                            "Left": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Left coordinate of the bounding box as a ratio of overall image width.</simpara>\n      ",
                              "documentation": "\n         <p>Left coordinate of the bounding box as a ratio of overall image width.</p>\n      ",
                              "shape_name": "Float"
                            },
                            "Top": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Top coordinate of the bounding box as a ratio of overall image height.</simpara>\n      ",
                              "documentation": "\n         <p>Top coordinate of the bounding box as a ratio of overall image height.</p>\n      ",
                              "shape_name": "Float"
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>Bounding box of the face. Default attribute.</simpara>\n      ",
                          "documentation": "\n         <p>Bounding box of the face. Default attribute.</p>\n      ",
                          "shape_name": "BoundingBox"
                        },
                        "AgeRange": {
                          "type": "structure",
                          "members": {
                            "Low": {
                              "type": "integer",
                              "zonbookDocumentation": "\n         <simpara>The lowest estimated age.</simpara>\n      ",
                              "documentation": "\n         <p>The lowest estimated age.</p>\n      ",
                              "shape_name": "UInteger",
                              "min_length": 0
                            },
                            "High": {
                              "type": "integer",
                              "zonbookDocumentation": "\n         <simpara>The highest estimated age.</simpara>\n      ",
                              "documentation": "\n         <p>The highest estimated age.</p>\n      ",
                              "shape_name": "UInteger",
                              "min_length": 0
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>The estimated age range, in years, for the face. Low represents the lowest estimated\n      age and High represents the highest estimated age.</simpara>\n      ",
                          "documentation": "\n         <p>The estimated age range, in years, for the face. Low represents the lowest estimated\n      age and High represents the highest estimated age.</p>\n      ",
                          "shape_name": "AgeRange"
                        },
                        "Smile": {
                          "type": "structure",
                          "members": {
                            "Value": {
                              "type": "boolean",
                              "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the face is smiling or not.</simpara>\n      ",
                              "documentation": "\n         <p>Boolean value that indicates whether the face is smiling or not.</p>\n      ",
                              "shape_name": "Boolean"
                            },
                            "Confidence": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                              "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                              "shape_name": "Percent",
                              "min_length": 0,
                              "max_length": 100
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>Indicates whether or not the face is smiling, and the confidence level in the\n      determination.</simpara>\n      ",
                          "documentation": "\n         <p>Indicates whether or not the face is smiling, and the confidence level in the\n      determination.</p>\n      ",
                          "shape_name": "Smile"
                        },
                        "Eyeglasses": {
                          "type": "structure",
                          "members": {
                            "Value": {
                              "type": "boolean",
                              "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the face is wearing eye glasses or not.</simpara>\n      ",
                              "documentation": "\n         <p>Boolean value that indicates whether the face is wearing eye glasses or not.</p>\n      ",
                              "shape_name": "Boolean"
                            },
                            "Confidence": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                              "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                              "shape_name": "Percent",
                              "min_length": 0,
                              "max_length": 100
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>Indicates whether or not the face is wearing eye glasses, and the confidence level in\n      the determination.</simpara>\n      ",
                          "documentation": "\n         <p>Indicates whether or not the face is wearing eye glasses, and the confidence level in\n      the determination.</p>\n      ",
                          "shape_name": "Eyeglasses"
                        },
                        "Sunglasses": {
                          "type": "structure",
                          "members": {
                            "Value": {
                              "type": "boolean",
                              "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the face is wearing sunglasses or not.</simpara>\n      ",
                              "documentation": "\n         <p>Boolean value that indicates whether the face is wearing sunglasses or not.</p>\n      ",
                              "shape_name": "Boolean"
                            },
                            "Confidence": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                              "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                              "shape_name": "Percent",
                              "min_length": 0,
                              "max_length": 100
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>Indicates whether or not the face is wearing sunglasses, and the confidence level in\n      the determination.</simpara>\n      ",
                          "documentation": "\n         <p>Indicates whether or not the face is wearing sunglasses, and the confidence level in\n      the determination.</p>\n      ",
                          "shape_name": "Sunglasses"
                        },
                        "Gender": {
                          "type": "structure",
                          "members": {
                            "Value": {
                              "type": "string",
                              "enum": [
                                "Male",
                                "Female"
                              ],
                              "zonbookDocumentation": "\n         <simpara>Gender of the face.</simpara>\n      ",
                              "documentation": "\n         <p>Gender of the face.</p>\n      ",
                              "shape_name": "GenderType"
                            },
                            "Confidence": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                              "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                              "shape_name": "Percent",
                              "min_length": 0,
                              "max_length": 100
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>Gender of the face and the confidence level in the determination.</simpara>\n      ",
                          "documentation": "\n         <p>Gender of the face and the confidence level in the determination.</p>\n      ",
                          "shape_name": "Gender"
                        },
                        "Beard": {
                          "type": "structure",
                          "members": {
                            "Value": {
                              "type": "boolean",
                              "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the face has beard or not.</simpara>\n      ",
                              "documentation": "\n         <p>Boolean value that indicates whether the face has beard or not.</p>\n      ",
                              "shape_name": "Boolean"
                            },
                            "Confidence": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                              "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                              "shape_name": "Percent",
                              "min_length": 0,
                              "max_length": 100
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>Indicates whether or not the face has a beard, and the confidence level in the\n      determination.</simpara>\n      ",
                          "documentation": "\n         <p>Indicates whether or not the face has a beard, and the confidence level in the\n      determination.</p>\n      ",
                          "shape_name": "Beard"
                        },
                        "Mustache": {
                          "type": "structure",
                          "members": {
                            "Value": {
                              "type": "boolean",
                              "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the face has mustache or not.</simpara>\n      ",
                              "documentation": "\n         <p>Boolean value that indicates whether the face has mustache or not.</p>\n      ",
                              "shape_name": "Boolean"
                            },
                            "Confidence": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                              "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                              "shape_name": "Percent",
                              "min_length": 0,
                              "max_length": 100
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>Indicates whether or not the face has a mustache, and the confidence level in the\n      determination.</simpara>\n      ",
                          "documentation": "\n         <p>Indicates whether or not the face has a mustache, and the confidence level in the\n      determination.</p>\n      ",
                          "shape_name": "Mustache"
                        },
                        "EyesOpen": {
                          "type": "structure",
                          "members": {
                            "Value": {
                              "type": "boolean",
                              "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the eyes on the face are open.</simpara>\n      ",
                              "documentation": "\n         <p>Boolean value that indicates whether the eyes on the face are open.</p>\n      ",
                              "shape_name": "Boolean"
                            },
                            "Confidence": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                              "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                              "shape_name": "Percent",
                              "min_length": 0,
                              "max_length": 100
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>Indicates whether or not the eyes on the face are open, and the confidence level in the\n      determination.</simpara>\n      ",
                          "documentation": "\n         <p>Indicates whether or not the eyes on the face are open, and the confidence level in the\n      determination.</p>\n      ",
                          "shape_name": "EyeOpen"
                        },
                        "MouthOpen": {
                          "type": "structure",
                          "members": {
                            "Value": {
                              "type": "boolean",
                              "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the mouth on the face is open or not.</simpara>\n      ",
                              "documentation": "\n         <p>Boolean value that indicates whether the mouth on the face is open or not.</p>\n      ",
                              "shape_name": "Boolean"
                            },
                            "Confidence": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                              "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                              "shape_name": "Percent",
                              "min_length": 0,
                              "max_length": 100
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>Indicates whether or not the mouth on the face is open, and the confidence level in the\n      determination.</simpara>\n      ",
                          "documentation": "\n         <p>Indicates whether or not the mouth on the face is open, and the confidence level in the\n      determination.</p>\n      ",
                          "shape_name": "MouthOpen"
                        },
                        "Emotions": {
                          "type": "list",
                          "zonbookDocumentation": "\n         <simpara>The emotions detected on the face, and the confidence level in the determination. For\n      example, HAPPY, SAD, and ANGRY. </simpara>\n      ",
                          "documentation": "\n         <p>The emotions detected on the face, and the confidence level in the determination. For\n      example, HAPPY, SAD, and ANGRY. </p>\n      ",
                          "shape_name": "Emotions",
                          "members": {
                            "type": "structure",
                            "members": {
                              "Type": {
                                "type": "string",
                                "enum": [
                                  "HAPPY",
                                  "SAD",
                                  "ANGRY",
                                  "CONFUSED",
                                  "DISGUSTED",
                                  "SURPRISED",
                                  "CALM",
                                  "UNKNOWN"
                                ],
                                "zonbookDocumentation": "\n         <simpara>Type of emotion detected.</simpara>\n      ",
                                "documentation": "\n         <p>Type of emotion detected.</p>\n      ",
                                "shape_name": "EmotionName"
                              },
                              "Confidence": {
                                "type": "float",
                                "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                                "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                                "shape_name": "Percent",
                                "min_length": 0,
                                "max_length": 100
                              }
                            },
                            "zonbookDocumentation": "\n         <simpara>The emotions detected on the face, and the confidence level in the determination. For\n      example, HAPPY, SAD, and ANGRY.</simpara>\n      ",
                            "documentation": "\n         <p>The emotions detected on the face, and the confidence level in the determination. For\n      example, HAPPY, SAD, and ANGRY.</p>\n      ",
                            "shape_name": "Emotion"
                          }
                        },
                        "Landmarks": {
                          "type": "list",
                          "zonbookDocumentation": "\n         <simpara>Indicates the location of landmarks on the face. Default attribute.</simpara>\n      ",
                          "documentation": "\n         <p>Indicates the location of landmarks on the face. Default attribute.</p>\n      ",
                          "shape_name": "Landmarks",
                          "members": {
                            "type": "structure",
                            "members": {
                              "Type": {
                                "type": "string",
                                "enum": [
                                  "eyeLeft",
                                  "eyeRight",
                                  "nose",
                                  "mouthLeft",
                                  "mouthRight",
                                  "leftEyeBrowLeft",
                                  "leftEyeBrowRight",
                                  "leftEyeBrowUp",
                                  "rightEyeBrowLeft",
                                  "rightEyeBrowRight",
                                  "rightEyeBrowUp",
                                  "leftEyeLeft",
                                  "leftEyeRight",
                                  "leftEyeUp",
                                  "leftEyeDown",
                                  "rightEyeLeft",
                                  "rightEyeRight",
                                  "rightEyeUp",
                                  "rightEyeDown",
                                  "noseLeft",
                                  "noseRight",
                                  "mouthUp",
                                  "mouthDown",
                                  "leftPupil",
                                  "rightPupil"
                                ],
                                "zonbookDocumentation": "\n         <simpara>Type of the landmark.</simpara>\n      ",
                                "documentation": "\n         <p>Type of the landmark.</p>\n      ",
                                "shape_name": "LandmarkType"
                              },
                              "X": {
                                "type": "float",
                                "zonbookDocumentation": "\n         <simpara>x-coordinate from the top left of the landmark expressed as the ratio of the width of\n      the image. For example, if the images is 700x200 and the x-coordinate of the landmark is at\n      350 pixels, this value is 0.5. </simpara>\n      ",
                                "documentation": "\n         <p>x-coordinate from the top left of the landmark expressed as the ratio of the width of\n      the image. For example, if the images is 700x200 and the x-coordinate of the landmark is at\n      350 pixels, this value is 0.5. </p>\n      ",
                                "shape_name": "Float"
                              },
                              "Y": {
                                "type": "float",
                                "zonbookDocumentation": "\n         <simpara>y-coordinate from the top left of the landmark expressed as the ratio of the height of\n      the image. For example, if the images is 700x200 and the y-coordinate of the landmark is at\n      100 pixels, this value is 0.5.</simpara>\n      ",
                                "documentation": "\n         <p>y-coordinate from the top left of the landmark expressed as the ratio of the height of\n      the image. For example, if the images is 700x200 and the y-coordinate of the landmark is at\n      100 pixels, this value is 0.5.</p>\n      ",
                                "shape_name": "Float"
                              }
                            },
                            "zonbookDocumentation": "\n         <simpara>Indicates the location of the landmark on the face.</simpara>\n      ",
                            "documentation": "\n         <p>Indicates the location of the landmark on the face.</p>\n      ",
                            "shape_name": "Landmark"
                          }
                        },
                        "Pose": {
                          "type": "structure",
                          "members": {
                            "Roll": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Value representing the face rotation on the roll axis.</simpara>\n      ",
                              "documentation": "\n         <p>Value representing the face rotation on the roll axis.</p>\n      ",
                              "shape_name": "Degree",
                              "min_length": -180,
                              "max_length": 180
                            },
                            "Yaw": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Value representing the face rotation on the yaw axis.</simpara>\n      ",
                              "documentation": "\n         <p>Value representing the face rotation on the yaw axis.</p>\n      ",
                              "shape_name": "Degree",
                              "min_length": -180,
                              "max_length": 180
                            },
                            "Pitch": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Value representing the face rotation on the pitch axis.</simpara>\n      ",
                              "documentation": "\n         <p>Value representing the face rotation on the pitch axis.</p>\n      ",
                              "shape_name": "Degree",
                              "min_length": -180,
                              "max_length": 180
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>Indicates the pose of the face as determined by its pitch, roll, and yaw. Default attribute.</simpara>\n      ",
                          "documentation": "\n         <p>Indicates the pose of the face as determined by its pitch, roll, and yaw. Default attribute.</p>\n      ",
                          "shape_name": "Pose"
                        },
                        "Quality": {
                          "type": "structure",
                          "members": {
                            "Brightness": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Value representing brightness of the face. The service returns a value between 0 and\n      100 (inclusive). A higher value indicates a brighter face image.</simpara>\n      ",
                              "documentation": "\n         <p>Value representing brightness of the face. The service returns a value between 0 and\n      100 (inclusive). A higher value indicates a brighter face image.</p>\n      ",
                              "shape_name": "Float"
                            },
                            "Sharpness": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Value representing sharpness of the face. The service returns a value between 0 and 100\n      (inclusive). A higher value indicates a sharper face image.</simpara>\n      ",
                              "documentation": "\n         <p>Value representing sharpness of the face. The service returns a value between 0 and 100\n      (inclusive). A higher value indicates a sharper face image.</p>\n      ",
                              "shape_name": "Float"
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>Identifies image brightness and sharpness. Default attribute.</simpara>\n      ",
                          "documentation": "\n         <p>Identifies image brightness and sharpness. Default attribute.</p>\n      ",
                          "shape_name": "ImageQuality"
                        },
                        "Confidence": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Confidence level that the bounding box contains a face (and not a different object such\n      as a tree). Default attribute.</simpara>\n      ",
                          "documentation": "\n         <p>Confidence level that the bounding box contains a face (and not a different object such\n      as a tree). Default attribute.</p>\n      ",
                          "shape_name": "Percent",
                          "min_length": 0,
                          "max_length": 100
                        }
                      },
                      "zonbookDocumentation": "\n        <simpara>Face details for the recognized celebrity.</simpara>\n      ",
                      "documentation": "\n        <p>Face details for the recognized celebrity.</p>\n      ",
                      "shape_name": "FaceDetail"
                    }
                  },
                  "zonbookDocumentation": "\n        <simpara>Information about a recognized celebrity.</simpara>\n      ",
                  "documentation": "\n        <p>Information about a recognized celebrity.</p>\n      ",
                  "shape_name": "CelebrityDetail"
                }
              },
              "zonbookDocumentation": "\n        <simpara>Information about a detected celebrity and the time the celebrity was detected in a stored video.\n        For more information, see <xref linkend=\"API_GetCelebrityRecognition\"/>.</simpara>\n      \n      ",
              "documentation": "\n        \n         <p>Information about a detected celebrity and the time the celebrity was detected in a stored video.\n        For more information, see GetCelebrityRecognition in the Amazon Rekognition Developer Guide.</p>\n      ",
              "shape_name": "CelebrityRecognition"
            }
          }
        },
        "shape_name": "GetCelebrityRecognitionResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Pagination token in the request is not valid.</simpara>\n      ",
          "documentation": "\n         <p>Pagination token in the request is not valid.</p>\n      ",
          "shape_name": "InvalidPaginationTokenException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The collection specified in the request cannot be found.</simpara>\n      ",
          "documentation": "\n         <p>The collection specified in the request cannot be found.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        }
      ],
      "documentation": "\n         <p>Gets the celebrity recognition results for a Amazon Rekognition Video analysis started by\n     .</p>\n         <p>Celebrity recognition in a video is an asynchronous operation. Analysis is started by a call\n      to   which returns a job identifier (<code>JobId</code>).\n      When the celebrity recognition operation finishes, Amazon Rekognition Video publishes a completion status to the Amazon Simple Notification Service\n      topic registered in the initial call to <code>StartCelebrityRecognition</code>.\n      To get the results of the celebrity recognition analysis, first check that the status value published to the Amazon SNS\n      topic is <code>SUCCEEDED</code>. If so, call  <code>GetCelebrityDetection</code> and pass the job identifier\n      (<code>JobId</code>) from the initial call to <code>StartCelebrityDetection</code>. </p>\n      \n         <p>For more information, see Working With Stored Videos in the Amazon Rekognition Developer Guide.</p>\n         <p>\n            <code>GetCelebrityRecognition</code> returns detected celebrities and the time(s) they are detected in an array\n      (<code>Celebrities</code>) of  \n      objects. Each <code>CelebrityRecognition</code> contains information about the celebrity in a \n      object and the time, <code>Timestamp</code>, the celebrity was detected.\n      </p>\n         <note>\n            <p>\n               <code>GetCelebrityRecognition</code> only returns the default  \n        facial attributes (<code>BoundingBox</code>, <code>Confidence</code>, \n        <code>Landmarks</code>, <code>Pose</code>, and <code>Quality</code>). The other facial attributes listed\n        in the <code>Face</code> object of the following response syntax are not returned. For more information,\n        see FaceDetail in the Amazon Rekognition Developer Guide. </p>\n         </note>\n         <p>By default, the <code>Celebrities</code> array is sorted by time (milliseconds from the start of the video).\n      You can also sort the array by celebrity by specifying the value <code>ID</code> in the <code>SortBy</code> input parameter.</p>\n         <p>The <code>CelebrityDetail</code> object includes the celebrity identifer and additional information urls. If you don't store\n      the additional information urls, you can get them later by calling  with the celebrity identifer.</p>\n         <p>No information is returned for faces not recognized as celebrities.</p>\n         <p>Use MaxResults parameter to limit the number of labels returned. If there are more results than\n      specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a\n      pagination token for getting the next set of results. To get the next page of results, call <code>GetCelebrityDetection</code>\n      and populate the <code>NextToken</code> request parameter with the token\n      value returned from the previous call to <code>GetCelebrityRecognition</code>.</p>\n\n\n      "
    },
    "GetFaceSearch": {
      "name": "GetFaceSearch",
      "input": {
        "type": "structure",
        "members": {
          "JobId": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9-_]+$",
            "zonbookDocumentation": "\n         <simpara>The job identifer for the search request. You get the job identifier from an initial call to <code>StartFaceSearch</code>.</simpara>\n      ",
            "documentation": "\n         <p>The job identifer for the search request. You get the job identifier from an initial call to <code>StartFaceSearch</code>.</p>\n      ",
            "required": true,
            "shape_name": "JobId",
            "min_length": 1,
            "max_length": 64
          },
          "MaxResults": {
            "type": "integer",
            "zonbookDocumentation": "\n         <simpara>Maximum number of results to return per paginated call. The largest value you can specify is 1000. \n      If you specify a value greater than 1000, a maximum of 1000 results is returned.\n      The default value is 1000.</simpara>\n      ",
            "documentation": "\n         <p>Maximum number of results to return per paginated call. The largest value you can specify is 1000. \n      If you specify a value greater than 1000, a maximum of 1000 results is returned.\n      The default value is 1000.</p>\n      ",
            "shape_name": "MaxResults",
            "min_length": 1
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>If the previous response was incomplete (because there is more search results to retrieve), Amazon Rekognition Video returns a pagination\n      token in the response. You can use this pagination token to retrieve the next set of search results. </simpara>\n      ",
            "documentation": "\n         <p>If the previous response was incomplete (because there is more search results to retrieve), Amazon Rekognition Video returns a pagination\n      token in the response. You can use this pagination token to retrieve the next set of search results. </p>\n      ",
            "shape_name": "PaginationToken",
            "max_length": 255
          },
          "SortBy": {
            "type": "string",
            "enum": [
              "INDEX",
              "TIMESTAMP"
            ],
            "zonbookDocumentation": "\n         <simpara>Sort to use for grouping faces in the response. Use <code>TIMESTAMP</code> to group faces by the time\n      that they are recognized. Use <code>INDEX</code> to sort by recognized faces. </simpara>\n      ",
            "documentation": "\n         <p>Sort to use for grouping faces in the response. Use <code>TIMESTAMP</code> to group faces by the time\n      that they are recognized. Use <code>INDEX</code> to sort by recognized faces. </p>\n      ",
            "shape_name": "FaceSearchSortBy"
          }
        },
        "shape_name": "GetFaceSearchRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "JobStatus": {
            "type": "string",
            "enum": [
              "IN_PROGRESS",
              "SUCCEEDED",
              "FAILED"
            ],
            "zonbookDocumentation": "\n         <simpara>The current status of the face search job.</simpara>\n      ",
            "documentation": "\n         <p>The current status of the face search job.</p>\n      ",
            "shape_name": "VideoJobStatus"
          },
          "StatusMessage": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>If the job fails, <code>StatusMessage</code> provides a descriptive error message.</simpara>\n      ",
            "documentation": "\n         <p>If the job fails, <code>StatusMessage</code> provides a descriptive error message.</p>\n      ",
            "shape_name": "StatusMessage"
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>If the response is truncated, Amazon Rekognition Video returns this token that you can use in the subsequent request to retrieve the next set of search results. </simpara>\n      ",
            "documentation": "\n         <p>If the response is truncated, Amazon Rekognition Video returns this token that you can use in the subsequent request to retrieve the next set of search results. </p>\n      ",
            "shape_name": "PaginationToken",
            "max_length": 255
          },
          "VideoMetadata": {
            "type": "structure",
            "members": {
              "Codec": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>Type of compression used in the analyzed video. </simpara>\n      ",
                "documentation": "\n        <p>Type of compression used in the analyzed video. </p>\n      ",
                "shape_name": "String"
              },
              "DurationMillis": {
                "type": "long",
                "zonbookDocumentation": "\n        <simpara>Length of the video in milliseconds.</simpara>\n      ",
                "documentation": "\n        <p>Length of the video in milliseconds.</p>\n      ",
                "shape_name": "ULong",
                "min_length": 0
              },
              "Format": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>Format of the analyzed video. Possible values are MP4, MOV and AVI. </simpara>\n      ",
                "documentation": "\n        <p>Format of the analyzed video. Possible values are MP4, MOV and AVI. </p>\n      ",
                "shape_name": "String"
              },
              "FrameRate": {
                "type": "float",
                "zonbookDocumentation": "\n        <simpara>Number of frames per second in the video.</simpara>\n      ",
                "documentation": "\n        <p>Number of frames per second in the video.</p>\n      ",
                "shape_name": "Float"
              },
              "FrameHeight": {
                "type": "long",
                "zonbookDocumentation": "\n        <simpara>Vertical pixel dimension of the video.</simpara>\n      ",
                "documentation": "\n        <p>Vertical pixel dimension of the video.</p>\n      ",
                "shape_name": "ULong",
                "min_length": 0
              },
              "FrameWidth": {
                "type": "long",
                "zonbookDocumentation": "\n        <simpara>Horizontal pixel dimension of the video.</simpara>\n      ",
                "documentation": "\n        <p>Horizontal pixel dimension of the video.</p>\n      ",
                "shape_name": "ULong",
                "min_length": 0
              }
            },
            "zonbookDocumentation": "\n         <simpara>Information about a video that Amazon Rekognition analyzed. <code>Videometadata</code> is returned in every page of paginated responses\n      from a Amazon Rekognition Video operation. </simpara>\n      ",
            "documentation": "\n         <p>Information about a video that Amazon Rekognition analyzed. <code>Videometadata</code> is returned in every page of paginated responses\n      from a Amazon Rekognition Video operation. </p>\n      ",
            "shape_name": "VideoMetadata"
          },
          "Persons": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of persons,  <xref linkend=\"API_PersonMatch\"/>,\n      in the video whose face(s) match the face(s) in an Amazon Rekognition collection. It also includes time information\n       for when persons are matched in the video.\n      You specify the input collection in an initial call to <code>StartFaceSearch</code>.\n      Each  <code>Persons</code> element includes a time the person was matched,\n      face match details (<code>FaceMatches</code>) for matching faces in the collection,\n       and person information (<code>Person</code>) for the matched person. </simpara>\n      ",
            "documentation": "\n         <p>An array of persons,  ,\n      in the video whose face(s) match the face(s) in an Amazon Rekognition collection. It also includes time information\n       for when persons are matched in the video.\n      You specify the input collection in an initial call to <code>StartFaceSearch</code>.\n      Each  <code>Persons</code> element includes a time the person was matched,\n      face match details (<code>FaceMatches</code>) for matching faces in the collection,\n       and person information (<code>Person</code>) for the matched person. </p>\n      ",
            "shape_name": "PersonMatches",
            "members": {
              "type": "structure",
              "members": {
                "Timestamp": {
                  "type": "long",
                  "zonbookDocumentation": "\n         <para>The time, in milliseconds from the beginning of the video, that the person was matched in the video.</para>\n      ",
                  "documentation": "\n         <p>The time, in milliseconds from the beginning of the video, that the person was matched in the video.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "Person": {
                  "type": "structure",
                  "members": {
                    "Index": {
                      "type": "long",
                      "zonbookDocumentation": "\n        <simpara>Identifier for the person detected person within a video. Use to keep track of the person throughout the video. The identifier is not stored by Amazon Rekognition.</simpara>\n      ",
                      "documentation": "\n        <p>Identifier for the person detected person within a video. Use to keep track of the person throughout the video. The identifier is not stored by Amazon Rekognition.</p>\n      ",
                      "shape_name": "PersonIndex"
                    },
                    "BoundingBox": {
                      "type": "structure",
                      "members": {
                        "Width": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Width of the bounding box as a ratio of the overall image width.</simpara>\n      ",
                          "documentation": "\n         <p>Width of the bounding box as a ratio of the overall image width.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Height": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Height of the bounding box as a ratio of the overall image height.</simpara>\n      ",
                          "documentation": "\n         <p>Height of the bounding box as a ratio of the overall image height.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Left": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Left coordinate of the bounding box as a ratio of overall image width.</simpara>\n      ",
                          "documentation": "\n         <p>Left coordinate of the bounding box as a ratio of overall image width.</p>\n      ",
                          "shape_name": "Float"
                        },
                        "Top": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Top coordinate of the bounding box as a ratio of overall image height.</simpara>\n      ",
                          "documentation": "\n         <p>Top coordinate of the bounding box as a ratio of overall image height.</p>\n      ",
                          "shape_name": "Float"
                        }
                      },
                      "zonbookDocumentation": "\n        <simpara>Bounding box around the detected person.</simpara>\n      ",
                      "documentation": "\n        <p>Bounding box around the detected person.</p>\n      ",
                      "shape_name": "BoundingBox"
                    },
                    "Face": {
                      "type": "structure",
                      "members": {
                        "BoundingBox": {
                          "type": "structure",
                          "members": {
                            "Width": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Width of the bounding box as a ratio of the overall image width.</simpara>\n      ",
                              "documentation": "\n         <p>Width of the bounding box as a ratio of the overall image width.</p>\n      ",
                              "shape_name": "Float"
                            },
                            "Height": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Height of the bounding box as a ratio of the overall image height.</simpara>\n      ",
                              "documentation": "\n         <p>Height of the bounding box as a ratio of the overall image height.</p>\n      ",
                              "shape_name": "Float"
                            },
                            "Left": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Left coordinate of the bounding box as a ratio of overall image width.</simpara>\n      ",
                              "documentation": "\n         <p>Left coordinate of the bounding box as a ratio of overall image width.</p>\n      ",
                              "shape_name": "Float"
                            },
                            "Top": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Top coordinate of the bounding box as a ratio of overall image height.</simpara>\n      ",
                              "documentation": "\n         <p>Top coordinate of the bounding box as a ratio of overall image height.</p>\n      ",
                              "shape_name": "Float"
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>Bounding box of the face. Default attribute.</simpara>\n      ",
                          "documentation": "\n         <p>Bounding box of the face. Default attribute.</p>\n      ",
                          "shape_name": "BoundingBox"
                        },
                        "AgeRange": {
                          "type": "structure",
                          "members": {
                            "Low": {
                              "type": "integer",
                              "zonbookDocumentation": "\n         <simpara>The lowest estimated age.</simpara>\n      ",
                              "documentation": "\n         <p>The lowest estimated age.</p>\n      ",
                              "shape_name": "UInteger",
                              "min_length": 0
                            },
                            "High": {
                              "type": "integer",
                              "zonbookDocumentation": "\n         <simpara>The highest estimated age.</simpara>\n      ",
                              "documentation": "\n         <p>The highest estimated age.</p>\n      ",
                              "shape_name": "UInteger",
                              "min_length": 0
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>The estimated age range, in years, for the face. Low represents the lowest estimated\n      age and High represents the highest estimated age.</simpara>\n      ",
                          "documentation": "\n         <p>The estimated age range, in years, for the face. Low represents the lowest estimated\n      age and High represents the highest estimated age.</p>\n      ",
                          "shape_name": "AgeRange"
                        },
                        "Smile": {
                          "type": "structure",
                          "members": {
                            "Value": {
                              "type": "boolean",
                              "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the face is smiling or not.</simpara>\n      ",
                              "documentation": "\n         <p>Boolean value that indicates whether the face is smiling or not.</p>\n      ",
                              "shape_name": "Boolean"
                            },
                            "Confidence": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                              "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                              "shape_name": "Percent",
                              "min_length": 0,
                              "max_length": 100
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>Indicates whether or not the face is smiling, and the confidence level in the\n      determination.</simpara>\n      ",
                          "documentation": "\n         <p>Indicates whether or not the face is smiling, and the confidence level in the\n      determination.</p>\n      ",
                          "shape_name": "Smile"
                        },
                        "Eyeglasses": {
                          "type": "structure",
                          "members": {
                            "Value": {
                              "type": "boolean",
                              "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the face is wearing eye glasses or not.</simpara>\n      ",
                              "documentation": "\n         <p>Boolean value that indicates whether the face is wearing eye glasses or not.</p>\n      ",
                              "shape_name": "Boolean"
                            },
                            "Confidence": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                              "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                              "shape_name": "Percent",
                              "min_length": 0,
                              "max_length": 100
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>Indicates whether or not the face is wearing eye glasses, and the confidence level in\n      the determination.</simpara>\n      ",
                          "documentation": "\n         <p>Indicates whether or not the face is wearing eye glasses, and the confidence level in\n      the determination.</p>\n      ",
                          "shape_name": "Eyeglasses"
                        },
                        "Sunglasses": {
                          "type": "structure",
                          "members": {
                            "Value": {
                              "type": "boolean",
                              "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the face is wearing sunglasses or not.</simpara>\n      ",
                              "documentation": "\n         <p>Boolean value that indicates whether the face is wearing sunglasses or not.</p>\n      ",
                              "shape_name": "Boolean"
                            },
                            "Confidence": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                              "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                              "shape_name": "Percent",
                              "min_length": 0,
                              "max_length": 100
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>Indicates whether or not the face is wearing sunglasses, and the confidence level in\n      the determination.</simpara>\n      ",
                          "documentation": "\n         <p>Indicates whether or not the face is wearing sunglasses, and the confidence level in\n      the determination.</p>\n      ",
                          "shape_name": "Sunglasses"
                        },
                        "Gender": {
                          "type": "structure",
                          "members": {
                            "Value": {
                              "type": "string",
                              "enum": [
                                "Male",
                                "Female"
                              ],
                              "zonbookDocumentation": "\n         <simpara>Gender of the face.</simpara>\n      ",
                              "documentation": "\n         <p>Gender of the face.</p>\n      ",
                              "shape_name": "GenderType"
                            },
                            "Confidence": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                              "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                              "shape_name": "Percent",
                              "min_length": 0,
                              "max_length": 100
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>Gender of the face and the confidence level in the determination.</simpara>\n      ",
                          "documentation": "\n         <p>Gender of the face and the confidence level in the determination.</p>\n      ",
                          "shape_name": "Gender"
                        },
                        "Beard": {
                          "type": "structure",
                          "members": {
                            "Value": {
                              "type": "boolean",
                              "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the face has beard or not.</simpara>\n      ",
                              "documentation": "\n         <p>Boolean value that indicates whether the face has beard or not.</p>\n      ",
                              "shape_name": "Boolean"
                            },
                            "Confidence": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                              "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                              "shape_name": "Percent",
                              "min_length": 0,
                              "max_length": 100
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>Indicates whether or not the face has a beard, and the confidence level in the\n      determination.</simpara>\n      ",
                          "documentation": "\n         <p>Indicates whether or not the face has a beard, and the confidence level in the\n      determination.</p>\n      ",
                          "shape_name": "Beard"
                        },
                        "Mustache": {
                          "type": "structure",
                          "members": {
                            "Value": {
                              "type": "boolean",
                              "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the face has mustache or not.</simpara>\n      ",
                              "documentation": "\n         <p>Boolean value that indicates whether the face has mustache or not.</p>\n      ",
                              "shape_name": "Boolean"
                            },
                            "Confidence": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                              "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                              "shape_name": "Percent",
                              "min_length": 0,
                              "max_length": 100
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>Indicates whether or not the face has a mustache, and the confidence level in the\n      determination.</simpara>\n      ",
                          "documentation": "\n         <p>Indicates whether or not the face has a mustache, and the confidence level in the\n      determination.</p>\n      ",
                          "shape_name": "Mustache"
                        },
                        "EyesOpen": {
                          "type": "structure",
                          "members": {
                            "Value": {
                              "type": "boolean",
                              "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the eyes on the face are open.</simpara>\n      ",
                              "documentation": "\n         <p>Boolean value that indicates whether the eyes on the face are open.</p>\n      ",
                              "shape_name": "Boolean"
                            },
                            "Confidence": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                              "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                              "shape_name": "Percent",
                              "min_length": 0,
                              "max_length": 100
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>Indicates whether or not the eyes on the face are open, and the confidence level in the\n      determination.</simpara>\n      ",
                          "documentation": "\n         <p>Indicates whether or not the eyes on the face are open, and the confidence level in the\n      determination.</p>\n      ",
                          "shape_name": "EyeOpen"
                        },
                        "MouthOpen": {
                          "type": "structure",
                          "members": {
                            "Value": {
                              "type": "boolean",
                              "zonbookDocumentation": "\n         <simpara>Boolean value that indicates whether the mouth on the face is open or not.</simpara>\n      ",
                              "documentation": "\n         <p>Boolean value that indicates whether the mouth on the face is open or not.</p>\n      ",
                              "shape_name": "Boolean"
                            },
                            "Confidence": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                              "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                              "shape_name": "Percent",
                              "min_length": 0,
                              "max_length": 100
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>Indicates whether or not the mouth on the face is open, and the confidence level in the\n      determination.</simpara>\n      ",
                          "documentation": "\n         <p>Indicates whether or not the mouth on the face is open, and the confidence level in the\n      determination.</p>\n      ",
                          "shape_name": "MouthOpen"
                        },
                        "Emotions": {
                          "type": "list",
                          "zonbookDocumentation": "\n         <simpara>The emotions detected on the face, and the confidence level in the determination. For\n      example, HAPPY, SAD, and ANGRY. </simpara>\n      ",
                          "documentation": "\n         <p>The emotions detected on the face, and the confidence level in the determination. For\n      example, HAPPY, SAD, and ANGRY. </p>\n      ",
                          "shape_name": "Emotions",
                          "members": {
                            "type": "structure",
                            "members": {
                              "Type": {
                                "type": "string",
                                "enum": [
                                  "HAPPY",
                                  "SAD",
                                  "ANGRY",
                                  "CONFUSED",
                                  "DISGUSTED",
                                  "SURPRISED",
                                  "CALM",
                                  "UNKNOWN"
                                ],
                                "zonbookDocumentation": "\n         <simpara>Type of emotion detected.</simpara>\n      ",
                                "documentation": "\n         <p>Type of emotion detected.</p>\n      ",
                                "shape_name": "EmotionName"
                              },
                              "Confidence": {
                                "type": "float",
                                "zonbookDocumentation": "\n         <simpara>Level of confidence in the determination.</simpara>\n      ",
                                "documentation": "\n         <p>Level of confidence in the determination.</p>\n      ",
                                "shape_name": "Percent",
                                "min_length": 0,
                                "max_length": 100
                              }
                            },
                            "zonbookDocumentation": "\n         <simpara>The emotions detected on the face, and the confidence level in the determination. For\n      example, HAPPY, SAD, and ANGRY.</simpara>\n      ",
                            "documentation": "\n         <p>The emotions detected on the face, and the confidence level in the determination. For\n      example, HAPPY, SAD, and ANGRY.</p>\n      ",
                            "shape_name": "Emotion"
                          }
                        },
                        "Landmarks": {
                          "type": "list",
                          "zonbookDocumentation": "\n         <simpara>Indicates the location of landmarks on the face. Default attribute.</simpara>\n      ",
                          "documentation": "\n         <p>Indicates the location of landmarks on the face. Default attribute.</p>\n      ",
                          "shape_name": "Landmarks",
                          "members": {
                            "type": "structure",
                            "members": {
                              "Type": {
                                "type": "string",
                                "enum": [
                                  "eyeLeft",
                                  "eyeRight",
                                  "nose",
                                  "mouthLeft",
                                  "mouthRight",
                                  "leftEyeBrowLeft",
                                  "leftEyeBrowRight",
                                  "leftEyeBrowUp",
                                  "rightEyeBrowLeft",
                                  "rightEyeBrowRight",
                                  "rightEyeBrowUp",
                                  "leftEyeLeft",
                                  "leftEyeRight",
                                  "leftEyeUp",
                                  "leftEyeDown",
                                  "rightEyeLeft",
                                  "rightEyeRight",
                                  "rightEyeUp",
                                  "rightEyeDown",
                                  "noseLeft",
                                  "noseRight",
                                  "mouthUp",
                                  "mouthDown",
                                  "leftPupil",
                                  "rightPupil"
                                ],
                                "zonbookDocumentation": "\n         <simpara>Type of the landmark.</simpara>\n      ",
                                "documentation": "\n         <p>Type of the landmark.</p>\n      ",
                                "shape_name": "LandmarkType"
                              },
                              "X": {
                                "type": "float",
                                "zonbookDocumentation": "\n         <simpara>x-coordinate from the top left of the landmark expressed as the ratio of the width of\n      the image. For example, if the images is 700x200 and the x-coordinate of the landmark is at\n      350 pixels, this value is 0.5. </simpara>\n      ",
                                "documentation": "\n         <p>x-coordinate from the top left of the landmark expressed as the ratio of the width of\n      the image. For example, if the images is 700x200 and the x-coordinate of the landmark is at\n      350 pixels, this value is 0.5. </p>\n      ",
                                "shape_name": "Float"
                              },
                              "Y": {
                                "type": "float",
                                "zonbookDocumentation": "\n         <simpara>y-coordinate from the top left of the landmark expressed as the ratio of the height of\n      the image. For example, if the images is 700x200 and the y-coordinate of the landmark is at\n      100 pixels, this value is 0.5.</simpara>\n      ",
                                "documentation": "\n         <p>y-coordinate from the top left of the landmark expressed as the ratio of the height of\n      the image. For example, if the images is 700x200 and the y-coordinate of the landmark is at\n      100 pixels, this value is 0.5.</p>\n      ",
                                "shape_name": "Float"
                              }
                            },
                            "zonbookDocumentation": "\n         <simpara>Indicates the location of the landmark on the face.</simpara>\n      ",
                            "documentation": "\n         <p>Indicates the location of the landmark on the face.</p>\n      ",
                            "shape_name": "Landmark"
                          }
                        },
                        "Pose": {
                          "type": "structure",
                          "members": {
                            "Roll": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Value representing the face rotation on the roll axis.</simpara>\n      ",
                              "documentation": "\n         <p>Value representing the face rotation on the roll axis.</p>\n      ",
                              "shape_name": "Degree",
                              "min_length": -180,
                              "max_length": 180
                            },
                            "Yaw": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Value representing the face rotation on the yaw axis.</simpara>\n      ",
                              "documentation": "\n         <p>Value representing the face rotation on the yaw axis.</p>\n      ",
                              "shape_name": "Degree",
                              "min_length": -180,
                              "max_length": 180
                            },
                            "Pitch": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Value representing the face rotation on the pitch axis.</simpara>\n      ",
                              "documentation": "\n         <p>Value representing the face rotation on the pitch axis.</p>\n      ",
                              "shape_name": "Degree",
                              "min_length": -180,
                              "max_length": 180
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>Indicates the pose of the face as determined by its pitch, roll, and yaw. Default attribute.</simpara>\n      ",
                          "documentation": "\n         <p>Indicates the pose of the face as determined by its pitch, roll, and yaw. Default attribute.</p>\n      ",
                          "shape_name": "Pose"
                        },
                        "Quality": {
                          "type": "structure",
                          "members": {
                            "Brightness": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Value representing brightness of the face. The service returns a value between 0 and\n      100 (inclusive). A higher value indicates a brighter face image.</simpara>\n      ",
                              "documentation": "\n         <p>Value representing brightness of the face. The service returns a value between 0 and\n      100 (inclusive). A higher value indicates a brighter face image.</p>\n      ",
                              "shape_name": "Float"
                            },
                            "Sharpness": {
                              "type": "float",
                              "zonbookDocumentation": "\n         <simpara>Value representing sharpness of the face. The service returns a value between 0 and 100\n      (inclusive). A higher value indicates a sharper face image.</simpara>\n      ",
                              "documentation": "\n         <p>Value representing sharpness of the face. The service returns a value between 0 and 100\n      (inclusive). A higher value indicates a sharper face image.</p>\n      ",
                              "shape_name": "Float"
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>Identifies image brightness and sharpness. Default attribute.</simpara>\n      ",
                          "documentation": "\n         <p>Identifies image brightness and sharpness. Default attribute.</p>\n      ",
                          "shape_name": "ImageQuality"
                        },
                        "Confidence": {
                          "type": "float",
                          "zonbookDocumentation": "\n         <simpara>Confidence level that the bounding box contains a face (and not a different object such\n      as a tree). Default attribute.</simpara>\n      ",
                          "documentation": "\n         <p>Confidence level that the bounding box contains a face (and not a different object such\n      as a tree). Default attribute.</p>\n      ",
                          "shape_name": "Percent",
                          "min_length": 0,
                          "max_length": 100
                        }
                      },
                      "zonbookDocumentation": "\n        <simpara>Face details for the detected person.</simpara>\n      ",
                      "documentation": "\n        <p>Face details for the detected person.</p>\n      ",
                      "shape_name": "FaceDetail"
                    }
                  },
                  "zonbookDocumentation": "\n         <para>Information about the matched person.</para>\n      ",
                  "documentation": "\n         <p>Information about the matched person.</p>\n      ",
                  "shape_name": "PersonDetail"
                },
                "FaceMatches": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <para>Information about the faces in the input collection that match the face of a person in the video.</para>\n      ",
                  "documentation": "\n         <p>Information about the faces in the input collection that match the face of a person in the video.</p>\n      ",
                  "shape_name": "FaceMatchList",
                  "members": {
                    "type": "structure",
                    "members": {
                      "Similarity": {
                        "type": "float",
                        "zonbookDocumentation": "\n         <simpara>Confidence in the match of this face with the input face.</simpara>\n      ",
                        "documentation": "\n         <p>Confidence in the match of this face with the input face.</p>\n      ",
                        "shape_name": "Percent",
                        "min_length": 0,
                        "max_length": 100
                      },
                      "Face": {
                        "type": "structure",
                        "members": {
                          "FaceId": {
                            "type": "string",
                            "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
                            "zonbookDocumentation": "\n         <simpara>Unique identifier that Amazon Rekognition assigns to the face.</simpara>\n      ",
                            "documentation": "\n         <p>Unique identifier that Amazon Rekognition assigns to the face.</p>\n      ",
                            "shape_name": "FaceId"
                          },
                          "BoundingBox": {
                            "type": "structure",
                            "members": {
                              "Width": {
                                "type": "float",
                                "zonbookDocumentation": "\n         <simpara>Width of the bounding box as a ratio of the overall image width.</simpara>\n      ",
                                "documentation": "\n         <p>Width of the bounding box as a ratio of the overall image width.</p>\n      ",
                                "shape_name": "Float"
                              },
                              "Height": {
                                "type": "float",
                                "zonbookDocumentation": "\n         <simpara>Height of the bounding box as a ratio of the overall image height.</simpara>\n      ",
                                "documentation": "\n         <p>Height of the bounding box as a ratio of the overall image height.</p>\n      ",
                                "shape_name": "Float"
                              },
                              "Left": {
                                "type": "float",
                                "zonbookDocumentation": "\n         <simpara>Left coordinate of the bounding box as a ratio of overall image width.</simpara>\n      ",
                                "documentation": "\n         <p>Left coordinate of the bounding box as a ratio of overall image width.</p>\n      ",
                                "shape_name": "Float"
                              },
                              "Top": {
                                "type": "float",
                                "zonbookDocumentation": "\n         <simpara>Top coordinate of the bounding box as a ratio of overall image height.</simpara>\n      ",
                                "documentation": "\n         <p>Top coordinate of the bounding box as a ratio of overall image height.</p>\n      ",
                                "shape_name": "Float"
                              }
                            },
                            "zonbookDocumentation": "\n         <simpara>Bounding box of the face.</simpara>\n      ",
                            "documentation": "\n         <p>Bounding box of the face.</p>\n      ",
                            "shape_name": "BoundingBox"
                          },
                          "ImageId": {
                            "type": "string",
                            "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
                            "zonbookDocumentation": "\n         <simpara>Unique identifier that Amazon Rekognition assigns to the input image.</simpara>\n      ",
                            "documentation": "\n         <p>Unique identifier that Amazon Rekognition assigns to the input image.</p>\n      ",
                            "shape_name": "ImageId"
                          },
                          "ExternalImageId": {
                            "type": "string",
                            "pattern": "[a-zA-Z0-9_.\\-:]+",
                            "zonbookDocumentation": "\n         <simpara>Identifier that you assign to all the faces in the input image.</simpara>\n      ",
                            "documentation": "\n         <p>Identifier that you assign to all the faces in the input image.</p>\n      ",
                            "shape_name": "ExternalImageId",
                            "min_length": 1,
                            "max_length": 255
                          },
                          "Confidence": {
                            "type": "float",
                            "zonbookDocumentation": "\n         <simpara>Confidence level that the bounding box contains a face (and not a different object such\n      as a tree).</simpara>\n      ",
                            "documentation": "\n         <p>Confidence level that the bounding box contains a face (and not a different object such\n      as a tree).</p>\n      ",
                            "shape_name": "Percent",
                            "min_length": 0,
                            "max_length": 100
                          }
                        },
                        "zonbookDocumentation": "\n         <simpara>Describes the face properties such as the bounding box, face ID, image ID of the source\n      image, and external image ID that you assigned.</simpara>\n      ",
                        "documentation": "\n         <p>Describes the face properties such as the bounding box, face ID, image ID of the source\n      image, and external image ID that you assigned.</p>\n      ",
                        "shape_name": "Face"
                      }
                    },
                    "zonbookDocumentation": "\n         <simpara>Provides face metadata. In addition, it also provides the confidence in the match of\n      this face with the input face.</simpara>\n      ",
                    "documentation": "\n         <p>Provides face metadata. In addition, it also provides the confidence in the match of\n      this face with the input face.</p>\n      ",
                    "shape_name": "FaceMatch"
                  }
                }
              },
              "zonbookDocumentation": "\n         <simpara>Information about a person whose face matches a face(s) in a Amazon Rekognition collection. Includes information\n      about the faces in the Amazon Rekognition collection (<xref linkend=\"API_FaceMatch\"/>), information about the person (<xref linkend=\"PersonDetail\"/>)\n      and the timestamp for when the person was detected in a video. An array of  <code>PersonMatch</code> objects is returned by <xref linkend=\"API_GetFaceSearch\"/>.\n    </simpara>\n      ",
              "documentation": "\n         <p>Information about a person whose face matches a face(s) in a Amazon Rekognition collection. Includes information\n      about the faces in the Amazon Rekognition collection (), information about the person (<a>PersonDetail</a>)\n      and the timestamp for when the person was detected in a video. An array of  <code>PersonMatch</code> objects is returned by .\n    </p>\n      ",
              "shape_name": "PersonMatch"
            }
          }
        },
        "shape_name": "GetFaceSearchResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Pagination token in the request is not valid.</simpara>\n      ",
          "documentation": "\n         <p>Pagination token in the request is not valid.</p>\n      ",
          "shape_name": "InvalidPaginationTokenException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The collection specified in the request cannot be found.</simpara>\n      ",
          "documentation": "\n         <p>The collection specified in the request cannot be found.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        }
      ],
      "documentation": "\n         <p>Gets the face search results for Amazon Rekognition Video face search started by\n      . The search returns faces in a collection that match the faces\n    of persons detected in a video. It also includes the time(s) that faces are matched in the video.</p>\n         <p>Face search in a video is an asynchronous operation. You start face search by calling\n      to  which returns a job identifier (<code>JobId</code>).\n      When the search operation finishes, Amazon Rekognition Video publishes a completion status to the Amazon Simple Notification Service\n      topic registered in the initial call to <code>StartFaceSearch</code>.\n      To get the search results, first check that the status value published to the Amazon SNS\n      topic is <code>SUCCEEDED</code>. If so, call  <code>GetFaceSearch</code> and pass the job identifier\n      (<code>JobId</code>) from the initial call to <code>StartFaceSearch</code>.</p> \n      \n         <p>For more information, see Searching Faces in a Collection in the\n      Amazon Rekognition Developer Guide.</p>\n         <p>The search results are retured in an array, <code>Persons</code>, of\n     objects. Each<code>PersonMatch</code> element contains\n    details about the matching faces in the input collection, person information (facial attributes,\n    bounding boxes, and person identifer)\n    for the matched person, and the time the person was matched in the video.</p>\n         <note>\n            <p>\n               <code>GetFaceSearch</code> only returns the default  \n        facial attributes (<code>BoundingBox</code>, <code>Confidence</code>, \n        <code>Landmarks</code>, <code>Pose</code>, and <code>Quality</code>). The other facial attributes listed\n        in the <code>Face</code> object of the following response syntax are not returned. For more information,\n        see FaceDetail in the Amazon Rekognition Developer Guide. </p>\n         </note>\n\n         <p>By default, the <code>Persons</code> array is sorted by the time, in milliseconds from the\n    start of the video, persons are matched.\n    You can also sort by persons by specifying <code>INDEX</code> for the <code>SORTBY</code> input\n    parameter.</p>\n\n      "
    },
    "CreateStreamProcessor": {
      "name": "CreateStreamProcessor",
      "input": {
        "type": "structure",
        "members": {
          "Input": {
            "type": "structure",
            "members": {
              "KinesisVideoStream": {
                "type": "structure",
                "members": {
                  "Arn": {
                    "type": "string",
                    "pattern": "(^arn:([a-z\\d-]+):kinesisvideo:([a-z\\d-]+):\\d{12}:.+$)",
                    "zonbookDocumentation": "\n        <simpara>ARN of the Kinesis video stream stream that streams the source video.</simpara>\n      ",
                    "documentation": "\n        <p>ARN of the Kinesis video stream stream that streams the source video.</p>\n      ",
                    "shape_name": "KinesisVideoArn"
                  }
                },
                "zonbookDocumentation": "\n        <para>The Kinesis video stream input stream for the source streaming video.</para>\n      ",
                "documentation": "\n        <p>The Kinesis video stream input stream for the source streaming video.</p>\n      ",
                "shape_name": "KinesisVideoStream"
              }
            },
            "zonbookDocumentation": "\n        <simpara>Kinesis video stream stream that provides the source streaming video. If you are using the AWS CLI, the parameter name is <code>StreamProcessorInput</code>.</simpara>\n      ",
            "documentation": "\n        <p>Kinesis video stream stream that provides the source streaming video. If you are using the AWS CLI, the parameter name is <code>StreamProcessorInput</code>.</p>\n      ",
            "required": true,
            "shape_name": "StreamProcessorInput"
          },
          "Output": {
            "type": "structure",
            "members": {
              "KinesisDataStream": {
                "type": "structure",
                "members": {
                  "Arn": {
                    "type": "string",
                    "pattern": "(^arn:([a-z\\d-]+):kinesis:([a-z\\d-]+):\\d{12}:.+$)",
                    "zonbookDocumentation": "\n        <simpara>ARN of the output Amazon Kinesis Data Streams stream.</simpara>\n      ",
                    "documentation": "\n        <p>ARN of the output Amazon Kinesis Data Streams stream.</p>\n      ",
                    "shape_name": "KinesisDataArn"
                  }
                },
                "zonbookDocumentation": "\n        <para>The Amazon Kinesis Data Streams stream to which the Amazon Rekognition stream processor streams the analysis results.</para>\n      ",
                "documentation": "\n        <p>The Amazon Kinesis Data Streams stream to which the Amazon Rekognition stream processor streams the analysis results.</p>\n      ",
                "shape_name": "KinesisDataStream"
              }
            },
            "zonbookDocumentation": "\n        <simpara>Kinesis data stream stream to which Amazon Rekognition Video puts the analysis results. If you are using the AWS CLI, the parameter name is <code>StreamProcessorOutput</code>.</simpara>\n      ",
            "documentation": "\n        <p>Kinesis data stream stream to which Amazon Rekognition Video puts the analysis results. If you are using the AWS CLI, the parameter name is <code>StreamProcessorOutput</code>.</p>\n      ",
            "required": true,
            "shape_name": "StreamProcessorOutput"
          },
          "Name": {
            "type": "string",
            "pattern": "[a-zA-Z0-9_.\\-]+",
            "zonbookDocumentation": "\n        <simpara>An identifier you assign to the stream processor. You can use <code>Name</code> to\n            manage the stream processor. For example, you can get the current status of the stream processor by calling <xref linkend=\"API_DescribeStreamProcessor\"/>.\n             <code>Name</code> is idempotent.\n       </simpara>\n      ",
            "documentation": "\n        <p>An identifier you assign to the stream processor. You can use <code>Name</code> to\n            manage the stream processor. For example, you can get the current status of the stream processor by calling .\n             <code>Name</code> is idempotent.\n       </p>\n      ",
            "required": true,
            "shape_name": "StreamProcessorName",
            "min_length": 1,
            "max_length": 128
          },
          "Settings": {
            "type": "structure",
            "members": {
              "FaceSearch": {
                "type": "structure",
                "members": {
                  "CollectionId": {
                    "type": "string",
                    "pattern": "[a-zA-Z0-9_.\\-]+",
                    "zonbookDocumentation": "\n        <simpara>The ID of a collection that contains faces that you want to search for.</simpara>\n      ",
                    "documentation": "\n        <p>The ID of a collection that contains faces that you want to search for.</p>\n      ",
                    "shape_name": "CollectionId",
                    "min_length": 1,
                    "max_length": 255
                  },
                  "FaceMatchThreshold": {
                    "type": "float",
                    "zonbookDocumentation": "\n        <simpara>Minimum face match confidence score that must be met to return a result for a recognized face. Default is 70.\n        0 is the lowest confidence. 100 is the highest confidence.</simpara>\n      ",
                    "documentation": "\n        <p>Minimum face match confidence score that must be met to return a result for a recognized face. Default is 70.\n        0 is the lowest confidence. 100 is the highest confidence.</p>\n      ",
                    "shape_name": "Percent",
                    "min_length": 0,
                    "max_length": 100
                  }
                },
                "zonbookDocumentation": "\n        <simpara>Face search settings to use on a streaming video. </simpara>\n      ",
                "documentation": "\n        <p>Face search settings to use on a streaming video. </p>\n      ",
                "shape_name": "FaceSearchSettings"
              }
            },
            "zonbookDocumentation": "\n        <simpara>Face recognition input parameters to be used by the stream processor. Includes the collection to use for face recognition and the face\n        attributes to detect.</simpara>\n      ",
            "documentation": "\n        <p>Face recognition input parameters to be used by the stream processor. Includes the collection to use for face recognition and the face\n        attributes to detect.</p>\n      ",
            "required": true,
            "shape_name": "StreamProcessorSettings"
          },
          "RoleArn": {
            "type": "string",
            "pattern": "arn:aws:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+",
            "zonbookDocumentation": "\n        <simpara>ARN of the IAM role that allows access to the stream processor.</simpara>\n      ",
            "documentation": "\n        <p>ARN of the IAM role that allows access to the stream processor.</p>\n      ",
            "required": true,
            "shape_name": "RoleArn"
          }
        },
        "shape_name": "CreateStreamProcessorRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "StreamProcessorArn": {
            "type": "string",
            "pattern": "(^arn:[a-z\\d-]+:rekognition:[a-z\\d-]+:\\d{12}:streamprocessor\\/.+$)",
            "zonbookDocumentation": "\n        <simpara>ARN for the newly create stream processor.</simpara>\n      ",
            "documentation": "\n        <p>ARN for the newly create stream processor.</p>\n      ",
            "shape_name": "StreamProcessorArn"
          }
        },
        "shape_name": "CreateStreamProcessorResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara>An Amazon Rekognition service limit was exceeded. For example, if you start too many Amazon Rekognition Video jobs concurrently, calls to start operations \n            (<code>StartLabelDetection</code>, for example) will raise a <code>LimitExceededException</code> exception (HTTP status code: 400) until\n            the number of concurrently running jobs is below the Amazon Rekognition service limit.  </simpara>\n      ",
          "documentation": "\n        <p>An Amazon Rekognition service limit was exceeded. For example, if you start too many Amazon Rekognition Video jobs concurrently, calls to start operations \n            (<code>StartLabelDetection</code>, for example) will raise a <code>LimitExceededException</code> exception (HTTP status code: 400) until\n            the number of concurrently running jobs is below the Amazon Rekognition service limit.  </p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara/>\n      ",
          "documentation": "\n        <p/>\n      ",
          "shape_name": "ResourceInUseException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        }
      ],
      "documentation": "\n        <p>Creates an Amazon Rekognition stream processor that you can use to detect and recognize faces in a streaming video.</p>\n        <p>Amazon Rekognition Video is a consumer of live video from Amazon Kinesis Video Streams. Amazon Rekognition Video sends analysis results to Amazon Kinesis Data Streams.</p>\n        <p>You provide as input a Kinesis video stream (<code>Input</code>) and a Kinesis data stream (<code>Output</code>) stream. You also specify the\n            face recognition criteria in <code>Settings</code>. For example, the collection containing faces that you want to recognize.\n            Use <code>Name</code> to assign an identifier for the stream processor. You use <code>Name</code>\n            to manage the stream processor. For example, you can start processing the source video by calling  with\n            the <code>Name</code> field. </p>\n        <p>After you have finished analyzing a streaming video, use  to\n        stop processing. You can delete the stream processor by calling .</p>\n      "
    },
    "StartStreamProcessor": {
      "name": "StartStreamProcessor",
      "input": {
        "type": "structure",
        "members": {
          "Name": {
            "type": "string",
            "pattern": "[a-zA-Z0-9_.\\-]+",
            "zonbookDocumentation": "\n        <simpara>The name of the stream processor to start processing.</simpara>\n      ",
            "documentation": "\n        <p>The name of the stream processor to start processing.</p>\n      ",
            "required": true,
            "shape_name": "StreamProcessorName",
            "min_length": 1,
            "max_length": 128
          }
        },
        "shape_name": "StartStreamProcessorRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "StartStreamProcessorResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The collection specified in the request cannot be found.</simpara>\n      ",
          "documentation": "\n         <p>The collection specified in the request cannot be found.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara/>\n      ",
          "documentation": "\n        <p/>\n      ",
          "shape_name": "ResourceInUseException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        }
      ],
      "documentation": "\n        <p>Starts processing a stream processor. You create a stream processor by calling .\n            To tell <code>StartStreamProcessor</code> which stream processor to start, use the value of the <code>Name</code> field specified in the call to\n            <code>CreateStreamProcessor</code>.</p>\n      "
    },
    "StopStreamProcessor": {
      "name": "StopStreamProcessor",
      "input": {
        "type": "structure",
        "members": {
          "Name": {
            "type": "string",
            "pattern": "[a-zA-Z0-9_.\\-]+",
            "zonbookDocumentation": "\n        <simpara>The name of a stream processor created by <xref linkend=\"API_CreateStreamProcessor\"/>.</simpara>\n      ",
            "documentation": "\n        <p>The name of a stream processor created by .</p>\n      ",
            "required": true,
            "shape_name": "StreamProcessorName",
            "min_length": 1,
            "max_length": 128
          }
        },
        "shape_name": "StopStreamProcessorRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "StopStreamProcessorResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The collection specified in the request cannot be found.</simpara>\n      ",
          "documentation": "\n         <p>The collection specified in the request cannot be found.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara/>\n      ",
          "documentation": "\n        <p/>\n      ",
          "shape_name": "ResourceInUseException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        }
      ],
      "documentation": "\n        <p>Stops a running stream processor that was created by .</p>\n      "
    },
    "DeleteStreamProcessor": {
      "name": "DeleteStreamProcessor",
      "input": {
        "type": "structure",
        "members": {
          "Name": {
            "type": "string",
            "pattern": "[a-zA-Z0-9_.\\-]+",
            "zonbookDocumentation": "\n        <simpara>The name of the stream processor you want to delete.</simpara>\n      ",
            "documentation": "\n        <p>The name of the stream processor you want to delete.</p>\n      ",
            "required": true,
            "shape_name": "StreamProcessorName",
            "min_length": 1,
            "max_length": 128
          }
        },
        "shape_name": "DeleteStreamProcessorRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "DeleteStreamProcessorResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The collection specified in the request cannot be found.</simpara>\n      ",
          "documentation": "\n         <p>The collection specified in the request cannot be found.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n        <simpara/>\n      ",
          "documentation": "\n        <p/>\n      ",
          "shape_name": "ResourceInUseException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        }
      ],
      "documentation": "\n        <p>Deletes the stream processor identified by <code>Name</code>. You assign the value for <code>Name</code> when you create the stream processor with\n            . You might not be able to use the same name for a stream processor for a few seconds after calling <code>DeleteStreamProcessor</code>.</p>\n      "
    },
    "DescribeStreamProcessor": {
      "name": "DescribeStreamProcessor",
      "input": {
        "type": "structure",
        "members": {
          "Name": {
            "type": "string",
            "pattern": "[a-zA-Z0-9_.\\-]+",
            "zonbookDocumentation": "\n        <simpara>Name of the stream processor for which you want information.</simpara>\n      ",
            "documentation": "\n        <p>Name of the stream processor for which you want information.</p>\n      ",
            "required": true,
            "shape_name": "StreamProcessorName",
            "min_length": 1,
            "max_length": 128
          }
        },
        "shape_name": "DescribeStreamProcessorRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Name": {
            "type": "string",
            "pattern": "[a-zA-Z0-9_.\\-]+",
            "zonbookDocumentation": "\n        <simpara>Name of the stream processor. </simpara>\n      ",
            "documentation": "\n        <p>Name of the stream processor. </p>\n      ",
            "shape_name": "StreamProcessorName",
            "min_length": 1,
            "max_length": 128
          },
          "StreamProcessorArn": {
            "type": "string",
            "pattern": "(^arn:[a-z\\d-]+:rekognition:[a-z\\d-]+:\\d{12}:streamprocessor\\/.+$)",
            "zonbookDocumentation": "\n        <simpara>ARN of the stream processor.</simpara>\n      ",
            "documentation": "\n        <p>ARN of the stream processor.</p>\n      ",
            "shape_name": "StreamProcessorArn"
          },
          "Status": {
            "type": "string",
            "enum": [
              "STOPPED",
              "STARTING",
              "RUNNING",
              "FAILED",
              "STOPPING"
            ],
            "zonbookDocumentation": "\n        <simpara>Current status of the stream processor.</simpara>\n      ",
            "documentation": "\n        <p>Current status of the stream processor.</p>\n      ",
            "shape_name": "StreamProcessorStatus"
          },
          "StatusMessage": {
            "type": "string",
            "zonbookDocumentation": "\n        <para>Detailed status message about the stream processor.</para>\n      ",
            "documentation": "\n        <p>Detailed status message about the stream processor.</p>\n      ",
            "shape_name": "String"
          },
          "CreationTimestamp": {
            "type": "timestamp",
            "zonbookDocumentation": "\n        <simpara>Date and time the stream processor was created</simpara>\n      ",
            "documentation": "\n        <p>Date and time the stream processor was created</p>\n      ",
            "shape_name": "DateTime"
          },
          "LastUpdateTimestamp": {
            "type": "timestamp",
            "zonbookDocumentation": "\n        <para>The time, in Unix format, the stream processor was last updated. For example, when the stream\n        processor moves from a running state to a failed state, or when the user starts or stops the stream processor.</para>\n      ",
            "documentation": "\n        <p>The time, in Unix format, the stream processor was last updated. For example, when the stream\n        processor moves from a running state to a failed state, or when the user starts or stops the stream processor.</p>\n      ",
            "shape_name": "DateTime"
          },
          "Input": {
            "type": "structure",
            "members": {
              "KinesisVideoStream": {
                "type": "structure",
                "members": {
                  "Arn": {
                    "type": "string",
                    "pattern": "(^arn:([a-z\\d-]+):kinesisvideo:([a-z\\d-]+):\\d{12}:.+$)",
                    "zonbookDocumentation": "\n        <simpara>ARN of the Kinesis video stream stream that streams the source video.</simpara>\n      ",
                    "documentation": "\n        <p>ARN of the Kinesis video stream stream that streams the source video.</p>\n      ",
                    "shape_name": "KinesisVideoArn"
                  }
                },
                "zonbookDocumentation": "\n        <para>The Kinesis video stream input stream for the source streaming video.</para>\n      ",
                "documentation": "\n        <p>The Kinesis video stream input stream for the source streaming video.</p>\n      ",
                "shape_name": "KinesisVideoStream"
              }
            },
            "zonbookDocumentation": "\n        <simpara>Kinesis video stream that provides the source streaming video.</simpara>\n      ",
            "documentation": "\n        <p>Kinesis video stream that provides the source streaming video.</p>\n      ",
            "shape_name": "StreamProcessorInput"
          },
          "Output": {
            "type": "structure",
            "members": {
              "KinesisDataStream": {
                "type": "structure",
                "members": {
                  "Arn": {
                    "type": "string",
                    "pattern": "(^arn:([a-z\\d-]+):kinesis:([a-z\\d-]+):\\d{12}:.+$)",
                    "zonbookDocumentation": "\n        <simpara>ARN of the output Amazon Kinesis Data Streams stream.</simpara>\n      ",
                    "documentation": "\n        <p>ARN of the output Amazon Kinesis Data Streams stream.</p>\n      ",
                    "shape_name": "KinesisDataArn"
                  }
                },
                "zonbookDocumentation": "\n        <para>The Amazon Kinesis Data Streams stream to which the Amazon Rekognition stream processor streams the analysis results.</para>\n      ",
                "documentation": "\n        <p>The Amazon Kinesis Data Streams stream to which the Amazon Rekognition stream processor streams the analysis results.</p>\n      ",
                "shape_name": "KinesisDataStream"
              }
            },
            "zonbookDocumentation": "\n        <simpara>Kinesis data stream to which Amazon Rekognition Video puts the analysis results.</simpara>\n      ",
            "documentation": "\n        <p>Kinesis data stream to which Amazon Rekognition Video puts the analysis results.</p>\n      ",
            "shape_name": "StreamProcessorOutput"
          },
          "RoleArn": {
            "type": "string",
            "pattern": "arn:aws:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+",
            "zonbookDocumentation": "\n        <simpara>ARN of the IAM role that allows access to the stream processor.</simpara>\n      ",
            "documentation": "\n        <p>ARN of the IAM role that allows access to the stream processor.</p>\n      ",
            "shape_name": "RoleArn"
          },
          "Settings": {
            "type": "structure",
            "members": {
              "FaceSearch": {
                "type": "structure",
                "members": {
                  "CollectionId": {
                    "type": "string",
                    "pattern": "[a-zA-Z0-9_.\\-]+",
                    "zonbookDocumentation": "\n        <simpara>The ID of a collection that contains faces that you want to search for.</simpara>\n      ",
                    "documentation": "\n        <p>The ID of a collection that contains faces that you want to search for.</p>\n      ",
                    "shape_name": "CollectionId",
                    "min_length": 1,
                    "max_length": 255
                  },
                  "FaceMatchThreshold": {
                    "type": "float",
                    "zonbookDocumentation": "\n        <simpara>Minimum face match confidence score that must be met to return a result for a recognized face. Default is 70.\n        0 is the lowest confidence. 100 is the highest confidence.</simpara>\n      ",
                    "documentation": "\n        <p>Minimum face match confidence score that must be met to return a result for a recognized face. Default is 70.\n        0 is the lowest confidence. 100 is the highest confidence.</p>\n      ",
                    "shape_name": "Percent",
                    "min_length": 0,
                    "max_length": 100
                  }
                },
                "zonbookDocumentation": "\n        <simpara>Face search settings to use on a streaming video. </simpara>\n      ",
                "documentation": "\n        <p>Face search settings to use on a streaming video. </p>\n      ",
                "shape_name": "FaceSearchSettings"
              }
            },
            "zonbookDocumentation": "\n        <simpara>Face recognition input parameters that are being used by the stream processor.\n            Includes the collection to use for face recognition and the face\n            attributes to detect.</simpara>\n      ",
            "documentation": "\n        <p>Face recognition input parameters that are being used by the stream processor.\n            Includes the collection to use for face recognition and the face\n            attributes to detect.</p>\n      ",
            "shape_name": "StreamProcessorSettings"
          }
        },
        "shape_name": "DescribeStreamProcessorResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The collection specified in the request cannot be found.</simpara>\n      ",
          "documentation": "\n         <p>The collection specified in the request cannot be found.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        }
      ],
      "documentation": "\n        <p>Provides information about a stream processor created by . You can get information about the input and output streams, the input parameters for the face recognition being performed,\n            and the current status of the stream processor.</p>\n      "
    },
    "ListStreamProcessors": {
      "name": "ListStreamProcessors",
      "input": {
        "type": "structure",
        "members": {
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>If the previous response was incomplete (because there are more stream processors to retrieve), Amazon Rekognition Video\n            returns a pagination token in the response. You can use this pagination token to retrieve the next set of stream processors. </simpara>\n      ",
            "documentation": "\n        <p>If the previous response was incomplete (because there are more stream processors to retrieve), Amazon Rekognition Video\n            returns a pagination token in the response. You can use this pagination token to retrieve the next set of stream processors. </p>\n      ",
            "shape_name": "PaginationToken",
            "max_length": 255
          },
          "MaxResults": {
            "type": "integer",
            "zonbookDocumentation": "\n        <simpara>Maximum number of stream processors you want Amazon Rekognition Video to return in the response. The default is 1000. </simpara>\n      ",
            "documentation": "\n        <p>Maximum number of stream processors you want Amazon Rekognition Video to return in the response. The default is 1000. </p>\n      ",
            "shape_name": "MaxResults",
            "min_length": 1
          }
        },
        "shape_name": "ListStreamProcessorsRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>If the response is truncated, Amazon Rekognition Video returns this token that you can use in the subsequent\n            request to retrieve the next set of stream processors. </simpara>\n      ",
            "documentation": "\n        <p>If the response is truncated, Amazon Rekognition Video returns this token that you can use in the subsequent\n            request to retrieve the next set of stream processors. </p>\n      ",
            "shape_name": "PaginationToken",
            "max_length": 255
          },
          "StreamProcessors": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>List of stream processors that you have created.</simpara>\n      ",
            "documentation": "\n        <p>List of stream processors that you have created.</p>\n      ",
            "shape_name": "StreamProcessorList",
            "members": {
              "type": "structure",
              "members": {
                "Name": {
                  "type": "string",
                  "pattern": "[a-zA-Z0-9_.\\-]+",
                  "zonbookDocumentation": "\n        <simpara>Name of the Amazon Rekognition stream processor. </simpara>\n      ",
                  "documentation": "\n        <p>Name of the Amazon Rekognition stream processor. </p>\n      ",
                  "shape_name": "StreamProcessorName",
                  "min_length": 1,
                  "max_length": 128
                },
                "Status": {
                  "type": "string",
                  "enum": [
                    "STOPPED",
                    "STARTING",
                    "RUNNING",
                    "FAILED",
                    "STOPPING"
                  ],
                  "zonbookDocumentation": "\n        <simpara>Current status of the Amazon Rekognition stream processor.</simpara>\n      ",
                  "documentation": "\n        <p>Current status of the Amazon Rekognition stream processor.</p>\n      ",
                  "shape_name": "StreamProcessorStatus"
                }
              },
              "zonbookDocumentation": "\n        <simpara>An object that recognizes faces in a streaming video. An Amazon Rekognition stream processor is created by a call to <xref linkend=\"API_CreateStreamProcessor\"/>.  The request\n        parameters for <code>CreateStreamProcessor</code> describe the Kinesis video stream source for the streaming video, face recognition parameters, and where to stream the analysis resullts.\n\n        </simpara>\n      ",
              "documentation": "\n        <p>An object that recognizes faces in a streaming video. An Amazon Rekognition stream processor is created by a call to .  The request\n        parameters for <code>CreateStreamProcessor</code> describe the Kinesis video stream source for the streaming video, face recognition parameters, and where to stream the analysis resullts.\n\n        </p>\n      ",
              "shape_name": "StreamProcessor"
            }
          }
        },
        "shape_name": "ListStreamProcessorsResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You are not authorized to perform the action.</simpara>\n      ",
          "documentation": "\n         <p>You are not authorized to perform the action.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition experienced a service issue. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition experienced a service issue. Try your call again.</p>\n      ",
          "shape_name": "InternalServerError"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Rekognition is temporarily unable to process the request. Try your call again.</simpara>\n      ",
          "documentation": "\n         <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>\n      ",
          "shape_name": "ThrottlingException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</simpara>\n      ",
          "documentation": "\n         <p>Input parameter violated a constraint. Validate your parameter before calling the API\n      operation again.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Pagination token in the request is not valid.</simpara>\n      ",
          "documentation": "\n         <p>Pagination token in the request is not valid.</p>\n      ",
          "shape_name": "InvalidPaginationTokenException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeded your throughput limit. If you want to increase this\n      limit, contact Amazon Rekognition.</p>\n      ",
          "shape_name": "ProvisionedThroughputExceededException"
        }
      ],
      "documentation": "\n        <p>Gets a list of stream processors that you have created with . </p>\n      "
    }
  }
}
