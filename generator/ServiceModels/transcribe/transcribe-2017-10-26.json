{
  "version": "1.0",
  "endpoint_prefix": "transcribe",
  "type": "json",
  "json_version": "1.1",
  "signing_name": "transcribe",
  "signature_version": "v4",
  "service_full_name": "Amazon Transcribe Service",
  "service_id": "Transcribe",
  "uid": "transcribe-2017-10-26",
  "api_version": "2017-10-26",
  "target_prefix": "Transcribe",
  "documentation": "\n        <p>Operations and objects for transcribing speech to text.</p>\n      ",
  "operations": {
    "StartTranscriptionJob": {
      "name": "StartTranscriptionJob",
      "input": {
        "type": "structure",
        "members": {
          "TranscriptionJobName": {
            "type": "string",
            "pattern": "^[0-9a-zA-Z._-]+",
            "zonbookDocumentation": "\n        <simpara>The name of the job. You can't use the strings \".\" or \"..\" in the job name. The\n            name must be unique within an AWS account.</simpara>\n      ",
            "documentation": "\n        <p>The name of the job. You can't use the strings \".\" or \"..\" in the job name. The\n            name must be unique within an AWS account.</p>\n      ",
            "required": true,
            "shape_name": "TranscriptionJobName",
            "min_length": 1,
            "max_length": 200
          },
          "LanguageCode": {
            "type": "string",
            "enum": [
              "en-US",
              "es-US",
              "en-AU",
              "fr-CA",
              "en-UK"
            ],
            "zonbookDocumentation": "\n        <simpara>The language code for the language used in the input media file.</simpara>\n      ",
            "documentation": "\n        <p>The language code for the language used in the input media file.</p>\n      ",
            "required": true,
            "shape_name": "LanguageCode"
          },
          "MediaSampleRateHertz": {
            "type": "integer",
            "zonbookDocumentation": "\n        <simpara>The sample rate, in Hertz, of the audio track in the input media file. </simpara>\n      ",
            "documentation": "\n        <p>The sample rate, in Hertz, of the audio track in the input media file. </p>\n      ",
            "shape_name": "MediaSampleRateHertz",
            "min_length": 8000,
            "max_length": 48000
          },
          "MediaFormat": {
            "type": "string",
            "enum": [
              "mp3",
              "mp4",
              "wav",
              "flac"
            ],
            "zonbookDocumentation": "\n        <simpara>The format of the input media file.</simpara>\n      ",
            "documentation": "\n        <p>The format of the input media file.</p>\n      ",
            "required": true,
            "shape_name": "MediaFormat"
          },
          "Media": {
            "type": "structure",
            "members": {
              "MediaFileUri": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The S3 location of the input media file. The URI must be in the same region as the\n            API endpoint that you are calling. The general form is:</simpara>\n        <simpara>\n            <code>\n                https://&lt;aws-region&gt;.amazonaws.com/&lt;bucket-name&gt;/&lt;keyprefix&gt;/&lt;objectkey&gt;\n            </code>\n        </simpara>\n        <simpara>For example:</simpara>\n        <simpara>\n            <code>https://s3-us-east-1.amazonaws.com/examplebucket/example.mp4</code>\n         </simpara>\n        <simpara>\n            <code>https://s3-us-east-1.amazonaws.com/examplebucket/mediadocs/example.mp4</code>\n         </simpara>\n        <simpara>For more information about S3 object names, see <ulink url=\"http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#object-keys\">Object Keys</ulink> in the <emphasis>Amazon S3 Developer\n            Guide</emphasis>.</simpara>\n      ",
                "documentation": "\n        <p>The S3 location of the input media file. The URI must be in the same region as the\n            API endpoint that you are calling. The general form is:</p>\n        <p>\n            <code>\n                https://&lt;aws-region&gt;.amazonaws.com/&lt;bucket-name&gt;/&lt;keyprefix&gt;/&lt;objectkey&gt;\n            </code>\n        </p>\n        <p>For example:</p>\n        <p>\n            <code>https://s3-us-east-1.amazonaws.com/examplebucket/example.mp4</code>\n         </p>\n        <p>\n            <code>https://s3-us-east-1.amazonaws.com/examplebucket/mediadocs/example.mp4</code>\n         </p>\n        <p>For more information about S3 object names, see <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#object-keys\">Object Keys</a> in the <i>Amazon S3 Developer\n            Guide</i>.</p>\n      ",
                "shape_name": "Uri",
                "min_length": 1,
                "max_length": 2000
              }
            },
            "zonbookDocumentation": "\n        <simpara>An object that describes the input media for a transcription job.</simpara>\n      ",
            "documentation": "\n        <p>An object that describes the input media for a transcription job.</p>\n      ",
            "required": true,
            "shape_name": "Media"
          },
          "OutputBucketName": {
            "type": "string",
            "pattern": "[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9]",
            "zonbookDocumentation": "\n        <para>The location where the transcription is stored.</para>\n        <para>If you set the <code>OutputBucketName</code>, Amazon Transcribe puts the transcription in the\n            specified S3 bucket. When you call the <xref linkend=\"GetTranscriptionJob\"/> operation,\n            the operation returns this location in the <code>TranscriptFileUri</code> field. The S3\n            bucket must have permissions that allow Amazon Transcribe to put files in the bucket. For more\n            information, see <ulink url=\"https://docs.aws.amazon.com/transcribe/latest/dg/access-control-managing-permissions.html#auth-role-iam-user\">Permissions Required for IAM User Roles</ulink>.</para>\n        <para>If you don't set the <code>OutputBucketName</code>, Amazon Transcribe generates a pre-signed URL,\n            a shareable URL that provides secure access to your transcription, and returns it in the\n                <code>TranscriptFileUri</code> field. Use this URL to download the\n            transcription.</para>\n      ",
            "documentation": "\n        <p>The location where the transcription is stored.</p>\n        <p>If you set the <code>OutputBucketName</code>, Amazon Transcribe puts the transcription in the\n            specified S3 bucket. When you call the <a>GetTranscriptionJob</a> operation,\n            the operation returns this location in the <code>TranscriptFileUri</code> field. The S3\n            bucket must have permissions that allow Amazon Transcribe to put files in the bucket. For more\n            information, see <a href=\"https://docs.aws.amazon.com/transcribe/latest/dg/access-control-managing-permissions.html#auth-role-iam-user\">Permissions Required for IAM User Roles</a>.</p>\n        <p>If you don't set the <code>OutputBucketName</code>, Amazon Transcribe generates a pre-signed URL,\n            a shareable URL that provides secure access to your transcription, and returns it in the\n                <code>TranscriptFileUri</code> field. Use this URL to download the\n            transcription.</p>\n      ",
            "shape_name": "OutputBucketName"
          },
          "Settings": {
            "type": "structure",
            "members": {
              "VocabularyName": {
                "type": "string",
                "pattern": "^[0-9a-zA-Z._-]+",
                "zonbookDocumentation": "\n        <simpara>The name of a vocabulary to use when processing the transcription job.</simpara>\n      ",
                "documentation": "\n        <p>The name of a vocabulary to use when processing the transcription job.</p>\n      ",
                "shape_name": "VocabularyName",
                "min_length": 1,
                "max_length": 200
              },
              "ShowSpeakerLabels": {
                "type": "boolean",
                "zonbookDocumentation": "\n        <simpara>Determines whether the transcription job uses speaker recognition to identify\n            different speakers in the input audio. Speaker recognition labels individual speakers in\n            the audio file. If you set the <code>ShowSpeakerLabels</code> field to true, you must\n            also set the maximum number of speaker labels <code>MaxSpeakerLabels</code>\n            field.</simpara>\n        <para>You can't set both <code>ShowSpeakerLabels</code> and <code>ChannelIdentification</code>\n            in the same request. If you set both, your request returns a\n                <code>BadRequestException</code>.</para>\n      ",
                "documentation": "\n        <p>Determines whether the transcription job uses speaker recognition to identify\n            different speakers in the input audio. Speaker recognition labels individual speakers in\n            the audio file. If you set the <code>ShowSpeakerLabels</code> field to true, you must\n            also set the maximum number of speaker labels <code>MaxSpeakerLabels</code>\n            field.</p>\n        <p>You can't set both <code>ShowSpeakerLabels</code> and <code>ChannelIdentification</code>\n            in the same request. If you set both, your request returns a\n                <code>BadRequestException</code>.</p>\n      ",
                "shape_name": "Boolean"
              },
              "MaxSpeakerLabels": {
                "type": "integer",
                "zonbookDocumentation": "\n        <simpara>The maximum number of speakers to identify in the input audio. If there are more\n            speakers in the audio than this number, multiple speakers will be identified as a single\n            speaker. If you specify the <code>MaxSpeakerLabels</code> field, you must set the\n                <code>ShowSpeakerLabels</code> field to true.</simpara>\n      ",
                "documentation": "\n        <p>The maximum number of speakers to identify in the input audio. If there are more\n            speakers in the audio than this number, multiple speakers will be identified as a single\n            speaker. If you specify the <code>MaxSpeakerLabels</code> field, you must set the\n                <code>ShowSpeakerLabels</code> field to true.</p>\n      ",
                "shape_name": "MaxSpeakers",
                "min_length": 2,
                "max_length": 10
              },
              "ChannelIdentification": {
                "type": "boolean",
                "zonbookDocumentation": "\n        <para>Instructs Amazon Transcribe to process each audio channel separately and then merge the\n            transcription output of each channel into a single transcription. </para>\n        <para>Amazon Transcribe also produces a transcription of each item detected on an audio channel,\n            including the start time and end time of the item and alternative transcriptions of the\n            item including the confidence that Amazon Transcribe has in the transcription.</para>\n        <para>You can't set both <code>ShowSpeakerLabels</code> and\n                <code>ChannelIdentification</code> in the same request. If you set both, your\n            request returns a <code>BadRequestException</code>.</para>\n      ",
                "documentation": "\n        <p>Instructs Amazon Transcribe to process each audio channel separately and then merge the\n            transcription output of each channel into a single transcription. </p>\n        <p>Amazon Transcribe also produces a transcription of each item detected on an audio channel,\n            including the start time and end time of the item and alternative transcriptions of the\n            item including the confidence that Amazon Transcribe has in the transcription.</p>\n        <p>You can't set both <code>ShowSpeakerLabels</code> and\n                <code>ChannelIdentification</code> in the same request. If you set both, your\n            request returns a <code>BadRequestException</code>.</p>\n      ",
                "shape_name": "Boolean"
              }
            },
            "zonbookDocumentation": "\n        <simpara>A <code>Settings</code> object that provides optional settings for a transcription\n            job.</simpara>\n      ",
            "documentation": "\n        <p>A <code>Settings</code> object that provides optional settings for a transcription\n            job.</p>\n      ",
            "shape_name": "Settings"
          }
        },
        "shape_name": "StartTranscriptionJobRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "TranscriptionJob": {
            "type": "structure",
            "members": {
              "TranscriptionJobName": {
                "type": "string",
                "pattern": "^[0-9a-zA-Z._-]+",
                "zonbookDocumentation": "\n        <simpara>The name of the transcription job.</simpara>\n      ",
                "documentation": "\n        <p>The name of the transcription job.</p>\n      ",
                "shape_name": "TranscriptionJobName",
                "min_length": 1,
                "max_length": 200
              },
              "TranscriptionJobStatus": {
                "type": "string",
                "enum": [
                  "IN_PROGRESS",
                  "FAILED",
                  "COMPLETED"
                ],
                "zonbookDocumentation": "\n        <simpara>The status of the transcription job.</simpara>\n      ",
                "documentation": "\n        <p>The status of the transcription job.</p>\n      ",
                "shape_name": "TranscriptionJobStatus"
              },
              "LanguageCode": {
                "type": "string",
                "enum": [
                  "en-US",
                  "es-US",
                  "en-AU",
                  "fr-CA",
                  "en-UK"
                ],
                "zonbookDocumentation": "\n        <simpara>The language code for the input speech.</simpara>\n      ",
                "documentation": "\n        <p>The language code for the input speech.</p>\n      ",
                "shape_name": "LanguageCode"
              },
              "MediaSampleRateHertz": {
                "type": "integer",
                "zonbookDocumentation": "\n        <simpara>The sample rate, in Hertz, of the audio track in the input media file. </simpara>\n      ",
                "documentation": "\n        <p>The sample rate, in Hertz, of the audio track in the input media file. </p>\n      ",
                "shape_name": "MediaSampleRateHertz",
                "min_length": 8000,
                "max_length": 48000
              },
              "MediaFormat": {
                "type": "string",
                "enum": [
                  "mp3",
                  "mp4",
                  "wav",
                  "flac"
                ],
                "zonbookDocumentation": "\n        <simpara>The format of the input media file.</simpara>\n      ",
                "documentation": "\n        <p>The format of the input media file.</p>\n      ",
                "shape_name": "MediaFormat"
              },
              "Media": {
                "type": "structure",
                "members": {
                  "MediaFileUri": {
                    "type": "string",
                    "zonbookDocumentation": "\n        <simpara>The S3 location of the input media file. The URI must be in the same region as the\n            API endpoint that you are calling. The general form is:</simpara>\n        <simpara>\n            <code>\n                https://&lt;aws-region&gt;.amazonaws.com/&lt;bucket-name&gt;/&lt;keyprefix&gt;/&lt;objectkey&gt;\n            </code>\n        </simpara>\n        <simpara>For example:</simpara>\n        <simpara>\n            <code>https://s3-us-east-1.amazonaws.com/examplebucket/example.mp4</code>\n         </simpara>\n        <simpara>\n            <code>https://s3-us-east-1.amazonaws.com/examplebucket/mediadocs/example.mp4</code>\n         </simpara>\n        <simpara>For more information about S3 object names, see <ulink url=\"http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#object-keys\">Object Keys</ulink> in the <emphasis>Amazon S3 Developer\n            Guide</emphasis>.</simpara>\n      ",
                    "documentation": "\n        <p>The S3 location of the input media file. The URI must be in the same region as the\n            API endpoint that you are calling. The general form is:</p>\n        <p>\n            <code>\n                https://&lt;aws-region&gt;.amazonaws.com/&lt;bucket-name&gt;/&lt;keyprefix&gt;/&lt;objectkey&gt;\n            </code>\n        </p>\n        <p>For example:</p>\n        <p>\n            <code>https://s3-us-east-1.amazonaws.com/examplebucket/example.mp4</code>\n         </p>\n        <p>\n            <code>https://s3-us-east-1.amazonaws.com/examplebucket/mediadocs/example.mp4</code>\n         </p>\n        <p>For more information about S3 object names, see <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#object-keys\">Object Keys</a> in the <i>Amazon S3 Developer\n            Guide</i>.</p>\n      ",
                    "shape_name": "Uri",
                    "min_length": 1,
                    "max_length": 2000
                  }
                },
                "zonbookDocumentation": "\n        <simpara>An object that describes the input media for the transcription job.</simpara>\n      ",
                "documentation": "\n        <p>An object that describes the input media for the transcription job.</p>\n      ",
                "shape_name": "Media"
              },
              "Transcript": {
                "type": "structure",
                "members": {
                  "TranscriptFileUri": {
                    "type": "string",
                    "zonbookDocumentation": "\n        <simpara>The location where the transcription is stored.</simpara>\n        <simpara>Use this URI to access the transcription. If you specified an S3 bucket in the\n                <code>OutputBucketName</code> field when you created the job, this is the URI of\n            that bucket. If you chose to store the transcription in Amazon Transcribe, this is a shareable URL\n            that provides secure access to that location.</simpara>\n      ",
                    "documentation": "\n        <p>The location where the transcription is stored.</p>\n        <p>Use this URI to access the transcription. If you specified an S3 bucket in the\n                <code>OutputBucketName</code> field when you created the job, this is the URI of\n            that bucket. If you chose to store the transcription in Amazon Transcribe, this is a shareable URL\n            that provides secure access to that location.</p>\n      ",
                    "shape_name": "Uri",
                    "min_length": 1,
                    "max_length": 2000
                  }
                },
                "zonbookDocumentation": "\n        <simpara>An object that describes the output of the transcription job.</simpara>\n      ",
                "documentation": "\n        <p>An object that describes the output of the transcription job.</p>\n      ",
                "shape_name": "Transcript"
              },
              "CreationTime": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>A timestamp that shows when the job was created.</simpara>\n      ",
                "documentation": "\n        <p>A timestamp that shows when the job was created.</p>\n      ",
                "shape_name": "DateTime"
              },
              "CompletionTime": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>A timestamp that shows when the job was completed.</simpara>\n      ",
                "documentation": "\n        <p>A timestamp that shows when the job was completed.</p>\n      ",
                "shape_name": "DateTime"
              },
              "FailureReason": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>If the <code>TranscriptionJobStatus</code> field is <code>FAILED</code>, this field\n            contains information about why the job failed.</simpara>\n      ",
                "documentation": "\n        <p>If the <code>TranscriptionJobStatus</code> field is <code>FAILED</code>, this field\n            contains information about why the job failed.</p>\n      ",
                "shape_name": "FailureReason"
              },
              "Settings": {
                "type": "structure",
                "members": {
                  "VocabularyName": {
                    "type": "string",
                    "pattern": "^[0-9a-zA-Z._-]+",
                    "zonbookDocumentation": "\n        <simpara>The name of a vocabulary to use when processing the transcription job.</simpara>\n      ",
                    "documentation": "\n        <p>The name of a vocabulary to use when processing the transcription job.</p>\n      ",
                    "shape_name": "VocabularyName",
                    "min_length": 1,
                    "max_length": 200
                  },
                  "ShowSpeakerLabels": {
                    "type": "boolean",
                    "zonbookDocumentation": "\n        <simpara>Determines whether the transcription job uses speaker recognition to identify\n            different speakers in the input audio. Speaker recognition labels individual speakers in\n            the audio file. If you set the <code>ShowSpeakerLabels</code> field to true, you must\n            also set the maximum number of speaker labels <code>MaxSpeakerLabels</code>\n            field.</simpara>\n        <para>You can't set both <code>ShowSpeakerLabels</code> and <code>ChannelIdentification</code>\n            in the same request. If you set both, your request returns a\n                <code>BadRequestException</code>.</para>\n      ",
                    "documentation": "\n        <p>Determines whether the transcription job uses speaker recognition to identify\n            different speakers in the input audio. Speaker recognition labels individual speakers in\n            the audio file. If you set the <code>ShowSpeakerLabels</code> field to true, you must\n            also set the maximum number of speaker labels <code>MaxSpeakerLabels</code>\n            field.</p>\n        <p>You can't set both <code>ShowSpeakerLabels</code> and <code>ChannelIdentification</code>\n            in the same request. If you set both, your request returns a\n                <code>BadRequestException</code>.</p>\n      ",
                    "shape_name": "Boolean"
                  },
                  "MaxSpeakerLabels": {
                    "type": "integer",
                    "zonbookDocumentation": "\n        <simpara>The maximum number of speakers to identify in the input audio. If there are more\n            speakers in the audio than this number, multiple speakers will be identified as a single\n            speaker. If you specify the <code>MaxSpeakerLabels</code> field, you must set the\n                <code>ShowSpeakerLabels</code> field to true.</simpara>\n      ",
                    "documentation": "\n        <p>The maximum number of speakers to identify in the input audio. If there are more\n            speakers in the audio than this number, multiple speakers will be identified as a single\n            speaker. If you specify the <code>MaxSpeakerLabels</code> field, you must set the\n                <code>ShowSpeakerLabels</code> field to true.</p>\n      ",
                    "shape_name": "MaxSpeakers",
                    "min_length": 2,
                    "max_length": 10
                  },
                  "ChannelIdentification": {
                    "type": "boolean",
                    "zonbookDocumentation": "\n        <para>Instructs Amazon Transcribe to process each audio channel separately and then merge the\n            transcription output of each channel into a single transcription. </para>\n        <para>Amazon Transcribe also produces a transcription of each item detected on an audio channel,\n            including the start time and end time of the item and alternative transcriptions of the\n            item including the confidence that Amazon Transcribe has in the transcription.</para>\n        <para>You can't set both <code>ShowSpeakerLabels</code> and\n                <code>ChannelIdentification</code> in the same request. If you set both, your\n            request returns a <code>BadRequestException</code>.</para>\n      ",
                    "documentation": "\n        <p>Instructs Amazon Transcribe to process each audio channel separately and then merge the\n            transcription output of each channel into a single transcription. </p>\n        <p>Amazon Transcribe also produces a transcription of each item detected on an audio channel,\n            including the start time and end time of the item and alternative transcriptions of the\n            item including the confidence that Amazon Transcribe has in the transcription.</p>\n        <p>You can't set both <code>ShowSpeakerLabels</code> and\n                <code>ChannelIdentification</code> in the same request. If you set both, your\n            request returns a <code>BadRequestException</code>.</p>\n      ",
                    "shape_name": "Boolean"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>Optional settings for the transcription job. Use these settings to turn on speaker\n            recognition, to set the maximum number of speakers that should be identified and to\n            specify a custom vocabulary to use when processing the transcription job.</simpara>\n      ",
                "documentation": "\n        <p>Optional settings for the transcription job. Use these settings to turn on speaker\n            recognition, to set the maximum number of speakers that should be identified and to\n            specify a custom vocabulary to use when processing the transcription job.</p>\n      ",
                "shape_name": "Settings"
              }
            },
            "zonbookDocumentation": "\n        <simpara>An object containing details of the asynchronous transcription job.</simpara>\n      ",
            "documentation": "\n        <p>An object containing details of the asynchronous transcription job.</p>\n      ",
            "shape_name": "TranscriptionJob"
          }
        },
        "shape_name": "StartTranscriptionJobResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "FailureReason",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>Your request didn't pass one or more validation tests. For example, if the \n            transcription you're trying to delete doesn't exist of if it is in a non-terminal state (for \n            example, it's \"in progress\"). See the exception <code>Message</code> field for more\n            information.</simpara>\n      ",
          "documentation": "\n        <p>Your request didn't pass one or more validation tests. For example, if the \n            transcription you're trying to delete doesn't exist of if it is in a non-terminal state (for \n            example, it's \"in progress\"). See the exception <code>Message</code> field for more\n            information.</p>\n      ",
          "shape_name": "BadRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>Either you have sent too many requests or your input file is too long. Wait before\n            you resend your request, or use a smaller file and resend the request.</simpara>\n      ",
          "documentation": "\n        <p>Either you have sent too many requests or your input file is too long. Wait before\n            you resend your request, or use a smaller file and resend the request.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>There was an internal error. Check the error message and try your request\n            again.</simpara>\n      ",
          "documentation": "\n        <p>There was an internal error. Check the error message and try your request\n            again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>When you are using the <code>StartTranscriptionJob</code> operation, the\n                <code>JobName</code> field is a duplicate of a previously entered job name. Resend\n            your request with a different name.</simpara>\n        <simpara>When you are using the <code>UpdateVocabulary</code> operation, there are two jobs\n            running at the same time. Resend the second request later.</simpara>\n      ",
          "documentation": "\n        <p>When you are using the <code>StartTranscriptionJob</code> operation, the\n                <code>JobName</code> field is a duplicate of a previously entered job name. Resend\n            your request with a different name.</p>\n        <p>When you are using the <code>UpdateVocabulary</code> operation, there are two jobs\n            running at the same time. Resend the second request later.</p>\n      ",
          "shape_name": "ConflictException"
        }
      ],
      "documentation": "\n        <p>Starts an asynchronous job to transcribe speech to text. Note that en-AU, en-UK, \n            and fr-CA languages are in preview and are only available to whitelisted customers. </p>\n      "
    },
    "GetTranscriptionJob": {
      "name": "GetTranscriptionJob",
      "input": {
        "type": "structure",
        "members": {
          "TranscriptionJobName": {
            "type": "string",
            "pattern": "^[0-9a-zA-Z._-]+",
            "zonbookDocumentation": "\n        <simpara>The name of the job.</simpara>\n      ",
            "documentation": "\n        <p>The name of the job.</p>\n      ",
            "required": true,
            "shape_name": "TranscriptionJobName",
            "min_length": 1,
            "max_length": 200
          }
        },
        "shape_name": "GetTranscriptionJobRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "TranscriptionJob": {
            "type": "structure",
            "members": {
              "TranscriptionJobName": {
                "type": "string",
                "pattern": "^[0-9a-zA-Z._-]+",
                "zonbookDocumentation": "\n        <simpara>The name of the transcription job.</simpara>\n      ",
                "documentation": "\n        <p>The name of the transcription job.</p>\n      ",
                "shape_name": "TranscriptionJobName",
                "min_length": 1,
                "max_length": 200
              },
              "TranscriptionJobStatus": {
                "type": "string",
                "enum": [
                  "IN_PROGRESS",
                  "FAILED",
                  "COMPLETED"
                ],
                "zonbookDocumentation": "\n        <simpara>The status of the transcription job.</simpara>\n      ",
                "documentation": "\n        <p>The status of the transcription job.</p>\n      ",
                "shape_name": "TranscriptionJobStatus"
              },
              "LanguageCode": {
                "type": "string",
                "enum": [
                  "en-US",
                  "es-US",
                  "en-AU",
                  "fr-CA",
                  "en-UK"
                ],
                "zonbookDocumentation": "\n        <simpara>The language code for the input speech.</simpara>\n      ",
                "documentation": "\n        <p>The language code for the input speech.</p>\n      ",
                "shape_name": "LanguageCode"
              },
              "MediaSampleRateHertz": {
                "type": "integer",
                "zonbookDocumentation": "\n        <simpara>The sample rate, in Hertz, of the audio track in the input media file. </simpara>\n      ",
                "documentation": "\n        <p>The sample rate, in Hertz, of the audio track in the input media file. </p>\n      ",
                "shape_name": "MediaSampleRateHertz",
                "min_length": 8000,
                "max_length": 48000
              },
              "MediaFormat": {
                "type": "string",
                "enum": [
                  "mp3",
                  "mp4",
                  "wav",
                  "flac"
                ],
                "zonbookDocumentation": "\n        <simpara>The format of the input media file.</simpara>\n      ",
                "documentation": "\n        <p>The format of the input media file.</p>\n      ",
                "shape_name": "MediaFormat"
              },
              "Media": {
                "type": "structure",
                "members": {
                  "MediaFileUri": {
                    "type": "string",
                    "zonbookDocumentation": "\n        <simpara>The S3 location of the input media file. The URI must be in the same region as the\n            API endpoint that you are calling. The general form is:</simpara>\n        <simpara>\n            <code>\n                https://&lt;aws-region&gt;.amazonaws.com/&lt;bucket-name&gt;/&lt;keyprefix&gt;/&lt;objectkey&gt;\n            </code>\n        </simpara>\n        <simpara>For example:</simpara>\n        <simpara>\n            <code>https://s3-us-east-1.amazonaws.com/examplebucket/example.mp4</code>\n         </simpara>\n        <simpara>\n            <code>https://s3-us-east-1.amazonaws.com/examplebucket/mediadocs/example.mp4</code>\n         </simpara>\n        <simpara>For more information about S3 object names, see <ulink url=\"http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#object-keys\">Object Keys</ulink> in the <emphasis>Amazon S3 Developer\n            Guide</emphasis>.</simpara>\n      ",
                    "documentation": "\n        <p>The S3 location of the input media file. The URI must be in the same region as the\n            API endpoint that you are calling. The general form is:</p>\n        <p>\n            <code>\n                https://&lt;aws-region&gt;.amazonaws.com/&lt;bucket-name&gt;/&lt;keyprefix&gt;/&lt;objectkey&gt;\n            </code>\n        </p>\n        <p>For example:</p>\n        <p>\n            <code>https://s3-us-east-1.amazonaws.com/examplebucket/example.mp4</code>\n         </p>\n        <p>\n            <code>https://s3-us-east-1.amazonaws.com/examplebucket/mediadocs/example.mp4</code>\n         </p>\n        <p>For more information about S3 object names, see <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#object-keys\">Object Keys</a> in the <i>Amazon S3 Developer\n            Guide</i>.</p>\n      ",
                    "shape_name": "Uri",
                    "min_length": 1,
                    "max_length": 2000
                  }
                },
                "zonbookDocumentation": "\n        <simpara>An object that describes the input media for the transcription job.</simpara>\n      ",
                "documentation": "\n        <p>An object that describes the input media for the transcription job.</p>\n      ",
                "shape_name": "Media"
              },
              "Transcript": {
                "type": "structure",
                "members": {
                  "TranscriptFileUri": {
                    "type": "string",
                    "zonbookDocumentation": "\n        <simpara>The location where the transcription is stored.</simpara>\n        <simpara>Use this URI to access the transcription. If you specified an S3 bucket in the\n                <code>OutputBucketName</code> field when you created the job, this is the URI of\n            that bucket. If you chose to store the transcription in Amazon Transcribe, this is a shareable URL\n            that provides secure access to that location.</simpara>\n      ",
                    "documentation": "\n        <p>The location where the transcription is stored.</p>\n        <p>Use this URI to access the transcription. If you specified an S3 bucket in the\n                <code>OutputBucketName</code> field when you created the job, this is the URI of\n            that bucket. If you chose to store the transcription in Amazon Transcribe, this is a shareable URL\n            that provides secure access to that location.</p>\n      ",
                    "shape_name": "Uri",
                    "min_length": 1,
                    "max_length": 2000
                  }
                },
                "zonbookDocumentation": "\n        <simpara>An object that describes the output of the transcription job.</simpara>\n      ",
                "documentation": "\n        <p>An object that describes the output of the transcription job.</p>\n      ",
                "shape_name": "Transcript"
              },
              "CreationTime": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>A timestamp that shows when the job was created.</simpara>\n      ",
                "documentation": "\n        <p>A timestamp that shows when the job was created.</p>\n      ",
                "shape_name": "DateTime"
              },
              "CompletionTime": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>A timestamp that shows when the job was completed.</simpara>\n      ",
                "documentation": "\n        <p>A timestamp that shows when the job was completed.</p>\n      ",
                "shape_name": "DateTime"
              },
              "FailureReason": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>If the <code>TranscriptionJobStatus</code> field is <code>FAILED</code>, this field\n            contains information about why the job failed.</simpara>\n      ",
                "documentation": "\n        <p>If the <code>TranscriptionJobStatus</code> field is <code>FAILED</code>, this field\n            contains information about why the job failed.</p>\n      ",
                "shape_name": "FailureReason"
              },
              "Settings": {
                "type": "structure",
                "members": {
                  "VocabularyName": {
                    "type": "string",
                    "pattern": "^[0-9a-zA-Z._-]+",
                    "zonbookDocumentation": "\n        <simpara>The name of a vocabulary to use when processing the transcription job.</simpara>\n      ",
                    "documentation": "\n        <p>The name of a vocabulary to use when processing the transcription job.</p>\n      ",
                    "shape_name": "VocabularyName",
                    "min_length": 1,
                    "max_length": 200
                  },
                  "ShowSpeakerLabels": {
                    "type": "boolean",
                    "zonbookDocumentation": "\n        <simpara>Determines whether the transcription job uses speaker recognition to identify\n            different speakers in the input audio. Speaker recognition labels individual speakers in\n            the audio file. If you set the <code>ShowSpeakerLabels</code> field to true, you must\n            also set the maximum number of speaker labels <code>MaxSpeakerLabels</code>\n            field.</simpara>\n        <para>You can't set both <code>ShowSpeakerLabels</code> and <code>ChannelIdentification</code>\n            in the same request. If you set both, your request returns a\n                <code>BadRequestException</code>.</para>\n      ",
                    "documentation": "\n        <p>Determines whether the transcription job uses speaker recognition to identify\n            different speakers in the input audio. Speaker recognition labels individual speakers in\n            the audio file. If you set the <code>ShowSpeakerLabels</code> field to true, you must\n            also set the maximum number of speaker labels <code>MaxSpeakerLabels</code>\n            field.</p>\n        <p>You can't set both <code>ShowSpeakerLabels</code> and <code>ChannelIdentification</code>\n            in the same request. If you set both, your request returns a\n                <code>BadRequestException</code>.</p>\n      ",
                    "shape_name": "Boolean"
                  },
                  "MaxSpeakerLabels": {
                    "type": "integer",
                    "zonbookDocumentation": "\n        <simpara>The maximum number of speakers to identify in the input audio. If there are more\n            speakers in the audio than this number, multiple speakers will be identified as a single\n            speaker. If you specify the <code>MaxSpeakerLabels</code> field, you must set the\n                <code>ShowSpeakerLabels</code> field to true.</simpara>\n      ",
                    "documentation": "\n        <p>The maximum number of speakers to identify in the input audio. If there are more\n            speakers in the audio than this number, multiple speakers will be identified as a single\n            speaker. If you specify the <code>MaxSpeakerLabels</code> field, you must set the\n                <code>ShowSpeakerLabels</code> field to true.</p>\n      ",
                    "shape_name": "MaxSpeakers",
                    "min_length": 2,
                    "max_length": 10
                  },
                  "ChannelIdentification": {
                    "type": "boolean",
                    "zonbookDocumentation": "\n        <para>Instructs Amazon Transcribe to process each audio channel separately and then merge the\n            transcription output of each channel into a single transcription. </para>\n        <para>Amazon Transcribe also produces a transcription of each item detected on an audio channel,\n            including the start time and end time of the item and alternative transcriptions of the\n            item including the confidence that Amazon Transcribe has in the transcription.</para>\n        <para>You can't set both <code>ShowSpeakerLabels</code> and\n                <code>ChannelIdentification</code> in the same request. If you set both, your\n            request returns a <code>BadRequestException</code>.</para>\n      ",
                    "documentation": "\n        <p>Instructs Amazon Transcribe to process each audio channel separately and then merge the\n            transcription output of each channel into a single transcription. </p>\n        <p>Amazon Transcribe also produces a transcription of each item detected on an audio channel,\n            including the start time and end time of the item and alternative transcriptions of the\n            item including the confidence that Amazon Transcribe has in the transcription.</p>\n        <p>You can't set both <code>ShowSpeakerLabels</code> and\n                <code>ChannelIdentification</code> in the same request. If you set both, your\n            request returns a <code>BadRequestException</code>.</p>\n      ",
                    "shape_name": "Boolean"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>Optional settings for the transcription job. Use these settings to turn on speaker\n            recognition, to set the maximum number of speakers that should be identified and to\n            specify a custom vocabulary to use when processing the transcription job.</simpara>\n      ",
                "documentation": "\n        <p>Optional settings for the transcription job. Use these settings to turn on speaker\n            recognition, to set the maximum number of speakers that should be identified and to\n            specify a custom vocabulary to use when processing the transcription job.</p>\n      ",
                "shape_name": "Settings"
              }
            },
            "zonbookDocumentation": "\n        <simpara>An object that contains the results of the transcription job.</simpara>\n      ",
            "documentation": "\n        <p>An object that contains the results of the transcription job.</p>\n      ",
            "shape_name": "TranscriptionJob"
          }
        },
        "shape_name": "GetTranscriptionJobResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "FailureReason",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>Your request didn't pass one or more validation tests. For example, if the \n            transcription you're trying to delete doesn't exist of if it is in a non-terminal state (for \n            example, it's \"in progress\"). See the exception <code>Message</code> field for more\n            information.</simpara>\n      ",
          "documentation": "\n        <p>Your request didn't pass one or more validation tests. For example, if the \n            transcription you're trying to delete doesn't exist of if it is in a non-terminal state (for \n            example, it's \"in progress\"). See the exception <code>Message</code> field for more\n            information.</p>\n      ",
          "shape_name": "BadRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>Either you have sent too many requests or your input file is too long. Wait before\n            you resend your request, or use a smaller file and resend the request.</simpara>\n      ",
          "documentation": "\n        <p>Either you have sent too many requests or your input file is too long. Wait before\n            you resend your request, or use a smaller file and resend the request.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>There was an internal error. Check the error message and try your request\n            again.</simpara>\n      ",
          "documentation": "\n        <p>There was an internal error. Check the error message and try your request\n            again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>We can't find the requested resource. Check the name and try your request\n            again.</simpara>\n      ",
          "documentation": "\n        <p>We can't find the requested resource. Check the name and try your request\n            again.</p>\n      ",
          "shape_name": "NotFoundException"
        }
      ],
      "documentation": "\n        <p>Returns information about a transcription job. To see the status of the job, check\n            the <code>TranscriptionJobStatus</code> field. If the status is <code>COMPLETED</code>,\n            the job is finished and you can find the results at the location specified in the\n                <code>TranscriptionFileUri</code> field.</p>\n      "
    },
    "ListTranscriptionJobs": {
      "name": "ListTranscriptionJobs",
      "input": {
        "type": "structure",
        "members": {
          "Status": {
            "type": "string",
            "enum": [
              "IN_PROGRESS",
              "FAILED",
              "COMPLETED"
            ],
            "zonbookDocumentation": "\n        <simpara>When specified, returns only transcription jobs with the specified\n            status.</simpara>\n      ",
            "documentation": "\n        <p>When specified, returns only transcription jobs with the specified\n            status.</p>\n      ",
            "shape_name": "TranscriptionJobStatus"
          },
          "JobNameContains": {
            "type": "string",
            "pattern": "^[0-9a-zA-Z._-]+",
            "zonbookDocumentation": "\n        <simpara>When specified, the jobs returned in the list are limited to jobs whose name\n            contains the specified string.</simpara>\n      ",
            "documentation": "\n        <p>When specified, the jobs returned in the list are limited to jobs whose name\n            contains the specified string.</p>\n      ",
            "shape_name": "TranscriptionJobName",
            "min_length": 1,
            "max_length": 200
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>If the result of the previous request to <code>ListTranscriptionJobs</code> was\n            truncated, include the <code>NextToken</code> to fetch the next set of jobs.</simpara>\n      ",
            "documentation": "\n        <p>If the result of the previous request to <code>ListTranscriptionJobs</code> was\n            truncated, include the <code>NextToken</code> to fetch the next set of jobs.</p>\n      ",
            "shape_name": "NextToken",
            "max_length": 8192
          },
          "MaxResults": {
            "type": "integer",
            "zonbookDocumentation": "\n        <simpara>The maximum number of jobs to return in the response. If there are fewer results in\n            the list, this response contains only the actual results.</simpara>\n      ",
            "documentation": "\n        <p>The maximum number of jobs to return in the response. If there are fewer results in\n            the list, this response contains only the actual results.</p>\n      ",
            "shape_name": "MaxResults",
            "min_length": 1,
            "max_length": 100
          }
        },
        "shape_name": "ListTranscriptionJobsRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Status": {
            "type": "string",
            "enum": [
              "IN_PROGRESS",
              "FAILED",
              "COMPLETED"
            ],
            "zonbookDocumentation": "\n        <simpara>The requested status of the jobs returned.</simpara>\n      ",
            "documentation": "\n        <p>The requested status of the jobs returned.</p>\n      ",
            "shape_name": "TranscriptionJobStatus"
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The <code>ListTranscriptionJobs</code> operation returns a page of jobs at a time.\n            The maximum size of the page is set by the <code>MaxResults</code> parameter. If there\n            are more jobs in the list than the page size, Amazon Transcribe returns the <code>NextPage</code>\n            token. Include the token in the next request to the <code>ListTranscriptionJobs</code>\n            operation to return in the next page of jobs.</simpara>\n      ",
            "documentation": "\n        <p>The <code>ListTranscriptionJobs</code> operation returns a page of jobs at a time.\n            The maximum size of the page is set by the <code>MaxResults</code> parameter. If there\n            are more jobs in the list than the page size, Amazon Transcribe returns the <code>NextPage</code>\n            token. Include the token in the next request to the <code>ListTranscriptionJobs</code>\n            operation to return in the next page of jobs.</p>\n      ",
            "shape_name": "NextToken",
            "max_length": 8192
          },
          "TranscriptionJobSummaries": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>A list of objects containing summary information for a transcription job.</simpara>\n      ",
            "documentation": "\n        <p>A list of objects containing summary information for a transcription job.</p>\n      ",
            "shape_name": "TranscriptionJobSummaries",
            "members": {
              "type": "structure",
              "members": {
                "TranscriptionJobName": {
                  "type": "string",
                  "pattern": "^[0-9a-zA-Z._-]+",
                  "zonbookDocumentation": "\n        <simpara>The name of the transcription job.</simpara>\n      ",
                  "documentation": "\n        <p>The name of the transcription job.</p>\n      ",
                  "shape_name": "TranscriptionJobName",
                  "min_length": 1,
                  "max_length": 200
                },
                "CreationTime": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n        <simpara>A timestamp that shows when the job was created.</simpara>\n      ",
                  "documentation": "\n        <p>A timestamp that shows when the job was created.</p>\n      ",
                  "shape_name": "DateTime"
                },
                "CompletionTime": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n        <simpara>A timestamp that shows when the job was completed.</simpara>\n      ",
                  "documentation": "\n        <p>A timestamp that shows when the job was completed.</p>\n      ",
                  "shape_name": "DateTime"
                },
                "LanguageCode": {
                  "type": "string",
                  "enum": [
                    "en-US",
                    "es-US",
                    "en-AU",
                    "fr-CA",
                    "en-UK"
                  ],
                  "zonbookDocumentation": "\n        <simpara>The language code for the input speech.</simpara>\n      ",
                  "documentation": "\n        <p>The language code for the input speech.</p>\n      ",
                  "shape_name": "LanguageCode"
                },
                "TranscriptionJobStatus": {
                  "type": "string",
                  "enum": [
                    "IN_PROGRESS",
                    "FAILED",
                    "COMPLETED"
                  ],
                  "zonbookDocumentation": "\n        <simpara>The status of the transcription job. When the status is <code>COMPLETED</code>, use\n            the <code>GetTranscriptionJob</code> operation to get the results of the\n            transcription.</simpara>\n      ",
                  "documentation": "\n        <p>The status of the transcription job. When the status is <code>COMPLETED</code>, use\n            the <code>GetTranscriptionJob</code> operation to get the results of the\n            transcription.</p>\n      ",
                  "shape_name": "TranscriptionJobStatus"
                },
                "FailureReason": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>If the <code>TranscriptionJobStatus</code> field is <code>FAILED</code>, a\n            description of the error.</simpara>\n      ",
                  "documentation": "\n        <p>If the <code>TranscriptionJobStatus</code> field is <code>FAILED</code>, a\n            description of the error.</p>\n      ",
                  "shape_name": "FailureReason"
                },
                "OutputLocationType": {
                  "type": "string",
                  "enum": [
                    "CUSTOMER_BUCKET",
                    "SERVICE_BUCKET"
                  ],
                  "zonbookDocumentation": "\n        <para>Indicates the location of the output of the transcription job.</para>\n        <para>If the value is <code>CUSTOMER_BUCKET</code> then the location is the S3 bucket\n            specified in the <code>outputBucketName</code> field when the transcription job was\n            started with the <code>StartTranscriptionJob</code> operation.</para>\n        <para>If the value is <code>SERVICE_BUCKET</code> then the output is stored by Amazon Transcribe and can\n            be retrieved using the URI in the <code>GetTranscriptionJob</code> response's\n                <code>TranscriptFileUri</code> field.</para>\n      ",
                  "documentation": "\n        <p>Indicates the location of the output of the transcription job.</p>\n        <p>If the value is <code>CUSTOMER_BUCKET</code> then the location is the S3 bucket\n            specified in the <code>outputBucketName</code> field when the transcription job was\n            started with the <code>StartTranscriptionJob</code> operation.</p>\n        <p>If the value is <code>SERVICE_BUCKET</code> then the output is stored by Amazon Transcribe and can\n            be retrieved using the URI in the <code>GetTranscriptionJob</code> response's\n                <code>TranscriptFileUri</code> field.</p>\n      ",
                  "shape_name": "OutputLocationType"
                }
              },
              "zonbookDocumentation": "\n        <simpara>Provides a summary of information about a transcription job. Note that en-AU, en-UK, \n            and fr-CA languages are in preview and are only available to whitelisted customers.</simpara>\n      ",
              "documentation": "\n        <p>Provides a summary of information about a transcription job. Note that en-AU, en-UK, \n            and fr-CA languages are in preview and are only available to whitelisted customers.</p>\n      ",
              "shape_name": "TranscriptionJobSummary"
            }
          }
        },
        "shape_name": "ListTranscriptionJobsResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "FailureReason",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>Your request didn't pass one or more validation tests. For example, if the \n            transcription you're trying to delete doesn't exist of if it is in a non-terminal state (for \n            example, it's \"in progress\"). See the exception <code>Message</code> field for more\n            information.</simpara>\n      ",
          "documentation": "\n        <p>Your request didn't pass one or more validation tests. For example, if the \n            transcription you're trying to delete doesn't exist of if it is in a non-terminal state (for \n            example, it's \"in progress\"). See the exception <code>Message</code> field for more\n            information.</p>\n      ",
          "shape_name": "BadRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>Either you have sent too many requests or your input file is too long. Wait before\n            you resend your request, or use a smaller file and resend the request.</simpara>\n      ",
          "documentation": "\n        <p>Either you have sent too many requests or your input file is too long. Wait before\n            you resend your request, or use a smaller file and resend the request.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>There was an internal error. Check the error message and try your request\n            again.</simpara>\n      ",
          "documentation": "\n        <p>There was an internal error. Check the error message and try your request\n            again.</p>\n      ",
          "shape_name": "InternalFailureException"
        }
      ],
      "documentation": "\n        <p>Lists transcription jobs with the specified status.</p>\n      "
    },
    "CreateVocabulary": {
      "name": "CreateVocabulary",
      "input": {
        "type": "structure",
        "members": {
          "VocabularyName": {
            "type": "string",
            "pattern": "^[0-9a-zA-Z._-]+",
            "zonbookDocumentation": "\n        <simpara>The name of the vocabulary. The name must be unique within an AWS account. The name\n            is case-sensitive.</simpara>\n      ",
            "documentation": "\n        <p>The name of the vocabulary. The name must be unique within an AWS account. The name\n            is case-sensitive.</p>\n      ",
            "required": true,
            "shape_name": "VocabularyName",
            "min_length": 1,
            "max_length": 200
          },
          "LanguageCode": {
            "type": "string",
            "enum": [
              "en-US",
              "es-US",
              "en-AU",
              "fr-CA",
              "en-UK"
            ],
            "zonbookDocumentation": "\n        <simpara>The language code of the vocabulary entries.</simpara>\n      ",
            "documentation": "\n        <p>The language code of the vocabulary entries.</p>\n      ",
            "required": true,
            "shape_name": "LanguageCode"
          },
          "Phrases": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>An array of strings that contains the vocabulary entries. </simpara>\n      ",
            "documentation": "\n        <p>An array of strings that contains the vocabulary entries. </p>\n      ",
            "required": true,
            "shape_name": "Phrases",
            "members": {
              "type": "string",
              "shape_name": "Phrase",
              "documentation": null,
              "min_length": 0,
              "max_length": 256
            }
          }
        },
        "shape_name": "CreateVocabularyRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "VocabularyName": {
            "type": "string",
            "pattern": "^[0-9a-zA-Z._-]+",
            "zonbookDocumentation": "\n        <simpara>The name of the vocabulary.</simpara>\n      ",
            "documentation": "\n        <p>The name of the vocabulary.</p>\n      ",
            "shape_name": "VocabularyName",
            "min_length": 1,
            "max_length": 200
          },
          "LanguageCode": {
            "type": "string",
            "enum": [
              "en-US",
              "es-US",
              "en-AU",
              "fr-CA",
              "en-UK"
            ],
            "zonbookDocumentation": "\n        <simpara>The language code of the vocabulary entries.</simpara>\n      ",
            "documentation": "\n        <p>The language code of the vocabulary entries.</p>\n      ",
            "shape_name": "LanguageCode"
          },
          "VocabularyState": {
            "type": "string",
            "enum": [
              "PENDING",
              "READY",
              "FAILED"
            ],
            "zonbookDocumentation": "\n        <simpara>The processing state of the vocabulary. When the <code>VocabularyState</code> field\n            contains <code>READY</code> the vocabulary is ready to be used in a\n                <code>StartTranscriptionJob</code> request.</simpara>\n      ",
            "documentation": "\n        <p>The processing state of the vocabulary. When the <code>VocabularyState</code> field\n            contains <code>READY</code> the vocabulary is ready to be used in a\n                <code>StartTranscriptionJob</code> request.</p>\n      ",
            "shape_name": "VocabularyState"
          },
          "LastModifiedTime": {
            "type": "timestamp",
            "zonbookDocumentation": "\n        <para>The date and time that the vocabulary was created.</para>\n      ",
            "documentation": "\n        <p>The date and time that the vocabulary was created.</p>\n      ",
            "shape_name": "DateTime"
          },
          "FailureReason": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>If the <code>VocabularyState</code> field is <code>FAILED</code>, this field\n            contains information about why the job failed.</simpara>\n      ",
            "documentation": "\n        <p>If the <code>VocabularyState</code> field is <code>FAILED</code>, this field\n            contains information about why the job failed.</p>\n      ",
            "shape_name": "FailureReason"
          }
        },
        "shape_name": "CreateVocabularyResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "FailureReason",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>Your request didn't pass one or more validation tests. For example, if the \n            transcription you're trying to delete doesn't exist of if it is in a non-terminal state (for \n            example, it's \"in progress\"). See the exception <code>Message</code> field for more\n            information.</simpara>\n      ",
          "documentation": "\n        <p>Your request didn't pass one or more validation tests. For example, if the \n            transcription you're trying to delete doesn't exist of if it is in a non-terminal state (for \n            example, it's \"in progress\"). See the exception <code>Message</code> field for more\n            information.</p>\n      ",
          "shape_name": "BadRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>Either you have sent too many requests or your input file is too long. Wait before\n            you resend your request, or use a smaller file and resend the request.</simpara>\n      ",
          "documentation": "\n        <p>Either you have sent too many requests or your input file is too long. Wait before\n            you resend your request, or use a smaller file and resend the request.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>There was an internal error. Check the error message and try your request\n            again.</simpara>\n      ",
          "documentation": "\n        <p>There was an internal error. Check the error message and try your request\n            again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>When you are using the <code>StartTranscriptionJob</code> operation, the\n                <code>JobName</code> field is a duplicate of a previously entered job name. Resend\n            your request with a different name.</simpara>\n        <simpara>When you are using the <code>UpdateVocabulary</code> operation, there are two jobs\n            running at the same time. Resend the second request later.</simpara>\n      ",
          "documentation": "\n        <p>When you are using the <code>StartTranscriptionJob</code> operation, the\n                <code>JobName</code> field is a duplicate of a previously entered job name. Resend\n            your request with a different name.</p>\n        <p>When you are using the <code>UpdateVocabulary</code> operation, there are two jobs\n            running at the same time. Resend the second request later.</p>\n      ",
          "shape_name": "ConflictException"
        }
      ],
      "documentation": "\n        <p>Creates a new custom vocabulary that you can use to change the way Amazon Transcribe handles\n            transcription of an audio file. Note that vocabularies for en-AU, en-UK, and fr-CA languages that are in\n            preview are not available. In the console, the vocabulary section will be greyed-out and SDK \n            will return error message. </p>\n      "
    },
    "UpdateVocabulary": {
      "name": "UpdateVocabulary",
      "input": {
        "type": "structure",
        "members": {
          "VocabularyName": {
            "type": "string",
            "pattern": "^[0-9a-zA-Z._-]+",
            "zonbookDocumentation": "\n        <simpara>The name of the vocabulary to update. The name is case-sensitive.</simpara>\n      ",
            "documentation": "\n        <p>The name of the vocabulary to update. The name is case-sensitive.</p>\n      ",
            "required": true,
            "shape_name": "VocabularyName",
            "min_length": 1,
            "max_length": 200
          },
          "LanguageCode": {
            "type": "string",
            "enum": [
              "en-US",
              "es-US",
              "en-AU",
              "fr-CA",
              "en-UK"
            ],
            "zonbookDocumentation": "\n        <simpara>The language code of the vocabulary entries.</simpara>\n      ",
            "documentation": "\n        <p>The language code of the vocabulary entries.</p>\n      ",
            "required": true,
            "shape_name": "LanguageCode"
          },
          "Phrases": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>An array of strings containing the vocabulary entries.</simpara>\n      ",
            "documentation": "\n        <p>An array of strings containing the vocabulary entries.</p>\n      ",
            "required": true,
            "shape_name": "Phrases",
            "members": {
              "type": "string",
              "shape_name": "Phrase",
              "documentation": null,
              "min_length": 0,
              "max_length": 256
            }
          }
        },
        "shape_name": "UpdateVocabularyRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "VocabularyName": {
            "type": "string",
            "pattern": "^[0-9a-zA-Z._-]+",
            "zonbookDocumentation": "\n        <simpara>The name of the vocabulary that was updated.</simpara>\n      ",
            "documentation": "\n        <p>The name of the vocabulary that was updated.</p>\n      ",
            "shape_name": "VocabularyName",
            "min_length": 1,
            "max_length": 200
          },
          "LanguageCode": {
            "type": "string",
            "enum": [
              "en-US",
              "es-US",
              "en-AU",
              "fr-CA",
              "en-UK"
            ],
            "zonbookDocumentation": "\n        <simpara>The language code of the vocabulary entries.</simpara>\n      ",
            "documentation": "\n        <p>The language code of the vocabulary entries.</p>\n      ",
            "shape_name": "LanguageCode"
          },
          "LastModifiedTime": {
            "type": "timestamp",
            "zonbookDocumentation": "\n        <para>The date and time that the vocabulary was updated.</para>\n      ",
            "documentation": "\n        <p>The date and time that the vocabulary was updated.</p>\n      ",
            "shape_name": "DateTime"
          },
          "VocabularyState": {
            "type": "string",
            "enum": [
              "PENDING",
              "READY",
              "FAILED"
            ],
            "zonbookDocumentation": "\n        <simpara>The processing state of the vocabulary. When the <code>VocabularyState</code> field\n            contains <code>READY</code> the vocabulary is ready to be used in a\n                <code>StartTranscriptionJob</code> request.</simpara>\n      ",
            "documentation": "\n        <p>The processing state of the vocabulary. When the <code>VocabularyState</code> field\n            contains <code>READY</code> the vocabulary is ready to be used in a\n                <code>StartTranscriptionJob</code> request.</p>\n      ",
            "shape_name": "VocabularyState"
          }
        },
        "shape_name": "UpdateVocabularyResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "FailureReason",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>Your request didn't pass one or more validation tests. For example, if the \n            transcription you're trying to delete doesn't exist of if it is in a non-terminal state (for \n            example, it's \"in progress\"). See the exception <code>Message</code> field for more\n            information.</simpara>\n      ",
          "documentation": "\n        <p>Your request didn't pass one or more validation tests. For example, if the \n            transcription you're trying to delete doesn't exist of if it is in a non-terminal state (for \n            example, it's \"in progress\"). See the exception <code>Message</code> field for more\n            information.</p>\n      ",
          "shape_name": "BadRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>Either you have sent too many requests or your input file is too long. Wait before\n            you resend your request, or use a smaller file and resend the request.</simpara>\n      ",
          "documentation": "\n        <p>Either you have sent too many requests or your input file is too long. Wait before\n            you resend your request, or use a smaller file and resend the request.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>There was an internal error. Check the error message and try your request\n            again.</simpara>\n      ",
          "documentation": "\n        <p>There was an internal error. Check the error message and try your request\n            again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>We can't find the requested resource. Check the name and try your request\n            again.</simpara>\n      ",
          "documentation": "\n        <p>We can't find the requested resource. Check the name and try your request\n            again.</p>\n      ",
          "shape_name": "NotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>When you are using the <code>StartTranscriptionJob</code> operation, the\n                <code>JobName</code> field is a duplicate of a previously entered job name. Resend\n            your request with a different name.</simpara>\n        <simpara>When you are using the <code>UpdateVocabulary</code> operation, there are two jobs\n            running at the same time. Resend the second request later.</simpara>\n      ",
          "documentation": "\n        <p>When you are using the <code>StartTranscriptionJob</code> operation, the\n                <code>JobName</code> field is a duplicate of a previously entered job name. Resend\n            your request with a different name.</p>\n        <p>When you are using the <code>UpdateVocabulary</code> operation, there are two jobs\n            running at the same time. Resend the second request later.</p>\n      ",
          "shape_name": "ConflictException"
        }
      ],
      "documentation": "\n        <p>Updates an existing vocabulary with new values. The <code>UpdateVocabulary</code>\n            operation overwrites all of the existing information with the values that you provide in\n            the request. Note that vocabularies for en-AU, en-UK, and fr-CA languages that are in\n            preview are not available. In the console, the vocabulary section will be greyed-out and SDK \n            will return error message.</p>\n      "
    },
    "GetVocabulary": {
      "name": "GetVocabulary",
      "input": {
        "type": "structure",
        "members": {
          "VocabularyName": {
            "type": "string",
            "pattern": "^[0-9a-zA-Z._-]+",
            "zonbookDocumentation": "\n        <simpara>The name of the vocabulary to return information about. The name is\n            case-sensitive.</simpara>\n      ",
            "documentation": "\n        <p>The name of the vocabulary to return information about. The name is\n            case-sensitive.</p>\n      ",
            "required": true,
            "shape_name": "VocabularyName",
            "min_length": 1,
            "max_length": 200
          }
        },
        "shape_name": "GetVocabularyRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "VocabularyName": {
            "type": "string",
            "pattern": "^[0-9a-zA-Z._-]+",
            "zonbookDocumentation": "\n        <simpara>The name of the vocabulary to return.</simpara>\n      ",
            "documentation": "\n        <p>The name of the vocabulary to return.</p>\n      ",
            "shape_name": "VocabularyName",
            "min_length": 1,
            "max_length": 200
          },
          "LanguageCode": {
            "type": "string",
            "enum": [
              "en-US",
              "es-US",
              "en-AU",
              "fr-CA",
              "en-UK"
            ],
            "zonbookDocumentation": "\n        <simpara>The language code of the vocabulary entries.</simpara>\n      ",
            "documentation": "\n        <p>The language code of the vocabulary entries.</p>\n      ",
            "shape_name": "LanguageCode"
          },
          "VocabularyState": {
            "type": "string",
            "enum": [
              "PENDING",
              "READY",
              "FAILED"
            ],
            "zonbookDocumentation": "\n        <simpara>The processing state of the vocabulary.</simpara>\n      ",
            "documentation": "\n        <p>The processing state of the vocabulary.</p>\n      ",
            "shape_name": "VocabularyState"
          },
          "LastModifiedTime": {
            "type": "timestamp",
            "zonbookDocumentation": "\n        <para>The date and time that the vocabulary was last modified.</para>\n      ",
            "documentation": "\n        <p>The date and time that the vocabulary was last modified.</p>\n      ",
            "shape_name": "DateTime"
          },
          "FailureReason": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>If the <code>VocabularyState</code> field is <code>FAILED</code>, this field\n            contains information about why the job failed.</simpara>\n      ",
            "documentation": "\n        <p>If the <code>VocabularyState</code> field is <code>FAILED</code>, this field\n            contains information about why the job failed.</p>\n      ",
            "shape_name": "FailureReason"
          },
          "DownloadUri": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The S3 location where the vocabulary is stored. Use this URI to get the contents of\n            the vocabulary. The URI is available for a limited time.</simpara>\n      ",
            "documentation": "\n        <p>The S3 location where the vocabulary is stored. Use this URI to get the contents of\n            the vocabulary. The URI is available for a limited time.</p>\n      ",
            "shape_name": "Uri",
            "min_length": 1,
            "max_length": 2000
          }
        },
        "shape_name": "GetVocabularyResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>We can't find the requested resource. Check the name and try your request\n            again.</simpara>\n      ",
          "documentation": "\n        <p>We can't find the requested resource. Check the name and try your request\n            again.</p>\n      ",
          "shape_name": "NotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>Either you have sent too many requests or your input file is too long. Wait before\n            you resend your request, or use a smaller file and resend the request.</simpara>\n      ",
          "documentation": "\n        <p>Either you have sent too many requests or your input file is too long. Wait before\n            you resend your request, or use a smaller file and resend the request.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>There was an internal error. Check the error message and try your request\n            again.</simpara>\n      ",
          "documentation": "\n        <p>There was an internal error. Check the error message and try your request\n            again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "FailureReason",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>Your request didn't pass one or more validation tests. For example, if the \n            transcription you're trying to delete doesn't exist of if it is in a non-terminal state (for \n            example, it's \"in progress\"). See the exception <code>Message</code> field for more\n            information.</simpara>\n      ",
          "documentation": "\n        <p>Your request didn't pass one or more validation tests. For example, if the \n            transcription you're trying to delete doesn't exist of if it is in a non-terminal state (for \n            example, it's \"in progress\"). See the exception <code>Message</code> field for more\n            information.</p>\n      ",
          "shape_name": "BadRequestException"
        }
      ],
      "documentation": "\n        <p>Gets information about a vocabulary. Note that vocabularies for en-AU, en-UK, and fr-CA languages that are in\n            preview are not available. In the console, the vocabulary section will be greyed-out and SDK \n            will return error message.</p>\n      "
    },
    "ListVocabularies": {
      "name": "ListVocabularies",
      "input": {
        "type": "structure",
        "members": {
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>If the result of the previous request to <code>ListVocabularies</code> was\n            truncated, include the <code>NextToken</code> to fetch the next set of jobs.</simpara>\n      ",
            "documentation": "\n        <p>If the result of the previous request to <code>ListVocabularies</code> was\n            truncated, include the <code>NextToken</code> to fetch the next set of jobs.</p>\n      ",
            "shape_name": "NextToken",
            "max_length": 8192
          },
          "MaxResults": {
            "type": "integer",
            "zonbookDocumentation": "\n        <simpara>The maximum number of vocabularies to return in the response. If there are fewer\n            results in the list, this response contains only the actual results.</simpara>\n      ",
            "documentation": "\n        <p>The maximum number of vocabularies to return in the response. If there are fewer\n            results in the list, this response contains only the actual results.</p>\n      ",
            "shape_name": "MaxResults",
            "min_length": 1,
            "max_length": 100
          },
          "StateEquals": {
            "type": "string",
            "enum": [
              "PENDING",
              "READY",
              "FAILED"
            ],
            "zonbookDocumentation": "\n        <simpara>When specified, only returns vocabularies with the <code>VocabularyState</code>\n            field equal to the specified state.</simpara>\n      ",
            "documentation": "\n        <p>When specified, only returns vocabularies with the <code>VocabularyState</code>\n            field equal to the specified state.</p>\n      ",
            "shape_name": "VocabularyState"
          },
          "NameContains": {
            "type": "string",
            "pattern": "^[0-9a-zA-Z._-]+",
            "zonbookDocumentation": "\n        <simpara>When specified, the vocabularies returned in the list are limited to vocabularies\n            whose name contains the specified string. The search is case-insensitive,\n                <code>ListVocabularies</code> will return both \"vocabularyname\" and \"VocabularyName\"\n            in the response list.</simpara>\n      ",
            "documentation": "\n        <p>When specified, the vocabularies returned in the list are limited to vocabularies\n            whose name contains the specified string. The search is case-insensitive,\n                <code>ListVocabularies</code> will return both \"vocabularyname\" and \"VocabularyName\"\n            in the response list.</p>\n      ",
            "shape_name": "VocabularyName",
            "min_length": 1,
            "max_length": 200
          }
        },
        "shape_name": "ListVocabulariesRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Status": {
            "type": "string",
            "enum": [
              "IN_PROGRESS",
              "FAILED",
              "COMPLETED"
            ],
            "zonbookDocumentation": "\n        <simpara>The requested vocabulary state.</simpara>\n      ",
            "documentation": "\n        <p>The requested vocabulary state.</p>\n      ",
            "shape_name": "TranscriptionJobStatus"
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The <code>ListVocabularies</code> operation returns a page of vocabularies at a\n            time. The maximum size of the page is set by the <code>MaxResults</code> parameter. If\n            there are more jobs in the list than the page size, Amazon Transcribe returns the\n                <code>NextPage</code> token. Include the token in the next request to the\n                <code>ListVocabularies</code> operation to return in the next page of\n            jobs.</simpara>\n      ",
            "documentation": "\n        <p>The <code>ListVocabularies</code> operation returns a page of vocabularies at a\n            time. The maximum size of the page is set by the <code>MaxResults</code> parameter. If\n            there are more jobs in the list than the page size, Amazon Transcribe returns the\n                <code>NextPage</code> token. Include the token in the next request to the\n                <code>ListVocabularies</code> operation to return in the next page of\n            jobs.</p>\n      ",
            "shape_name": "NextToken",
            "max_length": 8192
          },
          "Vocabularies": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>A list of objects that describe the vocabularies that match the search criteria in\n            the request.</simpara>\n      ",
            "documentation": "\n        <p>A list of objects that describe the vocabularies that match the search criteria in\n            the request.</p>\n      ",
            "shape_name": "Vocabularies",
            "members": {
              "type": "structure",
              "members": {
                "VocabularyName": {
                  "type": "string",
                  "pattern": "^[0-9a-zA-Z._-]+",
                  "zonbookDocumentation": "\n        <simpara>The name of the vocabulary.</simpara>\n      ",
                  "documentation": "\n        <p>The name of the vocabulary.</p>\n      ",
                  "shape_name": "VocabularyName",
                  "min_length": 1,
                  "max_length": 200
                },
                "LanguageCode": {
                  "type": "string",
                  "enum": [
                    "en-US",
                    "es-US",
                    "en-AU",
                    "fr-CA",
                    "en-UK"
                  ],
                  "zonbookDocumentation": "\n        <simpara>The language code of the vocabulary entries.</simpara>\n      ",
                  "documentation": "\n        <p>The language code of the vocabulary entries.</p>\n      ",
                  "shape_name": "LanguageCode"
                },
                "LastModifiedTime": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n        <para>The date and time that the vocabulary was last modified.</para>\n      ",
                  "documentation": "\n        <p>The date and time that the vocabulary was last modified.</p>\n      ",
                  "shape_name": "DateTime"
                },
                "VocabularyState": {
                  "type": "string",
                  "enum": [
                    "PENDING",
                    "READY",
                    "FAILED"
                  ],
                  "zonbookDocumentation": "\n        <simpara>The processing state of the vocabulary. If the state is <code>READY</code> you can\n            use the vocabulary in a <code>StartTranscriptionJob</code> request.</simpara>\n      ",
                  "documentation": "\n        <p>The processing state of the vocabulary. If the state is <code>READY</code> you can\n            use the vocabulary in a <code>StartTranscriptionJob</code> request.</p>\n      ",
                  "shape_name": "VocabularyState"
                }
              },
              "zonbookDocumentation": "\n        <simpara>Provides information about a custom vocabulary. Note that vocabularies for en-AU, en-UK, and fr-CA languages that are in\n            preview are not available. In the console, the vocabulary section will be greyed-out and SDK \n            will return error message.</simpara>\n      ",
              "documentation": "\n        <p>Provides information about a custom vocabulary. Note that vocabularies for en-AU, en-UK, and fr-CA languages that are in\n            preview are not available. In the console, the vocabulary section will be greyed-out and SDK \n            will return error message.</p>\n      ",
              "shape_name": "VocabularyInfo"
            }
          }
        },
        "shape_name": "ListVocabulariesResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "FailureReason",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>Your request didn't pass one or more validation tests. For example, if the \n            transcription you're trying to delete doesn't exist of if it is in a non-terminal state (for \n            example, it's \"in progress\"). See the exception <code>Message</code> field for more\n            information.</simpara>\n      ",
          "documentation": "\n        <p>Your request didn't pass one or more validation tests. For example, if the \n            transcription you're trying to delete doesn't exist of if it is in a non-terminal state (for \n            example, it's \"in progress\"). See the exception <code>Message</code> field for more\n            information.</p>\n      ",
          "shape_name": "BadRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>Either you have sent too many requests or your input file is too long. Wait before\n            you resend your request, or use a smaller file and resend the request.</simpara>\n      ",
          "documentation": "\n        <p>Either you have sent too many requests or your input file is too long. Wait before\n            you resend your request, or use a smaller file and resend the request.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>There was an internal error. Check the error message and try your request\n            again.</simpara>\n      ",
          "documentation": "\n        <p>There was an internal error. Check the error message and try your request\n            again.</p>\n      ",
          "shape_name": "InternalFailureException"
        }
      ],
      "documentation": "\n        <p>Returns a list of vocabularies that match the specified criteria. If no criteria\n            are specified, returns the entire list of vocabularies.</p>\n      "
    },
    "DeleteVocabulary": {
      "name": "DeleteVocabulary",
      "input": {
        "type": "structure",
        "members": {
          "VocabularyName": {
            "type": "string",
            "pattern": "^[0-9a-zA-Z._-]+",
            "zonbookDocumentation": "\n        <simpara>The name of the vocabulary to delete. </simpara>\n      ",
            "documentation": "\n        <p>The name of the vocabulary to delete. </p>\n      ",
            "required": true,
            "shape_name": "VocabularyName",
            "min_length": 1,
            "max_length": 200
          }
        },
        "shape_name": "DeleteVocabularyRequest",
        "documentation": null
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>We can't find the requested resource. Check the name and try your request\n            again.</simpara>\n      ",
          "documentation": "\n        <p>We can't find the requested resource. Check the name and try your request\n            again.</p>\n      ",
          "shape_name": "NotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>Either you have sent too many requests or your input file is too long. Wait before\n            you resend your request, or use a smaller file and resend the request.</simpara>\n      ",
          "documentation": "\n        <p>Either you have sent too many requests or your input file is too long. Wait before\n            you resend your request, or use a smaller file and resend the request.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "FailureReason",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>Your request didn't pass one or more validation tests. For example, if the \n            transcription you're trying to delete doesn't exist of if it is in a non-terminal state (for \n            example, it's \"in progress\"). See the exception <code>Message</code> field for more\n            information.</simpara>\n      ",
          "documentation": "\n        <p>Your request didn't pass one or more validation tests. For example, if the \n            transcription you're trying to delete doesn't exist of if it is in a non-terminal state (for \n            example, it's \"in progress\"). See the exception <code>Message</code> field for more\n            information.</p>\n      ",
          "shape_name": "BadRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>There was an internal error. Check the error message and try your request\n            again.</simpara>\n      ",
          "documentation": "\n        <p>There was an internal error. Check the error message and try your request\n            again.</p>\n      ",
          "shape_name": "InternalFailureException"
        }
      ],
      "documentation": "\n        <p>Deletes a vocabulary from Amazon Transcribe. </p>\n      "
    },
    "DeleteTranscriptionJob": {
      "name": "DeleteTranscriptionJob",
      "input": {
        "type": "structure",
        "members": {
          "TranscriptionJobName": {
            "type": "string",
            "pattern": "^[0-9a-zA-Z._-]+",
            "zonbookDocumentation": "\n        <para>The name of the transcription job to be deleted.</para>\n      ",
            "documentation": "\n        <p>The name of the transcription job to be deleted.</p>\n      ",
            "required": true,
            "shape_name": "TranscriptionJobName",
            "min_length": 1,
            "max_length": 200
          }
        },
        "shape_name": "DeleteTranscriptionJobRequest",
        "documentation": null
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>Either you have sent too many requests or your input file is too long. Wait before\n            you resend your request, or use a smaller file and resend the request.</simpara>\n      ",
          "documentation": "\n        <p>Either you have sent too many requests or your input file is too long. Wait before\n            you resend your request, or use a smaller file and resend the request.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "FailureReason",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>Your request didn't pass one or more validation tests. For example, if the \n            transcription you're trying to delete doesn't exist of if it is in a non-terminal state (for \n            example, it's \"in progress\"). See the exception <code>Message</code> field for more\n            information.</simpara>\n      ",
          "documentation": "\n        <p>Your request didn't pass one or more validation tests. For example, if the \n            transcription you're trying to delete doesn't exist of if it is in a non-terminal state (for \n            example, it's \"in progress\"). See the exception <code>Message</code> field for more\n            information.</p>\n      ",
          "shape_name": "BadRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>There was an internal error. Check the error message and try your request\n            again.</simpara>\n      ",
          "documentation": "\n        <p>There was an internal error. Check the error message and try your request\n            again.</p>\n      ",
          "shape_name": "InternalFailureException"
        }
      ],
      "documentation": "\n        <p>Deletes a previously submitted transcription job as well as any other generated results such as the transcription, models, and so on.</p>\n      "
    }
  }
}
