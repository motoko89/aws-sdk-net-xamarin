{
  "version": "1.0",
  "type": "json",
  "signing_name": "comprehend",
  "endpoint_prefix": "comprehend",
  "json_version": "1.1",
  "signature_version": "v4",
  "service_full_name": "Amazon Comprehend",
  "service_id": "Comprehend",
  "uid": "comprehend-2017-11-27",
  "api_version": "2017-11-27",
  "target_prefix": "Comprehend_20171127",
  "documentation": "\n         <p>Amazon Comprehend is an AWS service for gaining insight into the content of documents. Use these\n      actions to determine the topics contained in your documents, the topics they discuss, the\n      predominant sentiment expressed in them, the predominant language used, and more.</p>\n      ",
  "operations": {
    "DetectDominantLanguage": {
      "name": "DetectDominantLanguage",
      "input": {
        "type": "structure",
        "members": {
          "Text": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A UTF-8 text string. Each string should contain at least 20 characters and must contain\n      fewer that 5,000 bytes of UTF-8 encoded characters.</simpara>\n      ",
            "documentation": "\n         <p>A UTF-8 text string. Each string should contain at least 20 characters and must contain\n      fewer that 5,000 bytes of UTF-8 encoded characters.</p>\n      ",
            "required": true,
            "shape_name": "String",
            "min_length": 1
          }
        },
        "shape_name": "DetectDominantLanguageRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Languages": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>The languages that Amazon Comprehend detected in the input text. For each language, the response\n      returns the RFC 5646 language code and the level of confidence that Amazon Comprehend has in the accuracy\n      of its inference. For more information about RFC 5646, see <ulink url=\"https://tools.ietf.org/html/rfc5646\">Tags for Identifying Languages</ulink> on the\n        <emphasis>IETF Tools</emphasis> web site.</simpara>\n      ",
            "documentation": "\n         <p>The languages that Amazon Comprehend detected in the input text. For each language, the response\n      returns the RFC 5646 language code and the level of confidence that Amazon Comprehend has in the accuracy\n      of its inference. For more information about RFC 5646, see <a href=\"https://tools.ietf.org/html/rfc5646\">Tags for Identifying Languages</a> on the\n        <i>IETF Tools</i> web site.</p>\n      ",
            "shape_name": "ListOfDominantLanguages",
            "members": {
              "type": "structure",
              "members": {
                "LanguageCode": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The RFC 5646 language code for the dominant language. For more information about RFC\n      5646, see <ulink url=\"https://tools.ietf.org/html/rfc5646\">Tags for Identifying\n        Languages</ulink> on the <emphasis>IETF Tools</emphasis> web site.</simpara>\n      ",
                  "documentation": "\n         <p>The RFC 5646 language code for the dominant language. For more information about RFC\n      5646, see <a href=\"https://tools.ietf.org/html/rfc5646\">Tags for Identifying\n        Languages</a> on the <i>IETF Tools</i> web site.</p>\n      ",
                  "shape_name": "String",
                  "min_length": 1
                },
                "Score": {
                  "type": "float",
                  "zonbookDocumentation": "\n         <simpara>The level of confidence that Amazon Comprehend has in the accuracy of the detection.</simpara>\n      ",
                  "documentation": "\n         <p>The level of confidence that Amazon Comprehend has in the accuracy of the detection.</p>\n      ",
                  "shape_name": "Float"
                }
              },
              "zonbookDocumentation": "\n         <simpara>Returns the code for the dominant language in the input text and the level of\n      confidence that Amazon Comprehend has in the accuracy of the detection.</simpara>\n      ",
              "documentation": "\n         <p>Returns the code for the dominant language in the input text and the level of\n      confidence that Amazon Comprehend has in the accuracy of the detection.</p>\n      ",
              "shape_name": "DominantLanguage"
            }
          }
        },
        "shape_name": "DetectDominantLanguageResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The size of the input text exceeds the limit. Use a smaller document.</simpara>\n      ",
          "documentation": "\n         <p>The size of the input text exceeds the limit. Use a smaller document.</p>\n      ",
          "shape_name": "TextSizeLimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": "\n         <p>Determines the dominant language of the input text. For a list of languages that Amazon Comprehend\n      can detect, see <a href=\"http://docs.aws.amazon.com/comprehend/latest/dg/how-languages.html\">Amazon Comprehend Supported Languages</a>. </p>\n    \n      "
    },
    "DetectSentiment": {
      "name": "DetectSentiment",
      "input": {
        "type": "structure",
        "members": {
          "Text": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8 encoded\n      characters.</simpara>\n      ",
            "documentation": "\n         <p>A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8 encoded\n      characters.</p>\n      ",
            "required": true,
            "shape_name": "String",
            "min_length": 1
          },
          "LanguageCode": {
            "type": "string",
            "enum": [
              "en",
              "es",
              "fr",
              "de",
              "it",
              "pt"
            ],
            "zonbookDocumentation": "\n         <simpara>The language of the input documents. You can specify English (\"en\") or Spanish (\"es\").\n      All documents must be in the same language.</simpara>\n      ",
            "documentation": "\n         <p>The language of the input documents. You can specify English (\"en\") or Spanish (\"es\").\n      All documents must be in the same language.</p>\n      ",
            "required": true,
            "shape_name": "LanguageCode"
          }
        },
        "shape_name": "DetectSentimentRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Sentiment": {
            "type": "string",
            "enum": [
              "POSITIVE",
              "NEGATIVE",
              "NEUTRAL",
              "MIXED"
            ],
            "zonbookDocumentation": "\n         <simpara>The inferred sentiment that Amazon Comprehend has the highest level of confidence in.</simpara>\n      ",
            "documentation": "\n         <p>The inferred sentiment that Amazon Comprehend has the highest level of confidence in.</p>\n      ",
            "shape_name": "SentimentType"
          },
          "SentimentScore": {
            "type": "structure",
            "members": {
              "Positive": {
                "type": "float",
                "zonbookDocumentation": "\n         <simpara>The level of confidence that Amazon Comprehend has in the accuracy of its detection of the\n        <code>POSITIVE</code> sentiment.</simpara>\n      ",
                "documentation": "\n         <p>The level of confidence that Amazon Comprehend has in the accuracy of its detection of the\n        <code>POSITIVE</code> sentiment.</p>\n      ",
                "shape_name": "Float"
              },
              "Negative": {
                "type": "float",
                "zonbookDocumentation": "\n         <simpara>The level of confidence that Amazon Comprehend has in the accuracy of its detection of the\n        <code>NEGATIVE</code> sentiment.</simpara>\n      ",
                "documentation": "\n         <p>The level of confidence that Amazon Comprehend has in the accuracy of its detection of the\n        <code>NEGATIVE</code> sentiment.</p>\n      ",
                "shape_name": "Float"
              },
              "Neutral": {
                "type": "float",
                "zonbookDocumentation": "\n         <simpara>The level of confidence that Amazon Comprehend has in the accuracy of its detection of the\n        <code>NEUTRAL</code> sentiment.</simpara>\n      ",
                "documentation": "\n         <p>The level of confidence that Amazon Comprehend has in the accuracy of its detection of the\n        <code>NEUTRAL</code> sentiment.</p>\n      ",
                "shape_name": "Float"
              },
              "Mixed": {
                "type": "float",
                "zonbookDocumentation": "\n         <simpara>The level of confidence that Amazon Comprehend has in the accuracy of its detection of the\n        <code>MIXED</code> sentiment.</simpara>\n      ",
                "documentation": "\n         <p>The level of confidence that Amazon Comprehend has in the accuracy of its detection of the\n        <code>MIXED</code> sentiment.</p>\n      ",
                "shape_name": "Float"
              }
            },
            "zonbookDocumentation": "\n         <simpara>An object that lists the sentiments, and their corresponding confidence\n      levels.</simpara>\n      ",
            "documentation": "\n         <p>An object that lists the sentiments, and their corresponding confidence\n      levels.</p>\n      ",
            "shape_name": "SentimentScore"
          }
        },
        "shape_name": "DetectSentimentResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The size of the input text exceeds the limit. Use a smaller document.</simpara>\n      ",
          "documentation": "\n         <p>The size of the input text exceeds the limit. Use a smaller document.</p>\n      ",
          "shape_name": "TextSizeLimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Comprehend can't process the language of the input text. For all APIs except\n        <code>DetectDominantLanguage</code>, Amazon Comprehend accepts only English or Spanish text. For the\n        <code>DetectDominantLanguage</code> API, Amazon Comprehend detects 100 languages. For a list of\n      languages, see <xref linkend=\"how-languages\"/>\n         </simpara>\n      ",
          "documentation": "\n         <p>Amazon Comprehend can't process the language of the input text. For all APIs except\n        <code>DetectDominantLanguage</code>, Amazon Comprehend accepts only English or Spanish text. For the\n        <code>DetectDominantLanguage</code> API, Amazon Comprehend detects 100 languages. For a list of\n      languages, see <a>how-languages</a>\n         </p>\n      ",
          "shape_name": "UnsupportedLanguageException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": "\n         <p>Inspects text and returns an inference of the prevailing sentiment\n        (<code>POSITIVE</code>, <code>NEUTRAL</code>, <code>MIXED</code>, or <code>NEGATIVE</code>). </p>\n    \n      "
    },
    "DetectEntities": {
      "name": "DetectEntities",
      "input": {
        "type": "structure",
        "members": {
          "Text": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8 encoded\n      characters.</simpara>\n      ",
            "documentation": "\n         <p>A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8 encoded\n      characters.</p>\n      ",
            "required": true,
            "shape_name": "String",
            "min_length": 1
          },
          "LanguageCode": {
            "type": "string",
            "enum": [
              "en",
              "es",
              "fr",
              "de",
              "it",
              "pt"
            ],
            "zonbookDocumentation": "\n         <simpara>The language of the input documents. You can specify English (\"en\") or Spanish (\"es\").\n      All documents must be in the same language.</simpara>\n      ",
            "documentation": "\n         <p>The language of the input documents. You can specify English (\"en\") or Spanish (\"es\").\n      All documents must be in the same language.</p>\n      ",
            "required": true,
            "shape_name": "LanguageCode"
          }
        },
        "shape_name": "DetectEntitiesRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Entities": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A collection of entities identified in the input text. For each entity, the response\n      provides the entity text, entity type, where the entity text begins and ends, and the level of\n      confidence that Amazon Comprehend has in the detection. For a list of entity types, see <xref linkend=\"how-entities\"/>. </simpara>\n      ",
            "documentation": "\n         <p>A collection of entities identified in the input text. For each entity, the response\n      provides the entity text, entity type, where the entity text begins and ends, and the level of\n      confidence that Amazon Comprehend has in the detection. For a list of entity types, see <a>how-entities</a>. </p>\n      ",
            "shape_name": "ListOfEntities",
            "members": {
              "type": "structure",
              "members": {
                "Score": {
                  "type": "float",
                  "zonbookDocumentation": "\n         <simpara>The level of confidence that Amazon Comprehend has in the accuracy of the detection.</simpara>\n      ",
                  "documentation": "\n         <p>The level of confidence that Amazon Comprehend has in the accuracy of the detection.</p>\n      ",
                  "shape_name": "Float"
                },
                "Type": {
                  "type": "string",
                  "enum": [
                    "PERSON",
                    "LOCATION",
                    "ORGANIZATION",
                    "COMMERCIAL_ITEM",
                    "EVENT",
                    "DATE",
                    "QUANTITY",
                    "TITLE",
                    "OTHER"
                  ],
                  "zonbookDocumentation": "\n         <simpara>The entity's type.</simpara>\n      ",
                  "documentation": "\n         <p>The entity's type.</p>\n      ",
                  "shape_name": "EntityType"
                },
                "Text": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The text of the entity.</simpara>\n      ",
                  "documentation": "\n         <p>The text of the entity.</p>\n      ",
                  "shape_name": "String",
                  "min_length": 1
                },
                "BeginOffset": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <simpara>A character offset in the input text that shows where the entity begins (the first\n      character is at position 0). The offset returns the position of each UTF-8 code point in the\n      string. A <emphasis>code point</emphasis> is the abstract character from a particular\n      graphical representation. For example, a multi-byte UTF-8 character maps to a single code\n      point.</simpara>\n      ",
                  "documentation": "\n         <p>A character offset in the input text that shows where the entity begins (the first\n      character is at position 0). The offset returns the position of each UTF-8 code point in the\n      string. A <i>code point</i> is the abstract character from a particular\n      graphical representation. For example, a multi-byte UTF-8 character maps to a single code\n      point.</p>\n      ",
                  "shape_name": "Integer"
                },
                "EndOffset": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <simpara>A character offset in the input text that shows where the entity ends. The offset\n      returns the position of each UTF-8 code point in the string. A <emphasis>code point</emphasis>\n      is the abstract character from a particular graphical representation. For example, a\n      multi-byte UTF-8 character maps to a single code point. </simpara>\n      ",
                  "documentation": "\n         <p>A character offset in the input text that shows where the entity ends. The offset\n      returns the position of each UTF-8 code point in the string. A <i>code point</i>\n      is the abstract character from a particular graphical representation. For example, a\n      multi-byte UTF-8 character maps to a single code point. </p>\n      ",
                  "shape_name": "Integer"
                }
              },
              "zonbookDocumentation": "\n         <simpara>Provides information about an entity. </simpara>\n         <simpara> </simpara>\n      ",
              "documentation": "\n         <p>Provides information about an entity. </p>\n         <p> </p>\n      ",
              "shape_name": "Entity"
            }
          }
        },
        "shape_name": "DetectEntitiesResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The size of the input text exceeds the limit. Use a smaller document.</simpara>\n      ",
          "documentation": "\n         <p>The size of the input text exceeds the limit. Use a smaller document.</p>\n      ",
          "shape_name": "TextSizeLimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Comprehend can't process the language of the input text. For all APIs except\n        <code>DetectDominantLanguage</code>, Amazon Comprehend accepts only English or Spanish text. For the\n        <code>DetectDominantLanguage</code> API, Amazon Comprehend detects 100 languages. For a list of\n      languages, see <xref linkend=\"how-languages\"/>\n         </simpara>\n      ",
          "documentation": "\n         <p>Amazon Comprehend can't process the language of the input text. For all APIs except\n        <code>DetectDominantLanguage</code>, Amazon Comprehend accepts only English or Spanish text. For the\n        <code>DetectDominantLanguage</code> API, Amazon Comprehend detects 100 languages. For a list of\n      languages, see <a>how-languages</a>\n         </p>\n      ",
          "shape_name": "UnsupportedLanguageException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": "\n         <p>Inspects text for named entities, and returns information about them. For more\n      information, about named entities, see <a>how-entities</a>. </p>\n    \n      "
    },
    "DetectKeyPhrases": {
      "name": "DetectKeyPhrases",
      "input": {
        "type": "structure",
        "members": {
          "Text": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8 encoded\n      characters.</simpara>\n      ",
            "documentation": "\n         <p>A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8 encoded\n      characters.</p>\n      ",
            "required": true,
            "shape_name": "String",
            "min_length": 1
          },
          "LanguageCode": {
            "type": "string",
            "enum": [
              "en",
              "es",
              "fr",
              "de",
              "it",
              "pt"
            ],
            "zonbookDocumentation": "\n         <simpara>The language of the input documents. You can specify English (\"en\") or Spanish (\"es\").\n      All documents must be in the same language.</simpara>\n      ",
            "documentation": "\n         <p>The language of the input documents. You can specify English (\"en\") or Spanish (\"es\").\n      All documents must be in the same language.</p>\n      ",
            "required": true,
            "shape_name": "LanguageCode"
          }
        },
        "shape_name": "DetectKeyPhrasesRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "KeyPhrases": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A collection of key phrases that Amazon Comprehend identified in the input text. For each key\n      phrase, the response provides the text of the key phrase, where the key phrase begins and\n      ends, and the level of confidence that Amazon Comprehend has in the accuracy of the detection. </simpara>\n      ",
            "documentation": "\n         <p>A collection of key phrases that Amazon Comprehend identified in the input text. For each key\n      phrase, the response provides the text of the key phrase, where the key phrase begins and\n      ends, and the level of confidence that Amazon Comprehend has in the accuracy of the detection. </p>\n      ",
            "shape_name": "ListOfKeyPhrases",
            "members": {
              "type": "structure",
              "members": {
                "Score": {
                  "type": "float",
                  "zonbookDocumentation": "\n         <simpara>The level of confidence that Amazon Comprehend has in the accuracy of the detection.</simpara>\n      ",
                  "documentation": "\n         <p>The level of confidence that Amazon Comprehend has in the accuracy of the detection.</p>\n      ",
                  "shape_name": "Float"
                },
                "Text": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The text of a key noun phrase.</simpara>\n      ",
                  "documentation": "\n         <p>The text of a key noun phrase.</p>\n      ",
                  "shape_name": "String",
                  "min_length": 1
                },
                "BeginOffset": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <simpara>A character offset in the input text that shows where the key phrase begins (the first\n      character is at position 0). The offset returns the position of each UTF-8 code point in the\n      string. A <emphasis>code point</emphasis> is the abstract character from a particular\n      graphical representation. For example, a multi-byte UTF-8 character maps to a single code\n      point.</simpara>\n      ",
                  "documentation": "\n         <p>A character offset in the input text that shows where the key phrase begins (the first\n      character is at position 0). The offset returns the position of each UTF-8 code point in the\n      string. A <i>code point</i> is the abstract character from a particular\n      graphical representation. For example, a multi-byte UTF-8 character maps to a single code\n      point.</p>\n      ",
                  "shape_name": "Integer"
                },
                "EndOffset": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <simpara>A character offset in the input text where the key phrase ends. The offset returns the\n      position of each UTF-8 code point in the string. A <code>code point</code> is the abstract\n      character from a particular graphical representation. For example, a multi-byte UTF-8\n      character maps to a single code point.</simpara>\n      ",
                  "documentation": "\n         <p>A character offset in the input text where the key phrase ends. The offset returns the\n      position of each UTF-8 code point in the string. A <code>code point</code> is the abstract\n      character from a particular graphical representation. For example, a multi-byte UTF-8\n      character maps to a single code point.</p>\n      ",
                  "shape_name": "Integer"
                }
              },
              "zonbookDocumentation": "\n         <simpara>Describes a key noun phrase.</simpara>\n      ",
              "documentation": "\n         <p>Describes a key noun phrase.</p>\n      ",
              "shape_name": "KeyPhrase"
            }
          }
        },
        "shape_name": "DetectKeyPhrasesResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The size of the input text exceeds the limit. Use a smaller document.</simpara>\n      ",
          "documentation": "\n         <p>The size of the input text exceeds the limit. Use a smaller document.</p>\n      ",
          "shape_name": "TextSizeLimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Comprehend can't process the language of the input text. For all APIs except\n        <code>DetectDominantLanguage</code>, Amazon Comprehend accepts only English or Spanish text. For the\n        <code>DetectDominantLanguage</code> API, Amazon Comprehend detects 100 languages. For a list of\n      languages, see <xref linkend=\"how-languages\"/>\n         </simpara>\n      ",
          "documentation": "\n         <p>Amazon Comprehend can't process the language of the input text. For all APIs except\n        <code>DetectDominantLanguage</code>, Amazon Comprehend accepts only English or Spanish text. For the\n        <code>DetectDominantLanguage</code> API, Amazon Comprehend detects 100 languages. For a list of\n      languages, see <a>how-languages</a>\n         </p>\n      ",
          "shape_name": "UnsupportedLanguageException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": "\n         <p>Detects the key noun phrases found in the text. </p>\n    \n      "
    },
    "DetectSyntax": {
      "name": "DetectSyntax",
      "input": {
        "type": "structure",
        "members": {
          "Text": {
            "type": "string",
            "zonbookDocumentation": "\n         <para>A UTF-8 string. Each string must contain fewer that 5,000 bytes of UTF encoded\n      characters.</para>\n      ",
            "documentation": "\n         <p>A UTF-8 string. Each string must contain fewer that 5,000 bytes of UTF encoded\n      characters.</p>\n      ",
            "required": true,
            "shape_name": "String",
            "min_length": 1
          },
          "LanguageCode": {
            "type": "string",
            "enum": [
              "en",
              "es",
              "fr",
              "de",
              "it",
              "pt"
            ],
            "zonbookDocumentation": "\n         <para>The language code of the input documents. You can specify English (\"en\") or Spanish\n      (\"es\").</para>\n      ",
            "documentation": "\n         <p>The language code of the input documents. You can specify English (\"en\") or Spanish\n      (\"es\").</p>\n      ",
            "required": true,
            "shape_name": "SyntaxLanguageCode"
          }
        },
        "shape_name": "DetectSyntaxRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "SyntaxTokens": {
            "type": "list",
            "zonbookDocumentation": "\n         <para>A collection of syntax tokens describing the text. For each token, the response provides\n      the text, the token type, where the text begins and ends, and the level of confidence that\n      Amazon Comprehend has that the token is correct. For a list of token types, see <xref linkend=\"how-syntax\"/>.</para>\n      ",
            "documentation": "\n         <p>A collection of syntax tokens describing the text. For each token, the response provides\n      the text, the token type, where the text begins and ends, and the level of confidence that\n      Amazon Comprehend has that the token is correct. For a list of token types, see <a>how-syntax</a>.</p>\n      ",
            "shape_name": "ListOfSyntaxTokens",
            "members": {
              "type": "structure",
              "members": {
                "TokenId": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <para>A unique identifier for a token.</para>\n      ",
                  "documentation": "\n         <p>A unique identifier for a token.</p>\n      ",
                  "shape_name": "Integer"
                },
                "Text": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <para>The word that was recognized in the source text.</para>\n      ",
                  "documentation": "\n         <p>The word that was recognized in the source text.</p>\n      ",
                  "shape_name": "String",
                  "min_length": 1
                },
                "BeginOffset": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <para>The zero-based offset from the beginning of the source text to the first character in the\n      word.</para>\n      ",
                  "documentation": "\n         <p>The zero-based offset from the beginning of the source text to the first character in the\n      word.</p>\n      ",
                  "shape_name": "Integer"
                },
                "EndOffset": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <para>The zero-based offset from the beginning of the source text to the last character in the\n      word.</para>\n      ",
                  "documentation": "\n         <p>The zero-based offset from the beginning of the source text to the last character in the\n      word.</p>\n      ",
                  "shape_name": "Integer"
                },
                "PartOfSpeech": {
                  "type": "structure",
                  "members": {
                    "Tag": {
                      "type": "string",
                      "enum": [
                        "ADJ",
                        "ADP",
                        "ADV",
                        "AUX",
                        "CONJ",
                        "DET",
                        "INTJ",
                        "NOUN",
                        "NUM",
                        "O",
                        "PART",
                        "PRON",
                        "PROPN",
                        "PUNCT",
                        "SCONJ",
                        "SYM",
                        "VERB"
                      ],
                      "zonbookDocumentation": "\n         <para>Identifies the part of speech that the token represents.</para>\n      ",
                      "documentation": "\n         <p>Identifies the part of speech that the token represents.</p>\n      ",
                      "shape_name": "PartOfSpeechTagType"
                    },
                    "Score": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <para>The confidence that Amazon Comprehend has that the part of speech was correctly identified.</para>\n      ",
                      "documentation": "\n         <p>The confidence that Amazon Comprehend has that the part of speech was correctly identified.</p>\n      ",
                      "shape_name": "Float"
                    }
                  },
                  "zonbookDocumentation": "\n         <para>Provides the part of speech label and the confidence level that Amazon Comprehend has that the part of\n      speech was correctly identified. For more information, see <xref linkend=\"how-syntax\"/>.</para>\n      ",
                  "documentation": "\n         <p>Provides the part of speech label and the confidence level that Amazon Comprehend has that the part of\n      speech was correctly identified. For more information, see <a>how-syntax</a>.</p>\n      ",
                  "shape_name": "PartOfSpeechTag"
                }
              },
              "zonbookDocumentation": "\n         <para>Represents a work in the input text that was recognized and assigned a part of speech.\n      There is one syntax token record for each word in the source text.</para>\n      ",
              "documentation": "\n         <p>Represents a work in the input text that was recognized and assigned a part of speech.\n      There is one syntax token record for each word in the source text.</p>\n      ",
              "shape_name": "SyntaxToken"
            }
          }
        },
        "shape_name": "DetectSyntaxResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The size of the input text exceeds the limit. Use a smaller document.</simpara>\n      ",
          "documentation": "\n         <p>The size of the input text exceeds the limit. Use a smaller document.</p>\n      ",
          "shape_name": "TextSizeLimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Comprehend can't process the language of the input text. For all APIs except\n        <code>DetectDominantLanguage</code>, Amazon Comprehend accepts only English or Spanish text. For the\n        <code>DetectDominantLanguage</code> API, Amazon Comprehend detects 100 languages. For a list of\n      languages, see <xref linkend=\"how-languages\"/>\n         </simpara>\n      ",
          "documentation": "\n         <p>Amazon Comprehend can't process the language of the input text. For all APIs except\n        <code>DetectDominantLanguage</code>, Amazon Comprehend accepts only English or Spanish text. For the\n        <code>DetectDominantLanguage</code> API, Amazon Comprehend detects 100 languages. For a list of\n      languages, see <a>how-languages</a>\n         </p>\n      ",
          "shape_name": "UnsupportedLanguageException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": "\n         <p>Inspects text for syntax and the part of speech of words in the document. For more\n      information, <a>how-syntax</a>.</p>\n      "
    },
    "BatchDetectDominantLanguage": {
      "name": "BatchDetectDominantLanguage",
      "input": {
        "type": "structure",
        "members": {
          "TextList": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list containing the text of the input documents. The list can contain a maximum of 25\n      documents. Each document should contain at least 20 characters and must contain fewer than\n      5,000 bytes of UTF-8 encoded characters.</simpara>\n      ",
            "documentation": "\n         <p>A list containing the text of the input documents. The list can contain a maximum of 25\n      documents. Each document should contain at least 20 characters and must contain fewer than\n      5,000 bytes of UTF-8 encoded characters.</p>\n      ",
            "required": true,
            "shape_name": "StringList",
            "members": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          }
        },
        "shape_name": "BatchDetectDominantLanguageRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "ResultList": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of <xref linkend=\"API_BatchDetectDominantLanguageItemResult\"/> objects\n      containing the results of the operation. The results are sorted in ascending order by the\n        <code>Index</code> field and match the order of the documents in the input list. If all of\n      the documents contain an error, the <code>ResultList</code> is empty.</simpara>\n      ",
            "documentation": "\n         <p>A list of  objects\n      containing the results of the operation. The results are sorted in ascending order by the\n        <code>Index</code> field and match the order of the documents in the input list. If all of\n      the documents contain an error, the <code>ResultList</code> is empty.</p>\n      ",
            "required": true,
            "shape_name": "ListOfDetectDominantLanguageResult",
            "members": {
              "type": "structure",
              "members": {
                "Index": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <simpara>The zero-based index of the document in the input list.</simpara>\n      ",
                  "documentation": "\n         <p>The zero-based index of the document in the input list.</p>\n      ",
                  "shape_name": "Integer"
                },
                "Languages": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <simpara>One or more <xref linkend=\"DominantLanguage\"/> objects describing the dominant\n      languages in the document.</simpara>\n      ",
                  "documentation": "\n         <p>One or more <a>DominantLanguage</a> objects describing the dominant\n      languages in the document.</p>\n      ",
                  "shape_name": "ListOfDominantLanguages",
                  "members": {
                    "type": "structure",
                    "members": {
                      "LanguageCode": {
                        "type": "string",
                        "zonbookDocumentation": "\n         <simpara>The RFC 5646 language code for the dominant language. For more information about RFC\n      5646, see <ulink url=\"https://tools.ietf.org/html/rfc5646\">Tags for Identifying\n        Languages</ulink> on the <emphasis>IETF Tools</emphasis> web site.</simpara>\n      ",
                        "documentation": "\n         <p>The RFC 5646 language code for the dominant language. For more information about RFC\n      5646, see <a href=\"https://tools.ietf.org/html/rfc5646\">Tags for Identifying\n        Languages</a> on the <i>IETF Tools</i> web site.</p>\n      ",
                        "shape_name": "String",
                        "min_length": 1
                      },
                      "Score": {
                        "type": "float",
                        "zonbookDocumentation": "\n         <simpara>The level of confidence that Amazon Comprehend has in the accuracy of the detection.</simpara>\n      ",
                        "documentation": "\n         <p>The level of confidence that Amazon Comprehend has in the accuracy of the detection.</p>\n      ",
                        "shape_name": "Float"
                      }
                    },
                    "zonbookDocumentation": "\n         <simpara>Returns the code for the dominant language in the input text and the level of\n      confidence that Amazon Comprehend has in the accuracy of the detection.</simpara>\n      ",
                    "documentation": "\n         <p>Returns the code for the dominant language in the input text and the level of\n      confidence that Amazon Comprehend has in the accuracy of the detection.</p>\n      ",
                    "shape_name": "DominantLanguage"
                  }
                }
              },
              "zonbookDocumentation": "\n         <simpara>The result of calling the <xref linkend=\"API_BatchDetectDominantLanguage\"/> operation.\n      The operation returns one object for each document that is successfully processed by the\n      operation.</simpara>\n      ",
              "documentation": "\n         <p>The result of calling the  operation.\n      The operation returns one object for each document that is successfully processed by the\n      operation.</p>\n      ",
              "shape_name": "BatchDetectDominantLanguageItemResult"
            }
          },
          "ErrorList": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list containing one <xref linkend=\"API_BatchItemError\"/> object for each document\n      that contained an error. The results are sorted in ascending order by the <code>Index</code>\n      field and match the order of the documents in the input list. If there are no errors in the\n      batch, the <code>ErrorList</code> is empty.</simpara>\n      ",
            "documentation": "\n         <p>A list containing one  object for each document\n      that contained an error. The results are sorted in ascending order by the <code>Index</code>\n      field and match the order of the documents in the input list. If there are no errors in the\n      batch, the <code>ErrorList</code> is empty.</p>\n      ",
            "required": true,
            "shape_name": "BatchItemErrorList",
            "members": {
              "type": "structure",
              "members": {
                "Index": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <simpara>The zero-based index of the document in the input list.</simpara>\n      ",
                  "documentation": "\n         <p>The zero-based index of the document in the input list.</p>\n      ",
                  "shape_name": "Integer"
                },
                "ErrorCode": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The numeric error code of the error.</simpara>\n      ",
                  "documentation": "\n         <p>The numeric error code of the error.</p>\n      ",
                  "shape_name": "String",
                  "min_length": 1
                },
                "ErrorMessage": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>A text description of the error.</simpara>\n      ",
                  "documentation": "\n         <p>A text description of the error.</p>\n      ",
                  "shape_name": "String",
                  "min_length": 1
                }
              },
              "zonbookDocumentation": "\n         <simpara>Describes an error that occurred while processing a document in a batch. The operation\n      returns on <code>BatchItemError</code> object for each document that contained an\n      error.</simpara>\n      ",
              "documentation": "\n         <p>Describes an error that occurred while processing a document in a batch. The operation\n      returns on <code>BatchItemError</code> object for each document that contained an\n      error.</p>\n      ",
              "shape_name": "BatchItemError"
            }
          }
        },
        "shape_name": "BatchDetectDominantLanguageResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The size of the input text exceeds the limit. Use a smaller document.</simpara>\n      ",
          "documentation": "\n         <p>The size of the input text exceeds the limit. Use a smaller document.</p>\n      ",
          "shape_name": "TextSizeLimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The number of documents in the request exceeds the limit of 25. Try your request again\n      with fewer documents.</simpara>\n      ",
          "documentation": "\n         <p>The number of documents in the request exceeds the limit of 25. Try your request again\n      with fewer documents.</p>\n      ",
          "shape_name": "BatchSizeLimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": "\n         <p>Determines the dominant language of the input text for a batch of documents. For a list\n      of languages that Amazon Comprehend can detect, see <a href=\"http://docs.aws.amazon.com/comprehend/latest/dg/how-languages.html\">Amazon Comprehend Supported Languages</a>. </p>\n      "
    },
    "BatchDetectSentiment": {
      "name": "BatchDetectSentiment",
      "input": {
        "type": "structure",
        "members": {
          "TextList": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list containing the text of the input documents. The list can contain a maximum of 25\n      documents. Each document must contain fewer that 5,000 bytes of UTF-8 encoded\n      characters.</simpara>\n      ",
            "documentation": "\n         <p>A list containing the text of the input documents. The list can contain a maximum of 25\n      documents. Each document must contain fewer that 5,000 bytes of UTF-8 encoded\n      characters.</p>\n      ",
            "required": true,
            "shape_name": "StringList",
            "members": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "LanguageCode": {
            "type": "string",
            "enum": [
              "en",
              "es",
              "fr",
              "de",
              "it",
              "pt"
            ],
            "zonbookDocumentation": "\n         <simpara>The language of the input documents. You can specify English (\"en\") or Spanish (\"es\").\n      All documents must be in the same language.</simpara>\n      ",
            "documentation": "\n         <p>The language of the input documents. You can specify English (\"en\") or Spanish (\"es\").\n      All documents must be in the same language.</p>\n      ",
            "required": true,
            "shape_name": "LanguageCode"
          }
        },
        "shape_name": "BatchDetectSentimentRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "ResultList": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of <xref linkend=\"API_BatchDetectSentimentItemResult\"/> objects containing the\n      results of the operation. The results are sorted in ascending order by the <code>Index</code>\n      field and match the order of the documents in the input list. If all of the documents contain\n      an error, the <code>ResultList</code> is empty.</simpara>\n      ",
            "documentation": "\n         <p>A list of  objects containing the\n      results of the operation. The results are sorted in ascending order by the <code>Index</code>\n      field and match the order of the documents in the input list. If all of the documents contain\n      an error, the <code>ResultList</code> is empty.</p>\n      ",
            "required": true,
            "shape_name": "ListOfDetectSentimentResult",
            "members": {
              "type": "structure",
              "members": {
                "Index": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <simpara>The zero-based index of the document in the input list.</simpara>\n      ",
                  "documentation": "\n         <p>The zero-based index of the document in the input list.</p>\n      ",
                  "shape_name": "Integer"
                },
                "Sentiment": {
                  "type": "string",
                  "enum": [
                    "POSITIVE",
                    "NEGATIVE",
                    "NEUTRAL",
                    "MIXED"
                  ],
                  "zonbookDocumentation": "\n         <simpara>The sentiment detected in the document.</simpara>\n      ",
                  "documentation": "\n         <p>The sentiment detected in the document.</p>\n      ",
                  "shape_name": "SentimentType"
                },
                "SentimentScore": {
                  "type": "structure",
                  "members": {
                    "Positive": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>The level of confidence that Amazon Comprehend has in the accuracy of its detection of the\n        <code>POSITIVE</code> sentiment.</simpara>\n      ",
                      "documentation": "\n         <p>The level of confidence that Amazon Comprehend has in the accuracy of its detection of the\n        <code>POSITIVE</code> sentiment.</p>\n      ",
                      "shape_name": "Float"
                    },
                    "Negative": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>The level of confidence that Amazon Comprehend has in the accuracy of its detection of the\n        <code>NEGATIVE</code> sentiment.</simpara>\n      ",
                      "documentation": "\n         <p>The level of confidence that Amazon Comprehend has in the accuracy of its detection of the\n        <code>NEGATIVE</code> sentiment.</p>\n      ",
                      "shape_name": "Float"
                    },
                    "Neutral": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>The level of confidence that Amazon Comprehend has in the accuracy of its detection of the\n        <code>NEUTRAL</code> sentiment.</simpara>\n      ",
                      "documentation": "\n         <p>The level of confidence that Amazon Comprehend has in the accuracy of its detection of the\n        <code>NEUTRAL</code> sentiment.</p>\n      ",
                      "shape_name": "Float"
                    },
                    "Mixed": {
                      "type": "float",
                      "zonbookDocumentation": "\n         <simpara>The level of confidence that Amazon Comprehend has in the accuracy of its detection of the\n        <code>MIXED</code> sentiment.</simpara>\n      ",
                      "documentation": "\n         <p>The level of confidence that Amazon Comprehend has in the accuracy of its detection of the\n        <code>MIXED</code> sentiment.</p>\n      ",
                      "shape_name": "Float"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>The level of confidence that Amazon Comprehend has in the accuracy of its sentiment\n      detection.</simpara>\n      ",
                  "documentation": "\n         <p>The level of confidence that Amazon Comprehend has in the accuracy of its sentiment\n      detection.</p>\n      ",
                  "shape_name": "SentimentScore"
                }
              },
              "zonbookDocumentation": "\n         <simpara>The result of calling the <xref linkend=\"API_BatchDetectSentiment\"/> operation. The\n      operation returns one object for each document that is successfully processed by the\n      operation.</simpara>\n      ",
              "documentation": "\n         <p>The result of calling the  operation. The\n      operation returns one object for each document that is successfully processed by the\n      operation.</p>\n      ",
              "shape_name": "BatchDetectSentimentItemResult"
            }
          },
          "ErrorList": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list containing one <xref linkend=\"API_BatchItemError\"/> object for each document\n      that contained an error. The results are sorted in ascending order by the <code>Index</code>\n      field and match the order of the documents in the input list. If there are no errors in the\n      batch, the <code>ErrorList</code> is empty.</simpara>\n      ",
            "documentation": "\n         <p>A list containing one  object for each document\n      that contained an error. The results are sorted in ascending order by the <code>Index</code>\n      field and match the order of the documents in the input list. If there are no errors in the\n      batch, the <code>ErrorList</code> is empty.</p>\n      ",
            "required": true,
            "shape_name": "BatchItemErrorList",
            "members": {
              "type": "structure",
              "members": {
                "Index": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <simpara>The zero-based index of the document in the input list.</simpara>\n      ",
                  "documentation": "\n         <p>The zero-based index of the document in the input list.</p>\n      ",
                  "shape_name": "Integer"
                },
                "ErrorCode": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The numeric error code of the error.</simpara>\n      ",
                  "documentation": "\n         <p>The numeric error code of the error.</p>\n      ",
                  "shape_name": "String",
                  "min_length": 1
                },
                "ErrorMessage": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>A text description of the error.</simpara>\n      ",
                  "documentation": "\n         <p>A text description of the error.</p>\n      ",
                  "shape_name": "String",
                  "min_length": 1
                }
              },
              "zonbookDocumentation": "\n         <simpara>Describes an error that occurred while processing a document in a batch. The operation\n      returns on <code>BatchItemError</code> object for each document that contained an\n      error.</simpara>\n      ",
              "documentation": "\n         <p>Describes an error that occurred while processing a document in a batch. The operation\n      returns on <code>BatchItemError</code> object for each document that contained an\n      error.</p>\n      ",
              "shape_name": "BatchItemError"
            }
          }
        },
        "shape_name": "BatchDetectSentimentResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The size of the input text exceeds the limit. Use a smaller document.</simpara>\n      ",
          "documentation": "\n         <p>The size of the input text exceeds the limit. Use a smaller document.</p>\n      ",
          "shape_name": "TextSizeLimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Comprehend can't process the language of the input text. For all APIs except\n        <code>DetectDominantLanguage</code>, Amazon Comprehend accepts only English or Spanish text. For the\n        <code>DetectDominantLanguage</code> API, Amazon Comprehend detects 100 languages. For a list of\n      languages, see <xref linkend=\"how-languages\"/>\n         </simpara>\n      ",
          "documentation": "\n         <p>Amazon Comprehend can't process the language of the input text. For all APIs except\n        <code>DetectDominantLanguage</code>, Amazon Comprehend accepts only English or Spanish text. For the\n        <code>DetectDominantLanguage</code> API, Amazon Comprehend detects 100 languages. For a list of\n      languages, see <a>how-languages</a>\n         </p>\n      ",
          "shape_name": "UnsupportedLanguageException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The number of documents in the request exceeds the limit of 25. Try your request again\n      with fewer documents.</simpara>\n      ",
          "documentation": "\n         <p>The number of documents in the request exceeds the limit of 25. Try your request again\n      with fewer documents.</p>\n      ",
          "shape_name": "BatchSizeLimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": "\n         <p>Inspects a batch of documents and returns an inference of the prevailing sentiment,\n        <code>POSITIVE</code>, <code>NEUTRAL</code>, <code>MIXED</code>, or <code>NEGATIVE</code>,\n      in each one.</p>\n      "
    },
    "BatchDetectEntities": {
      "name": "BatchDetectEntities",
      "input": {
        "type": "structure",
        "members": {
          "TextList": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list containing the text of the input documents. The list can contain a maximum of 25\n      documents. Each document must contain fewer than 5,000 bytes of UTF-8 encoded\n      characters.</simpara>\n      ",
            "documentation": "\n         <p>A list containing the text of the input documents. The list can contain a maximum of 25\n      documents. Each document must contain fewer than 5,000 bytes of UTF-8 encoded\n      characters.</p>\n      ",
            "required": true,
            "shape_name": "StringList",
            "members": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "LanguageCode": {
            "type": "string",
            "enum": [
              "en",
              "es",
              "fr",
              "de",
              "it",
              "pt"
            ],
            "zonbookDocumentation": "\n         <simpara>The language of the input documents. You can specify English (\"en\") or Spanish (\"es\").\n      All documents must be in the same language.</simpara>\n      ",
            "documentation": "\n         <p>The language of the input documents. You can specify English (\"en\") or Spanish (\"es\").\n      All documents must be in the same language.</p>\n      ",
            "required": true,
            "shape_name": "LanguageCode"
          }
        },
        "shape_name": "BatchDetectEntitiesRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "ResultList": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of <xref linkend=\"API_BatchDetectEntitiesItemResult\"/> objects containing the\n      results of the operation. The results are sorted in ascending order by the <code>Index</code>\n      field and match the order of the documents in the input list. If all of the documents contain\n      an error, the <code>ResultList</code> is empty.</simpara>\n      ",
            "documentation": "\n         <p>A list of  objects containing the\n      results of the operation. The results are sorted in ascending order by the <code>Index</code>\n      field and match the order of the documents in the input list. If all of the documents contain\n      an error, the <code>ResultList</code> is empty.</p>\n      ",
            "required": true,
            "shape_name": "ListOfDetectEntitiesResult",
            "members": {
              "type": "structure",
              "members": {
                "Index": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <simpara>The zero-based index of the document in the input list.</simpara>\n      ",
                  "documentation": "\n         <p>The zero-based index of the document in the input list.</p>\n      ",
                  "shape_name": "Integer"
                },
                "Entities": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <simpara>One or more <xref linkend=\"Entity\"/> objects, one for each entity detected in the\n      document.</simpara>\n      ",
                  "documentation": "\n         <p>One or more <a>Entity</a> objects, one for each entity detected in the\n      document.</p>\n      ",
                  "shape_name": "ListOfEntities",
                  "members": {
                    "type": "structure",
                    "members": {
                      "Score": {
                        "type": "float",
                        "zonbookDocumentation": "\n         <simpara>The level of confidence that Amazon Comprehend has in the accuracy of the detection.</simpara>\n      ",
                        "documentation": "\n         <p>The level of confidence that Amazon Comprehend has in the accuracy of the detection.</p>\n      ",
                        "shape_name": "Float"
                      },
                      "Type": {
                        "type": "string",
                        "enum": [
                          "PERSON",
                          "LOCATION",
                          "ORGANIZATION",
                          "COMMERCIAL_ITEM",
                          "EVENT",
                          "DATE",
                          "QUANTITY",
                          "TITLE",
                          "OTHER"
                        ],
                        "zonbookDocumentation": "\n         <simpara>The entity's type.</simpara>\n      ",
                        "documentation": "\n         <p>The entity's type.</p>\n      ",
                        "shape_name": "EntityType"
                      },
                      "Text": {
                        "type": "string",
                        "zonbookDocumentation": "\n         <simpara>The text of the entity.</simpara>\n      ",
                        "documentation": "\n         <p>The text of the entity.</p>\n      ",
                        "shape_name": "String",
                        "min_length": 1
                      },
                      "BeginOffset": {
                        "type": "integer",
                        "zonbookDocumentation": "\n         <simpara>A character offset in the input text that shows where the entity begins (the first\n      character is at position 0). The offset returns the position of each UTF-8 code point in the\n      string. A <emphasis>code point</emphasis> is the abstract character from a particular\n      graphical representation. For example, a multi-byte UTF-8 character maps to a single code\n      point.</simpara>\n      ",
                        "documentation": "\n         <p>A character offset in the input text that shows where the entity begins (the first\n      character is at position 0). The offset returns the position of each UTF-8 code point in the\n      string. A <i>code point</i> is the abstract character from a particular\n      graphical representation. For example, a multi-byte UTF-8 character maps to a single code\n      point.</p>\n      ",
                        "shape_name": "Integer"
                      },
                      "EndOffset": {
                        "type": "integer",
                        "zonbookDocumentation": "\n         <simpara>A character offset in the input text that shows where the entity ends. The offset\n      returns the position of each UTF-8 code point in the string. A <emphasis>code point</emphasis>\n      is the abstract character from a particular graphical representation. For example, a\n      multi-byte UTF-8 character maps to a single code point. </simpara>\n      ",
                        "documentation": "\n         <p>A character offset in the input text that shows where the entity ends. The offset\n      returns the position of each UTF-8 code point in the string. A <i>code point</i>\n      is the abstract character from a particular graphical representation. For example, a\n      multi-byte UTF-8 character maps to a single code point. </p>\n      ",
                        "shape_name": "Integer"
                      }
                    },
                    "zonbookDocumentation": "\n         <simpara>Provides information about an entity. </simpara>\n         <simpara> </simpara>\n      ",
                    "documentation": "\n         <p>Provides information about an entity. </p>\n         <p> </p>\n      ",
                    "shape_name": "Entity"
                  }
                }
              },
              "zonbookDocumentation": "\n         <simpara>The result of calling the <xref linkend=\"API_BatchDetectKeyPhrases\"/> operation. The\n      operation returns one object for each document that is successfully processed by the\n      operation.</simpara>\n      ",
              "documentation": "\n         <p>The result of calling the  operation. The\n      operation returns one object for each document that is successfully processed by the\n      operation.</p>\n      ",
              "shape_name": "BatchDetectEntitiesItemResult"
            }
          },
          "ErrorList": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list containing one <xref linkend=\"API_BatchItemError\"/> object for each document\n      that contained an error. The results are sorted in ascending order by the <code>Index</code>\n      field and match the order of the documents in the input list. If there are no errors in the\n      batch, the <code>ErrorList</code> is empty.</simpara>\n      ",
            "documentation": "\n         <p>A list containing one  object for each document\n      that contained an error. The results are sorted in ascending order by the <code>Index</code>\n      field and match the order of the documents in the input list. If there are no errors in the\n      batch, the <code>ErrorList</code> is empty.</p>\n      ",
            "required": true,
            "shape_name": "BatchItemErrorList",
            "members": {
              "type": "structure",
              "members": {
                "Index": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <simpara>The zero-based index of the document in the input list.</simpara>\n      ",
                  "documentation": "\n         <p>The zero-based index of the document in the input list.</p>\n      ",
                  "shape_name": "Integer"
                },
                "ErrorCode": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The numeric error code of the error.</simpara>\n      ",
                  "documentation": "\n         <p>The numeric error code of the error.</p>\n      ",
                  "shape_name": "String",
                  "min_length": 1
                },
                "ErrorMessage": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>A text description of the error.</simpara>\n      ",
                  "documentation": "\n         <p>A text description of the error.</p>\n      ",
                  "shape_name": "String",
                  "min_length": 1
                }
              },
              "zonbookDocumentation": "\n         <simpara>Describes an error that occurred while processing a document in a batch. The operation\n      returns on <code>BatchItemError</code> object for each document that contained an\n      error.</simpara>\n      ",
              "documentation": "\n         <p>Describes an error that occurred while processing a document in a batch. The operation\n      returns on <code>BatchItemError</code> object for each document that contained an\n      error.</p>\n      ",
              "shape_name": "BatchItemError"
            }
          }
        },
        "shape_name": "BatchDetectEntitiesResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The size of the input text exceeds the limit. Use a smaller document.</simpara>\n      ",
          "documentation": "\n         <p>The size of the input text exceeds the limit. Use a smaller document.</p>\n      ",
          "shape_name": "TextSizeLimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Comprehend can't process the language of the input text. For all APIs except\n        <code>DetectDominantLanguage</code>, Amazon Comprehend accepts only English or Spanish text. For the\n        <code>DetectDominantLanguage</code> API, Amazon Comprehend detects 100 languages. For a list of\n      languages, see <xref linkend=\"how-languages\"/>\n         </simpara>\n      ",
          "documentation": "\n         <p>Amazon Comprehend can't process the language of the input text. For all APIs except\n        <code>DetectDominantLanguage</code>, Amazon Comprehend accepts only English or Spanish text. For the\n        <code>DetectDominantLanguage</code> API, Amazon Comprehend detects 100 languages. For a list of\n      languages, see <a>how-languages</a>\n         </p>\n      ",
          "shape_name": "UnsupportedLanguageException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The number of documents in the request exceeds the limit of 25. Try your request again\n      with fewer documents.</simpara>\n      ",
          "documentation": "\n         <p>The number of documents in the request exceeds the limit of 25. Try your request again\n      with fewer documents.</p>\n      ",
          "shape_name": "BatchSizeLimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": "\n         <p>Inspects the text of a batch of documents for named entities and returns information\n      about them. For more information about named entities, see <a>how-entities</a>\n         </p>\n      "
    },
    "BatchDetectKeyPhrases": {
      "name": "BatchDetectKeyPhrases",
      "input": {
        "type": "structure",
        "members": {
          "TextList": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list containing the text of the input documents. The list can contain a maximum of 25\n      documents. Each document must contain fewer that 5,000 bytes of UTF-8 encoded\n      characters.</simpara>\n      ",
            "documentation": "\n         <p>A list containing the text of the input documents. The list can contain a maximum of 25\n      documents. Each document must contain fewer that 5,000 bytes of UTF-8 encoded\n      characters.</p>\n      ",
            "required": true,
            "shape_name": "StringList",
            "members": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "LanguageCode": {
            "type": "string",
            "enum": [
              "en",
              "es",
              "fr",
              "de",
              "it",
              "pt"
            ],
            "zonbookDocumentation": "\n         <simpara>The language of the input documents. You can specify English (\"en\") or Spanish (\"es\").\n      All documents must be in the same language.</simpara>\n      ",
            "documentation": "\n         <p>The language of the input documents. You can specify English (\"en\") or Spanish (\"es\").\n      All documents must be in the same language.</p>\n      ",
            "required": true,
            "shape_name": "LanguageCode"
          }
        },
        "shape_name": "BatchDetectKeyPhrasesRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "ResultList": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of <xref linkend=\"API_BatchDetectKeyPhrasesItemResult\"/> objects containing the\n      results of the operation. The results are sorted in ascending order by the <code>Index</code>\n      field and match the order of the documents in the input list. If all of the documents contain\n      an error, the <code>ResultList</code> is empty.</simpara>\n      ",
            "documentation": "\n         <p>A list of  objects containing the\n      results of the operation. The results are sorted in ascending order by the <code>Index</code>\n      field and match the order of the documents in the input list. If all of the documents contain\n      an error, the <code>ResultList</code> is empty.</p>\n      ",
            "required": true,
            "shape_name": "ListOfDetectKeyPhrasesResult",
            "members": {
              "type": "structure",
              "members": {
                "Index": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <simpara>The zero-based index of the document in the input list.</simpara>\n      ",
                  "documentation": "\n         <p>The zero-based index of the document in the input list.</p>\n      ",
                  "shape_name": "Integer"
                },
                "KeyPhrases": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <simpara>One or more <xref linkend=\"KeyPhrase\"/> objects, one for each key phrase detected in\n      the document.</simpara>\n      ",
                  "documentation": "\n         <p>One or more <a>KeyPhrase</a> objects, one for each key phrase detected in\n      the document.</p>\n      ",
                  "shape_name": "ListOfKeyPhrases",
                  "members": {
                    "type": "structure",
                    "members": {
                      "Score": {
                        "type": "float",
                        "zonbookDocumentation": "\n         <simpara>The level of confidence that Amazon Comprehend has in the accuracy of the detection.</simpara>\n      ",
                        "documentation": "\n         <p>The level of confidence that Amazon Comprehend has in the accuracy of the detection.</p>\n      ",
                        "shape_name": "Float"
                      },
                      "Text": {
                        "type": "string",
                        "zonbookDocumentation": "\n         <simpara>The text of a key noun phrase.</simpara>\n      ",
                        "documentation": "\n         <p>The text of a key noun phrase.</p>\n      ",
                        "shape_name": "String",
                        "min_length": 1
                      },
                      "BeginOffset": {
                        "type": "integer",
                        "zonbookDocumentation": "\n         <simpara>A character offset in the input text that shows where the key phrase begins (the first\n      character is at position 0). The offset returns the position of each UTF-8 code point in the\n      string. A <emphasis>code point</emphasis> is the abstract character from a particular\n      graphical representation. For example, a multi-byte UTF-8 character maps to a single code\n      point.</simpara>\n      ",
                        "documentation": "\n         <p>A character offset in the input text that shows where the key phrase begins (the first\n      character is at position 0). The offset returns the position of each UTF-8 code point in the\n      string. A <i>code point</i> is the abstract character from a particular\n      graphical representation. For example, a multi-byte UTF-8 character maps to a single code\n      point.</p>\n      ",
                        "shape_name": "Integer"
                      },
                      "EndOffset": {
                        "type": "integer",
                        "zonbookDocumentation": "\n         <simpara>A character offset in the input text where the key phrase ends. The offset returns the\n      position of each UTF-8 code point in the string. A <code>code point</code> is the abstract\n      character from a particular graphical representation. For example, a multi-byte UTF-8\n      character maps to a single code point.</simpara>\n      ",
                        "documentation": "\n         <p>A character offset in the input text where the key phrase ends. The offset returns the\n      position of each UTF-8 code point in the string. A <code>code point</code> is the abstract\n      character from a particular graphical representation. For example, a multi-byte UTF-8\n      character maps to a single code point.</p>\n      ",
                        "shape_name": "Integer"
                      }
                    },
                    "zonbookDocumentation": "\n         <simpara>Describes a key noun phrase.</simpara>\n      ",
                    "documentation": "\n         <p>Describes a key noun phrase.</p>\n      ",
                    "shape_name": "KeyPhrase"
                  }
                }
              },
              "zonbookDocumentation": "\n         <simpara>The result of calling the <xref linkend=\"API_BatchDetectKeyPhrases\"/> operation. The\n      operation returns one object for each document that is successfully processed by the\n      operation.</simpara>\n      ",
              "documentation": "\n         <p>The result of calling the  operation. The\n      operation returns one object for each document that is successfully processed by the\n      operation.</p>\n      ",
              "shape_name": "BatchDetectKeyPhrasesItemResult"
            }
          },
          "ErrorList": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list containing one <xref linkend=\"API_BatchItemError\"/> object for each document\n      that contained an error. The results are sorted in ascending order by the <code>Index</code>\n      field and match the order of the documents in the input list. If there are no errors in the\n      batch, the <code>ErrorList</code> is empty.</simpara>\n      ",
            "documentation": "\n         <p>A list containing one  object for each document\n      that contained an error. The results are sorted in ascending order by the <code>Index</code>\n      field and match the order of the documents in the input list. If there are no errors in the\n      batch, the <code>ErrorList</code> is empty.</p>\n      ",
            "required": true,
            "shape_name": "BatchItemErrorList",
            "members": {
              "type": "structure",
              "members": {
                "Index": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <simpara>The zero-based index of the document in the input list.</simpara>\n      ",
                  "documentation": "\n         <p>The zero-based index of the document in the input list.</p>\n      ",
                  "shape_name": "Integer"
                },
                "ErrorCode": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The numeric error code of the error.</simpara>\n      ",
                  "documentation": "\n         <p>The numeric error code of the error.</p>\n      ",
                  "shape_name": "String",
                  "min_length": 1
                },
                "ErrorMessage": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>A text description of the error.</simpara>\n      ",
                  "documentation": "\n         <p>A text description of the error.</p>\n      ",
                  "shape_name": "String",
                  "min_length": 1
                }
              },
              "zonbookDocumentation": "\n         <simpara>Describes an error that occurred while processing a document in a batch. The operation\n      returns on <code>BatchItemError</code> object for each document that contained an\n      error.</simpara>\n      ",
              "documentation": "\n         <p>Describes an error that occurred while processing a document in a batch. The operation\n      returns on <code>BatchItemError</code> object for each document that contained an\n      error.</p>\n      ",
              "shape_name": "BatchItemError"
            }
          }
        },
        "shape_name": "BatchDetectKeyPhrasesResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The size of the input text exceeds the limit. Use a smaller document.</simpara>\n      ",
          "documentation": "\n         <p>The size of the input text exceeds the limit. Use a smaller document.</p>\n      ",
          "shape_name": "TextSizeLimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Comprehend can't process the language of the input text. For all APIs except\n        <code>DetectDominantLanguage</code>, Amazon Comprehend accepts only English or Spanish text. For the\n        <code>DetectDominantLanguage</code> API, Amazon Comprehend detects 100 languages. For a list of\n      languages, see <xref linkend=\"how-languages\"/>\n         </simpara>\n      ",
          "documentation": "\n         <p>Amazon Comprehend can't process the language of the input text. For all APIs except\n        <code>DetectDominantLanguage</code>, Amazon Comprehend accepts only English or Spanish text. For the\n        <code>DetectDominantLanguage</code> API, Amazon Comprehend detects 100 languages. For a list of\n      languages, see <a>how-languages</a>\n         </p>\n      ",
          "shape_name": "UnsupportedLanguageException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The number of documents in the request exceeds the limit of 25. Try your request again\n      with fewer documents.</simpara>\n      ",
          "documentation": "\n         <p>The number of documents in the request exceeds the limit of 25. Try your request again\n      with fewer documents.</p>\n      ",
          "shape_name": "BatchSizeLimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": "\n         <p>Detects the key noun phrases found in a batch of documents.</p>\n      "
    },
    "BatchDetectSyntax": {
      "name": "BatchDetectSyntax",
      "input": {
        "type": "structure",
        "members": {
          "TextList": {
            "type": "list",
            "zonbookDocumentation": "\n         <para>A list containing the text of the input documents. The list can contain a maximum of 25\n      documents. Each document must contain fewer that 5,000 bytes of UTF-8 encoded\n      characters.</para>\n      ",
            "documentation": "\n         <p>A list containing the text of the input documents. The list can contain a maximum of 25\n      documents. Each document must contain fewer that 5,000 bytes of UTF-8 encoded\n      characters.</p>\n      ",
            "required": true,
            "shape_name": "StringList",
            "members": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "LanguageCode": {
            "type": "string",
            "enum": [
              "en",
              "es",
              "fr",
              "de",
              "it",
              "pt"
            ],
            "zonbookDocumentation": "\n         <para>The language of the input documents. You can specify English (\"en\") or Spanish (\"es\"). All\n      documents must be in the same language.</para>\n      ",
            "documentation": "\n         <p>The language of the input documents. You can specify English (\"en\") or Spanish (\"es\"). All\n      documents must be in the same language.</p>\n      ",
            "required": true,
            "shape_name": "SyntaxLanguageCode"
          }
        },
        "shape_name": "BatchDetectSyntaxRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "ResultList": {
            "type": "list",
            "zonbookDocumentation": "\n         <para>A list of <xref linkend=\"API_BatchDetectSyntaxItemResult\"/> objects containing the results\n      of the operation. The results are sorted in ascending order by the <code>Index</code> field\n      and match the order of the documents in the input list. If all of the documents contain an\n      error, the <code>ResultList</code> is empty.</para>\n      ",
            "documentation": "\n         <p>A list of  objects containing the results\n      of the operation. The results are sorted in ascending order by the <code>Index</code> field\n      and match the order of the documents in the input list. If all of the documents contain an\n      error, the <code>ResultList</code> is empty.</p>\n      ",
            "required": true,
            "shape_name": "ListOfDetectSyntaxResult",
            "members": {
              "type": "structure",
              "members": {
                "Index": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <para>The zero-based index of the document in the input list.</para>\n      ",
                  "documentation": "\n         <p>The zero-based index of the document in the input list.</p>\n      ",
                  "shape_name": "Integer"
                },
                "SyntaxTokens": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <para>The syntax tokens for the words in the document, one token for each word.</para>\n      ",
                  "documentation": "\n         <p>The syntax tokens for the words in the document, one token for each word.</p>\n      ",
                  "shape_name": "ListOfSyntaxTokens",
                  "members": {
                    "type": "structure",
                    "members": {
                      "TokenId": {
                        "type": "integer",
                        "zonbookDocumentation": "\n         <para>A unique identifier for a token.</para>\n      ",
                        "documentation": "\n         <p>A unique identifier for a token.</p>\n      ",
                        "shape_name": "Integer"
                      },
                      "Text": {
                        "type": "string",
                        "zonbookDocumentation": "\n         <para>The word that was recognized in the source text.</para>\n      ",
                        "documentation": "\n         <p>The word that was recognized in the source text.</p>\n      ",
                        "shape_name": "String",
                        "min_length": 1
                      },
                      "BeginOffset": {
                        "type": "integer",
                        "zonbookDocumentation": "\n         <para>The zero-based offset from the beginning of the source text to the first character in the\n      word.</para>\n      ",
                        "documentation": "\n         <p>The zero-based offset from the beginning of the source text to the first character in the\n      word.</p>\n      ",
                        "shape_name": "Integer"
                      },
                      "EndOffset": {
                        "type": "integer",
                        "zonbookDocumentation": "\n         <para>The zero-based offset from the beginning of the source text to the last character in the\n      word.</para>\n      ",
                        "documentation": "\n         <p>The zero-based offset from the beginning of the source text to the last character in the\n      word.</p>\n      ",
                        "shape_name": "Integer"
                      },
                      "PartOfSpeech": {
                        "type": "structure",
                        "members": {
                          "Tag": {
                            "type": "string",
                            "enum": [
                              "ADJ",
                              "ADP",
                              "ADV",
                              "AUX",
                              "CONJ",
                              "DET",
                              "INTJ",
                              "NOUN",
                              "NUM",
                              "O",
                              "PART",
                              "PRON",
                              "PROPN",
                              "PUNCT",
                              "SCONJ",
                              "SYM",
                              "VERB"
                            ],
                            "zonbookDocumentation": "\n         <para>Identifies the part of speech that the token represents.</para>\n      ",
                            "documentation": "\n         <p>Identifies the part of speech that the token represents.</p>\n      ",
                            "shape_name": "PartOfSpeechTagType"
                          },
                          "Score": {
                            "type": "float",
                            "zonbookDocumentation": "\n         <para>The confidence that Amazon Comprehend has that the part of speech was correctly identified.</para>\n      ",
                            "documentation": "\n         <p>The confidence that Amazon Comprehend has that the part of speech was correctly identified.</p>\n      ",
                            "shape_name": "Float"
                          }
                        },
                        "zonbookDocumentation": "\n         <para>Provides the part of speech label and the confidence level that Amazon Comprehend has that the part of\n      speech was correctly identified. For more information, see <xref linkend=\"how-syntax\"/>.</para>\n      ",
                        "documentation": "\n         <p>Provides the part of speech label and the confidence level that Amazon Comprehend has that the part of\n      speech was correctly identified. For more information, see <a>how-syntax</a>.</p>\n      ",
                        "shape_name": "PartOfSpeechTag"
                      }
                    },
                    "zonbookDocumentation": "\n         <para>Represents a work in the input text that was recognized and assigned a part of speech.\n      There is one syntax token record for each word in the source text.</para>\n      ",
                    "documentation": "\n         <p>Represents a work in the input text that was recognized and assigned a part of speech.\n      There is one syntax token record for each word in the source text.</p>\n      ",
                    "shape_name": "SyntaxToken"
                  }
                }
              },
              "zonbookDocumentation": "\n         <para>The result of calling the <xref linkend=\"API_BatchDetectSyntax\"/> operation. The operation\n      returns one object that is successfully processed by the operation.</para>\n      ",
              "documentation": "\n         <p>The result of calling the  operation. The operation\n      returns one object that is successfully processed by the operation.</p>\n      ",
              "shape_name": "BatchDetectSyntaxItemResult"
            }
          },
          "ErrorList": {
            "type": "list",
            "zonbookDocumentation": "\n         <para>A list containing one <xref linkend=\"API_BatchItemError\"/> object for each document that\n      contained an error. The results are sorted in ascending order by the <code>Index</code> field\n      and match the order of the documents in the input list. If there are no errors in the batch,\n      the <code>ErrorList</code> is empty.</para>\n      ",
            "documentation": "\n         <p>A list containing one  object for each document that\n      contained an error. The results are sorted in ascending order by the <code>Index</code> field\n      and match the order of the documents in the input list. If there are no errors in the batch,\n      the <code>ErrorList</code> is empty.</p>\n      ",
            "required": true,
            "shape_name": "BatchItemErrorList",
            "members": {
              "type": "structure",
              "members": {
                "Index": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <simpara>The zero-based index of the document in the input list.</simpara>\n      ",
                  "documentation": "\n         <p>The zero-based index of the document in the input list.</p>\n      ",
                  "shape_name": "Integer"
                },
                "ErrorCode": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The numeric error code of the error.</simpara>\n      ",
                  "documentation": "\n         <p>The numeric error code of the error.</p>\n      ",
                  "shape_name": "String",
                  "min_length": 1
                },
                "ErrorMessage": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>A text description of the error.</simpara>\n      ",
                  "documentation": "\n         <p>A text description of the error.</p>\n      ",
                  "shape_name": "String",
                  "min_length": 1
                }
              },
              "zonbookDocumentation": "\n         <simpara>Describes an error that occurred while processing a document in a batch. The operation\n      returns on <code>BatchItemError</code> object for each document that contained an\n      error.</simpara>\n      ",
              "documentation": "\n         <p>Describes an error that occurred while processing a document in a batch. The operation\n      returns on <code>BatchItemError</code> object for each document that contained an\n      error.</p>\n      ",
              "shape_name": "BatchItemError"
            }
          }
        },
        "shape_name": "BatchDetectSyntaxResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The size of the input text exceeds the limit. Use a smaller document.</simpara>\n      ",
          "documentation": "\n         <p>The size of the input text exceeds the limit. Use a smaller document.</p>\n      ",
          "shape_name": "TextSizeLimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Comprehend can't process the language of the input text. For all APIs except\n        <code>DetectDominantLanguage</code>, Amazon Comprehend accepts only English or Spanish text. For the\n        <code>DetectDominantLanguage</code> API, Amazon Comprehend detects 100 languages. For a list of\n      languages, see <xref linkend=\"how-languages\"/>\n         </simpara>\n      ",
          "documentation": "\n         <p>Amazon Comprehend can't process the language of the input text. For all APIs except\n        <code>DetectDominantLanguage</code>, Amazon Comprehend accepts only English or Spanish text. For the\n        <code>DetectDominantLanguage</code> API, Amazon Comprehend detects 100 languages. For a list of\n      languages, see <a>how-languages</a>\n         </p>\n      ",
          "shape_name": "UnsupportedLanguageException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The number of documents in the request exceeds the limit of 25. Try your request again\n      with fewer documents.</simpara>\n      ",
          "documentation": "\n         <p>The number of documents in the request exceeds the limit of 25. Try your request again\n      with fewer documents.</p>\n      ",
          "shape_name": "BatchSizeLimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": "\n         <p>Inspects the text of a batch of documents for the syntax and part of speech of the words\n      in the document and returns information about them. For more information, see <a>how-syntax</a>.</p>\n      "
    },
    "StartTopicsDetectionJob": {
      "name": "StartTopicsDetectionJob",
      "input": {
        "type": "structure",
        "members": {
          "InputDataConfig": {
            "type": "structure",
            "members": {
              "S3Uri": {
                "type": "string",
                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                "zonbookDocumentation": "\n         <simpara>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </simpara>\n         <simpara>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</simpara>\n      ",
                "documentation": "\n         <p>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </p>\n         <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</p>\n      ",
                "required": true,
                "shape_name": "S3Uri",
                "max_length": 1024
              },
              "InputFormat": {
                "type": "string",
                "enum": [
                  "ONE_DOC_PER_FILE",
                  "ONE_DOC_PER_LINE"
                ],
                "zonbookDocumentation": "\n         <simpara>Specifies how the text in an input file should be processed:</simpara>\n         <itemizedlist>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</simpara>\n            </listitem>\n         </itemizedlist>\n      ",
                "documentation": "\n         <p>Specifies how the text in an input file should be processed:</p>\n         <ul>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</p>\n            </li>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</p>\n            </li>\n         </ul>\n      ",
                "shape_name": "InputFormat"
              }
            },
            "zonbookDocumentation": "\n         <simpara>Specifies the format and location of the input data for the job.</simpara>\n      ",
            "documentation": "\n         <p>Specifies the format and location of the input data for the job.</p>\n      ",
            "required": true,
            "shape_name": "InputDataConfig"
          },
          "OutputDataConfig": {
            "type": "structure",
            "members": {
              "S3Uri": {
                "type": "string",
                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                "zonbookDocumentation": "\n         <simpara>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</simpara>\n         <simpara>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</simpara>\n      ",
                "documentation": "\n         <p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</p>\n         <p>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</p>\n      ",
                "required": true,
                "shape_name": "S3Uri",
                "max_length": 1024
              }
            },
            "zonbookDocumentation": "\n         <simpara>Specifies where to send the output files. The output is a compressed archive with two\n      files, <code>topic-terms.csv</code> that lists the terms associated with each topic, and\n        <code>doc-topics.csv</code> that lists the documents associated with each topic</simpara>\n      ",
            "documentation": "\n         <p>Specifies where to send the output files. The output is a compressed archive with two\n      files, <code>topic-terms.csv</code> that lists the terms associated with each topic, and\n        <code>doc-topics.csv</code> that lists the documents associated with each topic</p>\n      ",
            "required": true,
            "shape_name": "OutputDataConfig"
          },
          "DataAccessRoleArn": {
            "type": "string",
            "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
            "zonbookDocumentation": "\n         <simpara>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role\n      that grants Amazon Comprehend read access to your input data. For more information, see <ulink url=\"https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions\"/>.</simpara>\n      ",
            "documentation": "\n         <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role\n      that grants Amazon Comprehend read access to your input data. For more information, see <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions\">https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions</a>.</p>\n      ",
            "required": true,
            "shape_name": "IamRoleArn"
          },
          "JobName": {
            "type": "string",
            "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
            "zonbookDocumentation": "\n         <simpara>The identifier of the job.</simpara>\n      ",
            "documentation": "\n         <p>The identifier of the job.</p>\n      ",
            "shape_name": "JobName",
            "min_length": 1,
            "max_length": 256
          },
          "NumberOfTopics": {
            "type": "integer",
            "zonbookDocumentation": "\n         <simpara>The number of topics to detect.</simpara>\n      ",
            "documentation": "\n         <p>The number of topics to detect.</p>\n      ",
            "shape_name": "NumberOfTopicsInteger",
            "min_length": 1,
            "max_length": 100
          },
          "ClientRequestToken": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]+$",
            "zonbookDocumentation": "\n         <simpara>A unique identifier for the request. If you do not set the client request token, Amazon Comprehend\n      generates one.</simpara>\n      ",
            "documentation": "\n         <p>A unique identifier for the request. If you do not set the client request token, Amazon Comprehend\n      generates one.</p>\n      ",
            "idempotencyToken": true,
            "shape_name": "ClientRequestTokenString",
            "min_length": 1,
            "max_length": 64
          }
        },
        "shape_name": "StartTopicsDetectionJobRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "JobId": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The identifier generated for the job. To get the status of the job, use this identifier\n      with the <code>DescribeTopicDetectionJob</code> operation.</simpara>\n      ",
            "documentation": "\n         <p>The identifier generated for the job. To get the status of the job, use this identifier\n      with the <code>DescribeTopicDetectionJob</code> operation.</p>\n      ",
            "shape_name": "JobId",
            "min_length": 1,
            "max_length": 32
          },
          "JobStatus": {
            "type": "string",
            "enum": [
              "SUBMITTED",
              "IN_PROGRESS",
              "COMPLETED",
              "FAILED",
              "STOP_REQUESTED",
              "STOPPED"
            ],
            "zonbookDocumentation": "\n         <simpara>The status of the job: </simpara>\n         <itemizedlist>\n            <listitem>\n               <simpara>SUBMITTED - The job has been received and is queued for processing.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>IN_PROGRESS - Amazon Comprehend is processing the job.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>COMPLETED - The job was successfully completed and the output is\n          available.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>FAILED - The job did not complete. To get details, use the\n            <code>DescribeTopicDetectionJob</code> operation.</simpara>\n            </listitem>\n         </itemizedlist>\n      ",
            "documentation": "\n         <p>The status of the job: </p>\n         <ul>\n            <li>\n               <p>SUBMITTED - The job has been received and is queued for processing.</p>\n            </li>\n            <li>\n               <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p>\n            </li>\n            <li>\n               <p>COMPLETED - The job was successfully completed and the output is\n          available.</p>\n            </li>\n            <li>\n               <p>FAILED - The job did not complete. To get details, use the\n            <code>DescribeTopicDetectionJob</code> operation.</p>\n            </li>\n         </ul>\n      ",
            "shape_name": "JobStatus"
          }
        },
        "shape_name": "StartTopicsDetectionJobResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeds the limit. Resubmit your request later.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeds the limit. Resubmit your request later.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": "\n         <p>Starts an asynchronous topic detection job. Use the\n        <code>DescribeTopicDetectionJob</code> operation to track the status of a job.</p>\n      "
    },
    "DescribeTopicsDetectionJob": {
      "name": "DescribeTopicsDetectionJob",
      "input": {
        "type": "structure",
        "members": {
          "JobId": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The identifier assigned by the user to the detection job.</simpara>\n      ",
            "documentation": "\n         <p>The identifier assigned by the user to the detection job.</p>\n      ",
            "required": true,
            "shape_name": "JobId",
            "min_length": 1,
            "max_length": 32
          }
        },
        "shape_name": "DescribeTopicsDetectionJobRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "TopicsDetectionJobProperties": {
            "type": "structure",
            "members": {
              "JobId": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>The identifier assigned to the topic detection job.</simpara>\n      ",
                "documentation": "\n         <p>The identifier assigned to the topic detection job.</p>\n      ",
                "shape_name": "JobId",
                "min_length": 1,
                "max_length": 32
              },
              "JobName": {
                "type": "string",
                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                "zonbookDocumentation": "\n         <simpara>The name of the topic detection job.</simpara>\n      ",
                "documentation": "\n         <p>The name of the topic detection job.</p>\n      ",
                "shape_name": "JobName",
                "min_length": 1,
                "max_length": 256
              },
              "JobStatus": {
                "type": "string",
                "enum": [
                  "SUBMITTED",
                  "IN_PROGRESS",
                  "COMPLETED",
                  "FAILED",
                  "STOP_REQUESTED",
                  "STOPPED"
                ],
                "zonbookDocumentation": "\n         <simpara>The current status of the topic detection job. If the status is <code>Failed</code>,\n      the reason for the failure is shown in the <code>Message</code> field.</simpara>\n      ",
                "documentation": "\n         <p>The current status of the topic detection job. If the status is <code>Failed</code>,\n      the reason for the failure is shown in the <code>Message</code> field.</p>\n      ",
                "shape_name": "JobStatus"
              },
              "Message": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>A description for the status of a job.</simpara>\n      ",
                "documentation": "\n         <p>A description for the status of a job.</p>\n      ",
                "shape_name": "AnyLengthString"
              },
              "SubmitTime": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <simpara>The time that the topic detection job was submitted for processing.</simpara>\n      ",
                "documentation": "\n         <p>The time that the topic detection job was submitted for processing.</p>\n      ",
                "shape_name": "Timestamp"
              },
              "EndTime": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <simpara>The time that the topic detection job was completed.</simpara>\n      ",
                "documentation": "\n         <p>The time that the topic detection job was completed.</p>\n      ",
                "shape_name": "Timestamp"
              },
              "InputDataConfig": {
                "type": "structure",
                "members": {
                  "S3Uri": {
                    "type": "string",
                    "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                    "zonbookDocumentation": "\n         <simpara>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </simpara>\n         <simpara>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</simpara>\n      ",
                    "documentation": "\n         <p>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </p>\n         <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</p>\n      ",
                    "required": true,
                    "shape_name": "S3Uri",
                    "max_length": 1024
                  },
                  "InputFormat": {
                    "type": "string",
                    "enum": [
                      "ONE_DOC_PER_FILE",
                      "ONE_DOC_PER_LINE"
                    ],
                    "zonbookDocumentation": "\n         <simpara>Specifies how the text in an input file should be processed:</simpara>\n         <itemizedlist>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</simpara>\n            </listitem>\n         </itemizedlist>\n      ",
                    "documentation": "\n         <p>Specifies how the text in an input file should be processed:</p>\n         <ul>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</p>\n            </li>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</p>\n            </li>\n         </ul>\n      ",
                    "shape_name": "InputFormat"
                  }
                },
                "zonbookDocumentation": "\n         <simpara>The input data configuration supplied when you created the topic detection\n      job.</simpara>\n      ",
                "documentation": "\n         <p>The input data configuration supplied when you created the topic detection\n      job.</p>\n      ",
                "shape_name": "InputDataConfig"
              },
              "OutputDataConfig": {
                "type": "structure",
                "members": {
                  "S3Uri": {
                    "type": "string",
                    "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                    "zonbookDocumentation": "\n         <simpara>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</simpara>\n         <simpara>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</simpara>\n      ",
                    "documentation": "\n         <p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</p>\n         <p>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</p>\n      ",
                    "required": true,
                    "shape_name": "S3Uri",
                    "max_length": 1024
                  }
                },
                "zonbookDocumentation": "\n         <simpara>The output data configuration supplied when you created the topic detection\n      job.</simpara>\n      ",
                "documentation": "\n         <p>The output data configuration supplied when you created the topic detection\n      job.</p>\n      ",
                "shape_name": "OutputDataConfig"
              },
              "NumberOfTopics": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>The number of topics to detect supplied when you created the topic detection job. The\n      default is 10. </simpara>\n      ",
                "documentation": "\n         <p>The number of topics to detect supplied when you created the topic detection job. The\n      default is 10. </p>\n      ",
                "shape_name": "Integer"
              }
            },
            "zonbookDocumentation": "\n         <simpara>The list of properties for the requested job.</simpara>\n      ",
            "documentation": "\n         <p>The list of properties for the requested job.</p>\n      ",
            "shape_name": "TopicsDetectionJobProperties"
          }
        },
        "shape_name": "DescribeTopicsDetectionJobResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The specified job was not found. Check the job ID and try again.</simpara>\n      ",
          "documentation": "\n         <p>The specified job was not found. Check the job ID and try again.</p>\n      ",
          "shape_name": "JobNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeds the limit. Resubmit your request later.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeds the limit. Resubmit your request later.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": "\n         <p>Gets the properties associated with a topic detection job. Use this operation to get\n      the status of a detection job.</p>\n      "
    },
    "ListTopicsDetectionJobs": {
      "name": "ListTopicsDetectionJobs",
      "input": {
        "type": "structure",
        "members": {
          "Filter": {
            "type": "structure",
            "members": {
              "JobName": {
                "type": "string",
                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                "zonbookDocumentation": "\n         <simpara/>\n      ",
                "documentation": "\n         <p/>\n      ",
                "shape_name": "JobName",
                "min_length": 1,
                "max_length": 256
              },
              "JobStatus": {
                "type": "string",
                "enum": [
                  "SUBMITTED",
                  "IN_PROGRESS",
                  "COMPLETED",
                  "FAILED",
                  "STOP_REQUESTED",
                  "STOPPED"
                ],
                "zonbookDocumentation": "\n         <simpara>Filters the list of topic detection jobs based on job status. Returns only jobs with\n      the specified status.</simpara>\n      ",
                "documentation": "\n         <p>Filters the list of topic detection jobs based on job status. Returns only jobs with\n      the specified status.</p>\n      ",
                "shape_name": "JobStatus"
              },
              "SubmitTimeBefore": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <simpara>Filters the list of jobs based on the time that the job was submitted for processing.\n      Only returns jobs submitted before the specified time. Jobs are returned in descending order,\n      newest to oldest.</simpara>\n      ",
                "documentation": "\n         <p>Filters the list of jobs based on the time that the job was submitted for processing.\n      Only returns jobs submitted before the specified time. Jobs are returned in descending order,\n      newest to oldest.</p>\n      ",
                "shape_name": "Timestamp"
              },
              "SubmitTimeAfter": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <simpara>Filters the list of jobs based on the time that the job was submitted for processing.\n      Only returns jobs submitted after the specified time. Jobs are returned in ascending order,\n      oldest to newest.</simpara>\n      ",
                "documentation": "\n         <p>Filters the list of jobs based on the time that the job was submitted for processing.\n      Only returns jobs submitted after the specified time. Jobs are returned in ascending order,\n      oldest to newest.</p>\n      ",
                "shape_name": "Timestamp"
              }
            },
            "zonbookDocumentation": "\n         <simpara>Filters the jobs that are returned. Jobs can be filtered on their name, status, or the\n      date and time that they were submitted. You can set only one filter at a time.</simpara>\n      ",
            "documentation": "\n         <p>Filters the jobs that are returned. Jobs can be filtered on their name, status, or the\n      date and time that they were submitted. You can set only one filter at a time.</p>\n      ",
            "shape_name": "TopicsDetectionJobFilter"
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>Identifies the next page of results to return.</simpara>\n      ",
            "documentation": "\n         <p>Identifies the next page of results to return.</p>\n      ",
            "shape_name": "String",
            "min_length": 1
          },
          "MaxResults": {
            "type": "integer",
            "zonbookDocumentation": "\n         <simpara>The maximum number of results to return in each page. The default is 100.</simpara>\n      ",
            "documentation": "\n         <p>The maximum number of results to return in each page. The default is 100.</p>\n      ",
            "shape_name": "MaxResultsInteger",
            "min_length": 1,
            "max_length": 500
          }
        },
        "shape_name": "ListTopicsDetectionJobsRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "TopicsDetectionJobPropertiesList": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list containing the properties of each job that is returned.</simpara>\n      ",
            "documentation": "\n         <p>A list containing the properties of each job that is returned.</p>\n      ",
            "shape_name": "TopicsDetectionJobPropertiesList",
            "members": {
              "type": "structure",
              "members": {
                "JobId": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The identifier assigned to the topic detection job.</simpara>\n      ",
                  "documentation": "\n         <p>The identifier assigned to the topic detection job.</p>\n      ",
                  "shape_name": "JobId",
                  "min_length": 1,
                  "max_length": 32
                },
                "JobName": {
                  "type": "string",
                  "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                  "zonbookDocumentation": "\n         <simpara>The name of the topic detection job.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the topic detection job.</p>\n      ",
                  "shape_name": "JobName",
                  "min_length": 1,
                  "max_length": 256
                },
                "JobStatus": {
                  "type": "string",
                  "enum": [
                    "SUBMITTED",
                    "IN_PROGRESS",
                    "COMPLETED",
                    "FAILED",
                    "STOP_REQUESTED",
                    "STOPPED"
                  ],
                  "zonbookDocumentation": "\n         <simpara>The current status of the topic detection job. If the status is <code>Failed</code>,\n      the reason for the failure is shown in the <code>Message</code> field.</simpara>\n      ",
                  "documentation": "\n         <p>The current status of the topic detection job. If the status is <code>Failed</code>,\n      the reason for the failure is shown in the <code>Message</code> field.</p>\n      ",
                  "shape_name": "JobStatus"
                },
                "Message": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>A description for the status of a job.</simpara>\n      ",
                  "documentation": "\n         <p>A description for the status of a job.</p>\n      ",
                  "shape_name": "AnyLengthString"
                },
                "SubmitTime": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>The time that the topic detection job was submitted for processing.</simpara>\n      ",
                  "documentation": "\n         <p>The time that the topic detection job was submitted for processing.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "EndTime": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>The time that the topic detection job was completed.</simpara>\n      ",
                  "documentation": "\n         <p>The time that the topic detection job was completed.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "InputDataConfig": {
                  "type": "structure",
                  "members": {
                    "S3Uri": {
                      "type": "string",
                      "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                      "zonbookDocumentation": "\n         <simpara>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </simpara>\n         <simpara>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</simpara>\n      ",
                      "documentation": "\n         <p>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </p>\n         <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</p>\n      ",
                      "required": true,
                      "shape_name": "S3Uri",
                      "max_length": 1024
                    },
                    "InputFormat": {
                      "type": "string",
                      "enum": [
                        "ONE_DOC_PER_FILE",
                        "ONE_DOC_PER_LINE"
                      ],
                      "zonbookDocumentation": "\n         <simpara>Specifies how the text in an input file should be processed:</simpara>\n         <itemizedlist>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</simpara>\n            </listitem>\n         </itemizedlist>\n      ",
                      "documentation": "\n         <p>Specifies how the text in an input file should be processed:</p>\n         <ul>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</p>\n            </li>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</p>\n            </li>\n         </ul>\n      ",
                      "shape_name": "InputFormat"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>The input data configuration supplied when you created the topic detection\n      job.</simpara>\n      ",
                  "documentation": "\n         <p>The input data configuration supplied when you created the topic detection\n      job.</p>\n      ",
                  "shape_name": "InputDataConfig"
                },
                "OutputDataConfig": {
                  "type": "structure",
                  "members": {
                    "S3Uri": {
                      "type": "string",
                      "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                      "zonbookDocumentation": "\n         <simpara>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</simpara>\n         <simpara>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</simpara>\n      ",
                      "documentation": "\n         <p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</p>\n         <p>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</p>\n      ",
                      "required": true,
                      "shape_name": "S3Uri",
                      "max_length": 1024
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>The output data configuration supplied when you created the topic detection\n      job.</simpara>\n      ",
                  "documentation": "\n         <p>The output data configuration supplied when you created the topic detection\n      job.</p>\n      ",
                  "shape_name": "OutputDataConfig"
                },
                "NumberOfTopics": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <simpara>The number of topics to detect supplied when you created the topic detection job. The\n      default is 10. </simpara>\n      ",
                  "documentation": "\n         <p>The number of topics to detect supplied when you created the topic detection job. The\n      default is 10. </p>\n      ",
                  "shape_name": "Integer"
                }
              },
              "zonbookDocumentation": "\n         <simpara>Provides information about a topic detection job.</simpara>\n      ",
              "documentation": "\n         <p>Provides information about a topic detection job.</p>\n      ",
              "shape_name": "TopicsDetectionJobProperties"
            }
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>Identifies the next page of results to return.</simpara>\n      ",
            "documentation": "\n         <p>Identifies the next page of results to return.</p>\n      ",
            "shape_name": "String",
            "min_length": 1
          }
        },
        "shape_name": "ListTopicsDetectionJobsResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeds the limit. Resubmit your request later.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeds the limit. Resubmit your request later.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The filter specified for the <code>ListTopicDetectionJobs</code> operation is invalid.\n      Specify a different filter.</simpara>\n      ",
          "documentation": "\n         <p>The filter specified for the <code>ListTopicDetectionJobs</code> operation is invalid.\n      Specify a different filter.</p>\n      ",
          "shape_name": "InvalidFilterException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": "\n         <p>Gets a list of the topic detection jobs that you have submitted.</p>\n      "
    },
    "StartSentimentDetectionJob": {
      "name": "StartSentimentDetectionJob",
      "input": {
        "type": "structure",
        "members": {
          "InputDataConfig": {
            "type": "structure",
            "members": {
              "S3Uri": {
                "type": "string",
                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                "zonbookDocumentation": "\n         <simpara>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </simpara>\n         <simpara>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</simpara>\n      ",
                "documentation": "\n         <p>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </p>\n         <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</p>\n      ",
                "required": true,
                "shape_name": "S3Uri",
                "max_length": 1024
              },
              "InputFormat": {
                "type": "string",
                "enum": [
                  "ONE_DOC_PER_FILE",
                  "ONE_DOC_PER_LINE"
                ],
                "zonbookDocumentation": "\n         <simpara>Specifies how the text in an input file should be processed:</simpara>\n         <itemizedlist>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</simpara>\n            </listitem>\n         </itemizedlist>\n      ",
                "documentation": "\n         <p>Specifies how the text in an input file should be processed:</p>\n         <ul>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</p>\n            </li>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</p>\n            </li>\n         </ul>\n      ",
                "shape_name": "InputFormat"
              }
            },
            "zonbookDocumentation": "\n         <para>Specifies the format and location of the input data for the job.</para>\n      ",
            "documentation": "\n         <p>Specifies the format and location of the input data for the job.</p>\n      ",
            "required": true,
            "shape_name": "InputDataConfig"
          },
          "OutputDataConfig": {
            "type": "structure",
            "members": {
              "S3Uri": {
                "type": "string",
                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                "zonbookDocumentation": "\n         <simpara>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</simpara>\n         <simpara>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</simpara>\n      ",
                "documentation": "\n         <p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</p>\n         <p>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</p>\n      ",
                "required": true,
                "shape_name": "S3Uri",
                "max_length": 1024
              }
            },
            "zonbookDocumentation": "\n         <para>Specifies where to send the output files. </para>\n      ",
            "documentation": "\n         <p>Specifies where to send the output files. </p>\n      ",
            "required": true,
            "shape_name": "OutputDataConfig"
          },
          "DataAccessRoleArn": {
            "type": "string",
            "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
            "zonbookDocumentation": "\n         <para>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that\n      grants Amazon Comprehend read access to your input data. For more information, see <ulink url=\"https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions\"/>.</para>\n      ",
            "documentation": "\n         <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that\n      grants Amazon Comprehend read access to your input data. For more information, see <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions\">https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions</a>.</p>\n      ",
            "required": true,
            "shape_name": "IamRoleArn"
          },
          "JobName": {
            "type": "string",
            "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
            "zonbookDocumentation": "\n         <para>The identifier of the job.</para>\n      ",
            "documentation": "\n         <p>The identifier of the job.</p>\n      ",
            "shape_name": "JobName",
            "min_length": 1,
            "max_length": 256
          },
          "LanguageCode": {
            "type": "string",
            "enum": [
              "en",
              "es",
              "fr",
              "de",
              "it",
              "pt"
            ],
            "zonbookDocumentation": "\n         <para>The language of the input documents. You can specify English (\"en\") or Spanish (\"es\"). All\n      documents must be in the same language.</para>\n      ",
            "documentation": "\n         <p>The language of the input documents. You can specify English (\"en\") or Spanish (\"es\"). All\n      documents must be in the same language.</p>\n      ",
            "required": true,
            "shape_name": "LanguageCode"
          },
          "ClientRequestToken": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]+$",
            "zonbookDocumentation": "\n         <para>A unique identifier for the request. If you don't set the client request token, Amazon Comprehend\n      generates one.</para>\n      ",
            "documentation": "\n         <p>A unique identifier for the request. If you don't set the client request token, Amazon Comprehend\n      generates one.</p>\n      ",
            "idempotencyToken": true,
            "shape_name": "ClientRequestTokenString",
            "min_length": 1,
            "max_length": 64
          }
        },
        "shape_name": "StartSentimentDetectionJobRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "JobId": {
            "type": "string",
            "zonbookDocumentation": "\n         <para>The identifier generated for the job. To get the status of a job, use this identifier with\n      the <xref linkend=\"API_DescribeSentimentDetectionJob\"/> operation.</para>\n      ",
            "documentation": "\n         <p>The identifier generated for the job. To get the status of a job, use this identifier with\n      the  operation.</p>\n      ",
            "shape_name": "JobId",
            "min_length": 1,
            "max_length": 32
          },
          "JobStatus": {
            "type": "string",
            "enum": [
              "SUBMITTED",
              "IN_PROGRESS",
              "COMPLETED",
              "FAILED",
              "STOP_REQUESTED",
              "STOPPED"
            ],
            "zonbookDocumentation": "\n         <para>The status of the job. </para>\n         <itemizedlist>\n            <listitem>\n               <para>SUBMITTED - The job has been received and is queued for processing.</para>\n            </listitem>\n            <listitem>\n               <para>IN_PROGRESS - Amazon Comprehend is processing the job.</para>\n            </listitem>\n            <listitem>\n               <para>COMPLETED - The job was successfully completed and the output is available.</para>\n            </listitem>\n            <listitem>\n               <para>FAILED - The job did not complete. To get details, use the <xref linkend=\"API_DescribeSentimentDetectionJob\"/> operation.</para>\n            </listitem>\n         </itemizedlist>\n      ",
            "documentation": "\n         <p>The status of the job. </p>\n         <ul>\n            <li>\n               <p>SUBMITTED - The job has been received and is queued for processing.</p>\n            </li>\n            <li>\n               <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p>\n            </li>\n            <li>\n               <p>COMPLETED - The job was successfully completed and the output is available.</p>\n            </li>\n            <li>\n               <p>FAILED - The job did not complete. To get details, use the  operation.</p>\n            </li>\n         </ul>\n      ",
            "shape_name": "JobStatus"
          }
        },
        "shape_name": "StartSentimentDetectionJobResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeds the limit. Resubmit your request later.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeds the limit. Resubmit your request later.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": "\n         <p>Starts an asynchronous sentiment detection job for a collection of documents. use the\n         operation to track the status of a\n      job.</p>\n      "
    },
    "DescribeSentimentDetectionJob": {
      "name": "DescribeSentimentDetectionJob",
      "input": {
        "type": "structure",
        "members": {
          "JobId": {
            "type": "string",
            "zonbookDocumentation": "\n         <para>The identifier that Amazon Comprehend generated for the job. The <xref linkend=\"API_StartSentimentDetectionJob\"/> operation returns this identifier in its\n      response.</para>\n      ",
            "documentation": "\n         <p>The identifier that Amazon Comprehend generated for the job. The  operation returns this identifier in its\n      response.</p>\n      ",
            "required": true,
            "shape_name": "JobId",
            "min_length": 1,
            "max_length": 32
          }
        },
        "shape_name": "DescribeSentimentDetectionJobRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "SentimentDetectionJobProperties": {
            "type": "structure",
            "members": {
              "JobId": {
                "type": "string",
                "zonbookDocumentation": "\n         <para>The identifier assigned to the sentiment detection job.</para>\n      ",
                "documentation": "\n         <p>The identifier assigned to the sentiment detection job.</p>\n      ",
                "shape_name": "JobId",
                "min_length": 1,
                "max_length": 32
              },
              "JobName": {
                "type": "string",
                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                "zonbookDocumentation": "\n         <para>The name that you assigned to the sentiment detection job</para>\n      ",
                "documentation": "\n         <p>The name that you assigned to the sentiment detection job</p>\n      ",
                "shape_name": "JobName",
                "min_length": 1,
                "max_length": 256
              },
              "JobStatus": {
                "type": "string",
                "enum": [
                  "SUBMITTED",
                  "IN_PROGRESS",
                  "COMPLETED",
                  "FAILED",
                  "STOP_REQUESTED",
                  "STOPPED"
                ],
                "zonbookDocumentation": "\n         <para>The current status of the sentiment detection job. If the status is <code>FAILED</code>,\n      the <code>Messages</code> field shows the reason for the failure.</para>\n      ",
                "documentation": "\n         <p>The current status of the sentiment detection job. If the status is <code>FAILED</code>,\n      the <code>Messages</code> field shows the reason for the failure.</p>\n      ",
                "shape_name": "JobStatus"
              },
              "Message": {
                "type": "string",
                "zonbookDocumentation": "\n         <para>A description of the status of a job.</para>\n      ",
                "documentation": "\n         <p>A description of the status of a job.</p>\n      ",
                "shape_name": "AnyLengthString"
              },
              "SubmitTime": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <para>The time that the sentiment detection job was submitted for processing.</para>\n      ",
                "documentation": "\n         <p>The time that the sentiment detection job was submitted for processing.</p>\n      ",
                "shape_name": "Timestamp"
              },
              "EndTime": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <para>The time that the sentiment detection job ended.</para>\n      ",
                "documentation": "\n         <p>The time that the sentiment detection job ended.</p>\n      ",
                "shape_name": "Timestamp"
              },
              "InputDataConfig": {
                "type": "structure",
                "members": {
                  "S3Uri": {
                    "type": "string",
                    "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                    "zonbookDocumentation": "\n         <simpara>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </simpara>\n         <simpara>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</simpara>\n      ",
                    "documentation": "\n         <p>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </p>\n         <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</p>\n      ",
                    "required": true,
                    "shape_name": "S3Uri",
                    "max_length": 1024
                  },
                  "InputFormat": {
                    "type": "string",
                    "enum": [
                      "ONE_DOC_PER_FILE",
                      "ONE_DOC_PER_LINE"
                    ],
                    "zonbookDocumentation": "\n         <simpara>Specifies how the text in an input file should be processed:</simpara>\n         <itemizedlist>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</simpara>\n            </listitem>\n         </itemizedlist>\n      ",
                    "documentation": "\n         <p>Specifies how the text in an input file should be processed:</p>\n         <ul>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</p>\n            </li>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</p>\n            </li>\n         </ul>\n      ",
                    "shape_name": "InputFormat"
                  }
                },
                "zonbookDocumentation": "\n         <para>The input data configuration that you supplied when you created the sentiment detection\n      job.</para>\n      ",
                "documentation": "\n         <p>The input data configuration that you supplied when you created the sentiment detection\n      job.</p>\n      ",
                "shape_name": "InputDataConfig"
              },
              "OutputDataConfig": {
                "type": "structure",
                "members": {
                  "S3Uri": {
                    "type": "string",
                    "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                    "zonbookDocumentation": "\n         <simpara>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</simpara>\n         <simpara>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</simpara>\n      ",
                    "documentation": "\n         <p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</p>\n         <p>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</p>\n      ",
                    "required": true,
                    "shape_name": "S3Uri",
                    "max_length": 1024
                  }
                },
                "zonbookDocumentation": "\n         <para>The output data configuration that you supplied when you created the sentiment detection\n      job.</para>\n      ",
                "documentation": "\n         <p>The output data configuration that you supplied when you created the sentiment detection\n      job.</p>\n      ",
                "shape_name": "OutputDataConfig"
              },
              "LanguageCode": {
                "type": "string",
                "enum": [
                  "en",
                  "es",
                  "fr",
                  "de",
                  "it",
                  "pt"
                ],
                "zonbookDocumentation": "\n         <para>The language code of the input documents.</para>\n      ",
                "documentation": "\n         <p>The language code of the input documents.</p>\n      ",
                "shape_name": "LanguageCode"
              },
              "DataAccessRoleArn": {
                "type": "string",
                "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                "zonbookDocumentation": "\n         <para>The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.</para>\n      ",
                "documentation": "\n         <p>The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.</p>\n      ",
                "shape_name": "IamRoleArn"
              }
            },
            "zonbookDocumentation": "\n         <para>An object that contains the properties associated with a sentiment detection job.</para>\n      ",
            "documentation": "\n         <p>An object that contains the properties associated with a sentiment detection job.</p>\n      ",
            "shape_name": "SentimentDetectionJobProperties"
          }
        },
        "shape_name": "DescribeSentimentDetectionJobResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The specified job was not found. Check the job ID and try again.</simpara>\n      ",
          "documentation": "\n         <p>The specified job was not found. Check the job ID and try again.</p>\n      ",
          "shape_name": "JobNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeds the limit. Resubmit your request later.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeds the limit. Resubmit your request later.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": "\n         <p>Gets the properties associated with a sentiment detection job. Use this operation to get\n      the status of a detection job.</p>\n      "
    },
    "ListSentimentDetectionJobs": {
      "name": "ListSentimentDetectionJobs",
      "input": {
        "type": "structure",
        "members": {
          "Filter": {
            "type": "structure",
            "members": {
              "JobName": {
                "type": "string",
                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                "zonbookDocumentation": "\n         <para>Filters on the name of the job.</para>\n      ",
                "documentation": "\n         <p>Filters on the name of the job.</p>\n      ",
                "shape_name": "JobName",
                "min_length": 1,
                "max_length": 256
              },
              "JobStatus": {
                "type": "string",
                "enum": [
                  "SUBMITTED",
                  "IN_PROGRESS",
                  "COMPLETED",
                  "FAILED",
                  "STOP_REQUESTED",
                  "STOPPED"
                ],
                "zonbookDocumentation": "\n         <para>Filters the list of jobs based on job status. Returns only jobs with the specified\n      status.</para>\n      ",
                "documentation": "\n         <p>Filters the list of jobs based on job status. Returns only jobs with the specified\n      status.</p>\n      ",
                "shape_name": "JobStatus"
              },
              "SubmitTimeBefore": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <para>Filters the list of jobs based on the time that the job was submitted for processing.\n      Returns only jobs submitted before the specified time. Jobs are returned in ascending order,\n      oldest to newest.</para>\n      ",
                "documentation": "\n         <p>Filters the list of jobs based on the time that the job was submitted for processing.\n      Returns only jobs submitted before the specified time. Jobs are returned in ascending order,\n      oldest to newest.</p>\n      ",
                "shape_name": "Timestamp"
              },
              "SubmitTimeAfter": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <para>Filters the list of jobs based on the time that the job was submitted for processing.\n      Returns only jobs submitted after the specified time. Jobs are returned in descending order,\n      newest to oldest.</para>\n      ",
                "documentation": "\n         <p>Filters the list of jobs based on the time that the job was submitted for processing.\n      Returns only jobs submitted after the specified time. Jobs are returned in descending order,\n      newest to oldest.</p>\n      ",
                "shape_name": "Timestamp"
              }
            },
            "zonbookDocumentation": "\n         <para>Filters the jobs that are returned. You can filter jobs on their name, status, or the date\n      and time that they were submitted. You can only set one filter at a time.</para>\n      ",
            "documentation": "\n         <p>Filters the jobs that are returned. You can filter jobs on their name, status, or the date\n      and time that they were submitted. You can only set one filter at a time.</p>\n      ",
            "shape_name": "SentimentDetectionJobFilter"
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <para>Identifies the next page of results to return.</para>\n      ",
            "documentation": "\n         <p>Identifies the next page of results to return.</p>\n      ",
            "shape_name": "String",
            "min_length": 1
          },
          "MaxResults": {
            "type": "integer",
            "zonbookDocumentation": "\n         <para>The maximum number of results to return in each page. The default is 100.</para>\n      ",
            "documentation": "\n         <p>The maximum number of results to return in each page. The default is 100.</p>\n      ",
            "shape_name": "MaxResultsInteger",
            "min_length": 1,
            "max_length": 500
          }
        },
        "shape_name": "ListSentimentDetectionJobsRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "SentimentDetectionJobPropertiesList": {
            "type": "list",
            "zonbookDocumentation": "\n         <para>A list containing the properties of each job that is returned.</para>\n      ",
            "documentation": "\n         <p>A list containing the properties of each job that is returned.</p>\n      ",
            "shape_name": "SentimentDetectionJobPropertiesList",
            "members": {
              "type": "structure",
              "members": {
                "JobId": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <para>The identifier assigned to the sentiment detection job.</para>\n      ",
                  "documentation": "\n         <p>The identifier assigned to the sentiment detection job.</p>\n      ",
                  "shape_name": "JobId",
                  "min_length": 1,
                  "max_length": 32
                },
                "JobName": {
                  "type": "string",
                  "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                  "zonbookDocumentation": "\n         <para>The name that you assigned to the sentiment detection job</para>\n      ",
                  "documentation": "\n         <p>The name that you assigned to the sentiment detection job</p>\n      ",
                  "shape_name": "JobName",
                  "min_length": 1,
                  "max_length": 256
                },
                "JobStatus": {
                  "type": "string",
                  "enum": [
                    "SUBMITTED",
                    "IN_PROGRESS",
                    "COMPLETED",
                    "FAILED",
                    "STOP_REQUESTED",
                    "STOPPED"
                  ],
                  "zonbookDocumentation": "\n         <para>The current status of the sentiment detection job. If the status is <code>FAILED</code>,\n      the <code>Messages</code> field shows the reason for the failure.</para>\n      ",
                  "documentation": "\n         <p>The current status of the sentiment detection job. If the status is <code>FAILED</code>,\n      the <code>Messages</code> field shows the reason for the failure.</p>\n      ",
                  "shape_name": "JobStatus"
                },
                "Message": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <para>A description of the status of a job.</para>\n      ",
                  "documentation": "\n         <p>A description of the status of a job.</p>\n      ",
                  "shape_name": "AnyLengthString"
                },
                "SubmitTime": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <para>The time that the sentiment detection job was submitted for processing.</para>\n      ",
                  "documentation": "\n         <p>The time that the sentiment detection job was submitted for processing.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "EndTime": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <para>The time that the sentiment detection job ended.</para>\n      ",
                  "documentation": "\n         <p>The time that the sentiment detection job ended.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "InputDataConfig": {
                  "type": "structure",
                  "members": {
                    "S3Uri": {
                      "type": "string",
                      "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                      "zonbookDocumentation": "\n         <simpara>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </simpara>\n         <simpara>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</simpara>\n      ",
                      "documentation": "\n         <p>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </p>\n         <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</p>\n      ",
                      "required": true,
                      "shape_name": "S3Uri",
                      "max_length": 1024
                    },
                    "InputFormat": {
                      "type": "string",
                      "enum": [
                        "ONE_DOC_PER_FILE",
                        "ONE_DOC_PER_LINE"
                      ],
                      "zonbookDocumentation": "\n         <simpara>Specifies how the text in an input file should be processed:</simpara>\n         <itemizedlist>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</simpara>\n            </listitem>\n         </itemizedlist>\n      ",
                      "documentation": "\n         <p>Specifies how the text in an input file should be processed:</p>\n         <ul>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</p>\n            </li>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</p>\n            </li>\n         </ul>\n      ",
                      "shape_name": "InputFormat"
                    }
                  },
                  "zonbookDocumentation": "\n         <para>The input data configuration that you supplied when you created the sentiment detection\n      job.</para>\n      ",
                  "documentation": "\n         <p>The input data configuration that you supplied when you created the sentiment detection\n      job.</p>\n      ",
                  "shape_name": "InputDataConfig"
                },
                "OutputDataConfig": {
                  "type": "structure",
                  "members": {
                    "S3Uri": {
                      "type": "string",
                      "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                      "zonbookDocumentation": "\n         <simpara>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</simpara>\n         <simpara>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</simpara>\n      ",
                      "documentation": "\n         <p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</p>\n         <p>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</p>\n      ",
                      "required": true,
                      "shape_name": "S3Uri",
                      "max_length": 1024
                    }
                  },
                  "zonbookDocumentation": "\n         <para>The output data configuration that you supplied when you created the sentiment detection\n      job.</para>\n      ",
                  "documentation": "\n         <p>The output data configuration that you supplied when you created the sentiment detection\n      job.</p>\n      ",
                  "shape_name": "OutputDataConfig"
                },
                "LanguageCode": {
                  "type": "string",
                  "enum": [
                    "en",
                    "es",
                    "fr",
                    "de",
                    "it",
                    "pt"
                  ],
                  "zonbookDocumentation": "\n         <para>The language code of the input documents.</para>\n      ",
                  "documentation": "\n         <p>The language code of the input documents.</p>\n      ",
                  "shape_name": "LanguageCode"
                },
                "DataAccessRoleArn": {
                  "type": "string",
                  "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                  "zonbookDocumentation": "\n         <para>The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.</para>\n      ",
                  "documentation": "\n         <p>The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.</p>\n      ",
                  "shape_name": "IamRoleArn"
                }
              },
              "zonbookDocumentation": "\n         <para>Provides information about a sentiment detection job.</para>\n      ",
              "documentation": "\n         <p>Provides information about a sentiment detection job.</p>\n      ",
              "shape_name": "SentimentDetectionJobProperties"
            }
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <para>Identifies the next page of results to return.</para>\n      ",
            "documentation": "\n         <p>Identifies the next page of results to return.</p>\n      ",
            "shape_name": "String",
            "min_length": 1
          }
        },
        "shape_name": "ListSentimentDetectionJobsResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeds the limit. Resubmit your request later.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeds the limit. Resubmit your request later.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The filter specified for the <code>ListTopicDetectionJobs</code> operation is invalid.\n      Specify a different filter.</simpara>\n      ",
          "documentation": "\n         <p>The filter specified for the <code>ListTopicDetectionJobs</code> operation is invalid.\n      Specify a different filter.</p>\n      ",
          "shape_name": "InvalidFilterException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": "\n         <p>Gets a list of sentiment detection jobs that you have submitted.</p>\n      "
    },
    "StopSentimentDetectionJob": {
      "name": "StopSentimentDetectionJob",
      "input": {
        "type": "structure",
        "members": {
          "JobId": {
            "type": "string",
            "zonbookDocumentation": "\n         <para>The identifier of the sentiment detection job to stop.</para>\n      ",
            "documentation": "\n         <p>The identifier of the sentiment detection job to stop.</p>\n      ",
            "required": true,
            "shape_name": "JobId",
            "min_length": 1,
            "max_length": 32
          }
        },
        "shape_name": "StopSentimentDetectionJobRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "JobId": {
            "type": "string",
            "zonbookDocumentation": "\n         <para>The identifier of the sentiment detection job to stop.</para>\n      ",
            "documentation": "\n         <p>The identifier of the sentiment detection job to stop.</p>\n      ",
            "shape_name": "JobId",
            "min_length": 1,
            "max_length": 32
          },
          "JobStatus": {
            "type": "string",
            "enum": [
              "SUBMITTED",
              "IN_PROGRESS",
              "COMPLETED",
              "FAILED",
              "STOP_REQUESTED",
              "STOPPED"
            ],
            "zonbookDocumentation": "\n         <para>Either <code>STOP_REQUESTED</code> if the job is currently running, or\n        <code>STOPPED</code> if the job was previously stopped with the\n        <code>StopSentimentDetectionJob</code> operation.</para>\n      ",
            "documentation": "\n         <p>Either <code>STOP_REQUESTED</code> if the job is currently running, or\n        <code>STOPPED</code> if the job was previously stopped with the\n        <code>StopSentimentDetectionJob</code> operation.</p>\n      ",
            "shape_name": "JobStatus"
          }
        },
        "shape_name": "StopSentimentDetectionJobResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The specified job was not found. Check the job ID and try again.</simpara>\n      ",
          "documentation": "\n         <p>The specified job was not found. Check the job ID and try again.</p>\n      ",
          "shape_name": "JobNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": "\n         <p>Stops a sentiment detection job in progress.</p>\n         <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put\n      into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it\n      is put into the <code>COMPLETED</code> state; otherwise the job is be stopped and put into the\n        <code>STOPPED</code> state.</p>\n         <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the\n        <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400\n      Internal Request Exception. </p>\n         <p>When a job is stopped, any documents already processed are written to the output\n      location.</p>\n      "
    },
    "StartKeyPhrasesDetectionJob": {
      "name": "StartKeyPhrasesDetectionJob",
      "input": {
        "type": "structure",
        "members": {
          "InputDataConfig": {
            "type": "structure",
            "members": {
              "S3Uri": {
                "type": "string",
                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                "zonbookDocumentation": "\n         <simpara>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </simpara>\n         <simpara>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</simpara>\n      ",
                "documentation": "\n         <p>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </p>\n         <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</p>\n      ",
                "required": true,
                "shape_name": "S3Uri",
                "max_length": 1024
              },
              "InputFormat": {
                "type": "string",
                "enum": [
                  "ONE_DOC_PER_FILE",
                  "ONE_DOC_PER_LINE"
                ],
                "zonbookDocumentation": "\n         <simpara>Specifies how the text in an input file should be processed:</simpara>\n         <itemizedlist>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</simpara>\n            </listitem>\n         </itemizedlist>\n      ",
                "documentation": "\n         <p>Specifies how the text in an input file should be processed:</p>\n         <ul>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</p>\n            </li>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</p>\n            </li>\n         </ul>\n      ",
                "shape_name": "InputFormat"
              }
            },
            "zonbookDocumentation": "\n         <para>Specifies the format and location of the input data for the job.</para>\n      ",
            "documentation": "\n         <p>Specifies the format and location of the input data for the job.</p>\n      ",
            "required": true,
            "shape_name": "InputDataConfig"
          },
          "OutputDataConfig": {
            "type": "structure",
            "members": {
              "S3Uri": {
                "type": "string",
                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                "zonbookDocumentation": "\n         <simpara>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</simpara>\n         <simpara>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</simpara>\n      ",
                "documentation": "\n         <p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</p>\n         <p>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</p>\n      ",
                "required": true,
                "shape_name": "S3Uri",
                "max_length": 1024
              }
            },
            "zonbookDocumentation": "\n         <para>Specifies where to send the output files.</para>\n      ",
            "documentation": "\n         <p>Specifies where to send the output files.</p>\n      ",
            "required": true,
            "shape_name": "OutputDataConfig"
          },
          "DataAccessRoleArn": {
            "type": "string",
            "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
            "zonbookDocumentation": "\n         <para>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that\n      grants Amazon Comprehend read access to your input data. For more information, see <ulink url=\"https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions\"/>.</para>\n      ",
            "documentation": "\n         <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that\n      grants Amazon Comprehend read access to your input data. For more information, see <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions\">https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions</a>.</p>\n      ",
            "required": true,
            "shape_name": "IamRoleArn"
          },
          "JobName": {
            "type": "string",
            "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
            "zonbookDocumentation": "\n         <para>The identifier of the job.</para>\n      ",
            "documentation": "\n         <p>The identifier of the job.</p>\n      ",
            "shape_name": "JobName",
            "min_length": 1,
            "max_length": 256
          },
          "LanguageCode": {
            "type": "string",
            "enum": [
              "en",
              "es",
              "fr",
              "de",
              "it",
              "pt"
            ],
            "zonbookDocumentation": "\n         <para>The language of the input documents. You can specify English (\"en\") or Spanish (\"es\"). All\n      documents must be in the same language.</para>\n      ",
            "documentation": "\n         <p>The language of the input documents. You can specify English (\"en\") or Spanish (\"es\"). All\n      documents must be in the same language.</p>\n      ",
            "required": true,
            "shape_name": "LanguageCode"
          },
          "ClientRequestToken": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]+$",
            "zonbookDocumentation": "\n         <para>A unique identifier for the request. If you don't set the client request token, Amazon Comprehend\n      generates one.</para>\n      ",
            "documentation": "\n         <p>A unique identifier for the request. If you don't set the client request token, Amazon Comprehend\n      generates one.</p>\n      ",
            "idempotencyToken": true,
            "shape_name": "ClientRequestTokenString",
            "min_length": 1,
            "max_length": 64
          }
        },
        "shape_name": "StartKeyPhrasesDetectionJobRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "JobId": {
            "type": "string",
            "zonbookDocumentation": "\n         <para>The identifier generated for the job. To get the status of a job, use this identifier with\n      the <xref linkend=\"API_DescribeKeyPhrasesDetectionJob\"/> operation.</para>\n      ",
            "documentation": "\n         <p>The identifier generated for the job. To get the status of a job, use this identifier with\n      the  operation.</p>\n      ",
            "shape_name": "JobId",
            "min_length": 1,
            "max_length": 32
          },
          "JobStatus": {
            "type": "string",
            "enum": [
              "SUBMITTED",
              "IN_PROGRESS",
              "COMPLETED",
              "FAILED",
              "STOP_REQUESTED",
              "STOPPED"
            ],
            "zonbookDocumentation": "\n         <para>The status of the job. </para>\n         <itemizedlist>\n            <listitem>\n               <para>SUBMITTED - The job has been received and is queued for processing.</para>\n            </listitem>\n            <listitem>\n               <para>IN_PROGRESS - Amazon Comprehend is processing the job.</para>\n            </listitem>\n            <listitem>\n               <para>COMPLETED - The job was successfully completed and the output is available.</para>\n            </listitem>\n            <listitem>\n               <para>FAILED - The job did not complete. To get details, use the <xref linkend=\"API_DescribeKeyPhrasesDetectionJob\"/> operation.</para>\n            </listitem>\n         </itemizedlist>\n      ",
            "documentation": "\n         <p>The status of the job. </p>\n         <ul>\n            <li>\n               <p>SUBMITTED - The job has been received and is queued for processing.</p>\n            </li>\n            <li>\n               <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p>\n            </li>\n            <li>\n               <p>COMPLETED - The job was successfully completed and the output is available.</p>\n            </li>\n            <li>\n               <p>FAILED - The job did not complete. To get details, use the  operation.</p>\n            </li>\n         </ul>\n      ",
            "shape_name": "JobStatus"
          }
        },
        "shape_name": "StartKeyPhrasesDetectionJobResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeds the limit. Resubmit your request later.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeds the limit. Resubmit your request later.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": "\n         <p>Starts an asynchronous key phrase detection job for a collection of documents. Use the\n         operation to track the status of a\n      job.</p>\n      "
    },
    "DescribeKeyPhrasesDetectionJob": {
      "name": "DescribeKeyPhrasesDetectionJob",
      "input": {
        "type": "structure",
        "members": {
          "JobId": {
            "type": "string",
            "zonbookDocumentation": "\n         <para>The identifier that Amazon Comprehend generated for the job. The <xref linkend=\"API_StartKeyPhrasesDetectionJob\"/> operation returns this identifier in its\n      response.</para>\n      ",
            "documentation": "\n         <p>The identifier that Amazon Comprehend generated for the job. The  operation returns this identifier in its\n      response.</p>\n      ",
            "required": true,
            "shape_name": "JobId",
            "min_length": 1,
            "max_length": 32
          }
        },
        "shape_name": "DescribeKeyPhrasesDetectionJobRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "KeyPhrasesDetectionJobProperties": {
            "type": "structure",
            "members": {
              "JobId": {
                "type": "string",
                "zonbookDocumentation": "\n         <para>The identifier assigned to the key phrases detection job.</para>\n      ",
                "documentation": "\n         <p>The identifier assigned to the key phrases detection job.</p>\n      ",
                "shape_name": "JobId",
                "min_length": 1,
                "max_length": 32
              },
              "JobName": {
                "type": "string",
                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                "zonbookDocumentation": "\n         <para>The name that you assigned the key phrases detection job.</para>\n      ",
                "documentation": "\n         <p>The name that you assigned the key phrases detection job.</p>\n      ",
                "shape_name": "JobName",
                "min_length": 1,
                "max_length": 256
              },
              "JobStatus": {
                "type": "string",
                "enum": [
                  "SUBMITTED",
                  "IN_PROGRESS",
                  "COMPLETED",
                  "FAILED",
                  "STOP_REQUESTED",
                  "STOPPED"
                ],
                "zonbookDocumentation": "\n         <para>The current status of the key phrases detection job. If the status is <code>FAILED</code>,\n      the <code>Message</code> field shows the reason for the failure.</para>\n      ",
                "documentation": "\n         <p>The current status of the key phrases detection job. If the status is <code>FAILED</code>,\n      the <code>Message</code> field shows the reason for the failure.</p>\n      ",
                "shape_name": "JobStatus"
              },
              "Message": {
                "type": "string",
                "zonbookDocumentation": "\n         <para>A description of the status of a job.</para>\n      ",
                "documentation": "\n         <p>A description of the status of a job.</p>\n      ",
                "shape_name": "AnyLengthString"
              },
              "SubmitTime": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <para>The time that the key phrases detection job was submitted for processing.</para>\n      ",
                "documentation": "\n         <p>The time that the key phrases detection job was submitted for processing.</p>\n      ",
                "shape_name": "Timestamp"
              },
              "EndTime": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <para>The time that the key phrases detection job completed.</para>\n      ",
                "documentation": "\n         <p>The time that the key phrases detection job completed.</p>\n      ",
                "shape_name": "Timestamp"
              },
              "InputDataConfig": {
                "type": "structure",
                "members": {
                  "S3Uri": {
                    "type": "string",
                    "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                    "zonbookDocumentation": "\n         <simpara>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </simpara>\n         <simpara>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</simpara>\n      ",
                    "documentation": "\n         <p>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </p>\n         <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</p>\n      ",
                    "required": true,
                    "shape_name": "S3Uri",
                    "max_length": 1024
                  },
                  "InputFormat": {
                    "type": "string",
                    "enum": [
                      "ONE_DOC_PER_FILE",
                      "ONE_DOC_PER_LINE"
                    ],
                    "zonbookDocumentation": "\n         <simpara>Specifies how the text in an input file should be processed:</simpara>\n         <itemizedlist>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</simpara>\n            </listitem>\n         </itemizedlist>\n      ",
                    "documentation": "\n         <p>Specifies how the text in an input file should be processed:</p>\n         <ul>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</p>\n            </li>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</p>\n            </li>\n         </ul>\n      ",
                    "shape_name": "InputFormat"
                  }
                },
                "zonbookDocumentation": "\n         <para>The input data configuration that you supplied when you created the key phrases detection\n      job.</para>\n      ",
                "documentation": "\n         <p>The input data configuration that you supplied when you created the key phrases detection\n      job.</p>\n      ",
                "shape_name": "InputDataConfig"
              },
              "OutputDataConfig": {
                "type": "structure",
                "members": {
                  "S3Uri": {
                    "type": "string",
                    "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                    "zonbookDocumentation": "\n         <simpara>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</simpara>\n         <simpara>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</simpara>\n      ",
                    "documentation": "\n         <p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</p>\n         <p>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</p>\n      ",
                    "required": true,
                    "shape_name": "S3Uri",
                    "max_length": 1024
                  }
                },
                "zonbookDocumentation": "\n         <para>The output data configuration that you supplied when you created the key phrases detection\n      job.</para>\n      ",
                "documentation": "\n         <p>The output data configuration that you supplied when you created the key phrases detection\n      job.</p>\n      ",
                "shape_name": "OutputDataConfig"
              },
              "LanguageCode": {
                "type": "string",
                "enum": [
                  "en",
                  "es",
                  "fr",
                  "de",
                  "it",
                  "pt"
                ],
                "zonbookDocumentation": "\n         <para>The language code of the input documents.</para>\n      ",
                "documentation": "\n         <p>The language code of the input documents.</p>\n      ",
                "shape_name": "LanguageCode"
              },
              "DataAccessRoleArn": {
                "type": "string",
                "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                "zonbookDocumentation": "\n         <para>The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.</para>\n      ",
                "documentation": "\n         <p>The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.</p>\n      ",
                "shape_name": "IamRoleArn"
              }
            },
            "zonbookDocumentation": "\n         <para>An object that contains the properties associated with a key phrases detection job.\n    </para>\n      ",
            "documentation": "\n         <p>An object that contains the properties associated with a key phrases detection job.\n    </p>\n      ",
            "shape_name": "KeyPhrasesDetectionJobProperties"
          }
        },
        "shape_name": "DescribeKeyPhrasesDetectionJobResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The specified job was not found. Check the job ID and try again.</simpara>\n      ",
          "documentation": "\n         <p>The specified job was not found. Check the job ID and try again.</p>\n      ",
          "shape_name": "JobNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeds the limit. Resubmit your request later.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeds the limit. Resubmit your request later.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": "\n         <p>Gets the properties associated with a key phrases detection job. Use this operation to get\n      the status of a detection job.</p>\n      "
    },
    "ListKeyPhrasesDetectionJobs": {
      "name": "ListKeyPhrasesDetectionJobs",
      "input": {
        "type": "structure",
        "members": {
          "Filter": {
            "type": "structure",
            "members": {
              "JobName": {
                "type": "string",
                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                "zonbookDocumentation": "\n         <para>Filters on the name of the job.</para>\n      ",
                "documentation": "\n         <p>Filters on the name of the job.</p>\n      ",
                "shape_name": "JobName",
                "min_length": 1,
                "max_length": 256
              },
              "JobStatus": {
                "type": "string",
                "enum": [
                  "SUBMITTED",
                  "IN_PROGRESS",
                  "COMPLETED",
                  "FAILED",
                  "STOP_REQUESTED",
                  "STOPPED"
                ],
                "zonbookDocumentation": "\n         <para>Filters the list of jobs based on job status. Returns only jobs with the specified\n      status.</para>\n      ",
                "documentation": "\n         <p>Filters the list of jobs based on job status. Returns only jobs with the specified\n      status.</p>\n      ",
                "shape_name": "JobStatus"
              },
              "SubmitTimeBefore": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <para>Filters the list of jobs based on the time that the job was submitted for processing.\n      Returns only jobs submitted before the specified time. Jobs are returned in ascending order,\n      oldest to newest.</para>\n      ",
                "documentation": "\n         <p>Filters the list of jobs based on the time that the job was submitted for processing.\n      Returns only jobs submitted before the specified time. Jobs are returned in ascending order,\n      oldest to newest.</p>\n      ",
                "shape_name": "Timestamp"
              },
              "SubmitTimeAfter": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <para>Filters the list of jobs based on the time that the job was submitted for processing.\n      Returns only jobs submitted after the specified time. Jobs are returned in descending order,\n      newest to oldest.</para>\n      ",
                "documentation": "\n         <p>Filters the list of jobs based on the time that the job was submitted for processing.\n      Returns only jobs submitted after the specified time. Jobs are returned in descending order,\n      newest to oldest.</p>\n      ",
                "shape_name": "Timestamp"
              }
            },
            "zonbookDocumentation": "\n         <para>Filters the jobs that are returned. You can filter jobs on their name, status, or the date\n      and time that they were submitted. You can only set one filter at a time.</para>\n      ",
            "documentation": "\n         <p>Filters the jobs that are returned. You can filter jobs on their name, status, or the date\n      and time that they were submitted. You can only set one filter at a time.</p>\n      ",
            "shape_name": "KeyPhrasesDetectionJobFilter"
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <para>Identifies the next page of results to return.</para>\n      ",
            "documentation": "\n         <p>Identifies the next page of results to return.</p>\n      ",
            "shape_name": "String",
            "min_length": 1
          },
          "MaxResults": {
            "type": "integer",
            "zonbookDocumentation": "\n         <para>The maximum number of results to return in each page. The default is 100.</para>\n      ",
            "documentation": "\n         <p>The maximum number of results to return in each page. The default is 100.</p>\n      ",
            "shape_name": "MaxResultsInteger",
            "min_length": 1,
            "max_length": 500
          }
        },
        "shape_name": "ListKeyPhrasesDetectionJobsRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "KeyPhrasesDetectionJobPropertiesList": {
            "type": "list",
            "zonbookDocumentation": "\n         <para>A list containing the properties of each job that is returned.</para>\n      ",
            "documentation": "\n         <p>A list containing the properties of each job that is returned.</p>\n      ",
            "shape_name": "KeyPhrasesDetectionJobPropertiesList",
            "members": {
              "type": "structure",
              "members": {
                "JobId": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <para>The identifier assigned to the key phrases detection job.</para>\n      ",
                  "documentation": "\n         <p>The identifier assigned to the key phrases detection job.</p>\n      ",
                  "shape_name": "JobId",
                  "min_length": 1,
                  "max_length": 32
                },
                "JobName": {
                  "type": "string",
                  "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                  "zonbookDocumentation": "\n         <para>The name that you assigned the key phrases detection job.</para>\n      ",
                  "documentation": "\n         <p>The name that you assigned the key phrases detection job.</p>\n      ",
                  "shape_name": "JobName",
                  "min_length": 1,
                  "max_length": 256
                },
                "JobStatus": {
                  "type": "string",
                  "enum": [
                    "SUBMITTED",
                    "IN_PROGRESS",
                    "COMPLETED",
                    "FAILED",
                    "STOP_REQUESTED",
                    "STOPPED"
                  ],
                  "zonbookDocumentation": "\n         <para>The current status of the key phrases detection job. If the status is <code>FAILED</code>,\n      the <code>Message</code> field shows the reason for the failure.</para>\n      ",
                  "documentation": "\n         <p>The current status of the key phrases detection job. If the status is <code>FAILED</code>,\n      the <code>Message</code> field shows the reason for the failure.</p>\n      ",
                  "shape_name": "JobStatus"
                },
                "Message": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <para>A description of the status of a job.</para>\n      ",
                  "documentation": "\n         <p>A description of the status of a job.</p>\n      ",
                  "shape_name": "AnyLengthString"
                },
                "SubmitTime": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <para>The time that the key phrases detection job was submitted for processing.</para>\n      ",
                  "documentation": "\n         <p>The time that the key phrases detection job was submitted for processing.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "EndTime": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <para>The time that the key phrases detection job completed.</para>\n      ",
                  "documentation": "\n         <p>The time that the key phrases detection job completed.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "InputDataConfig": {
                  "type": "structure",
                  "members": {
                    "S3Uri": {
                      "type": "string",
                      "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                      "zonbookDocumentation": "\n         <simpara>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </simpara>\n         <simpara>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</simpara>\n      ",
                      "documentation": "\n         <p>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </p>\n         <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</p>\n      ",
                      "required": true,
                      "shape_name": "S3Uri",
                      "max_length": 1024
                    },
                    "InputFormat": {
                      "type": "string",
                      "enum": [
                        "ONE_DOC_PER_FILE",
                        "ONE_DOC_PER_LINE"
                      ],
                      "zonbookDocumentation": "\n         <simpara>Specifies how the text in an input file should be processed:</simpara>\n         <itemizedlist>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</simpara>\n            </listitem>\n         </itemizedlist>\n      ",
                      "documentation": "\n         <p>Specifies how the text in an input file should be processed:</p>\n         <ul>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</p>\n            </li>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</p>\n            </li>\n         </ul>\n      ",
                      "shape_name": "InputFormat"
                    }
                  },
                  "zonbookDocumentation": "\n         <para>The input data configuration that you supplied when you created the key phrases detection\n      job.</para>\n      ",
                  "documentation": "\n         <p>The input data configuration that you supplied when you created the key phrases detection\n      job.</p>\n      ",
                  "shape_name": "InputDataConfig"
                },
                "OutputDataConfig": {
                  "type": "structure",
                  "members": {
                    "S3Uri": {
                      "type": "string",
                      "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                      "zonbookDocumentation": "\n         <simpara>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</simpara>\n         <simpara>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</simpara>\n      ",
                      "documentation": "\n         <p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</p>\n         <p>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</p>\n      ",
                      "required": true,
                      "shape_name": "S3Uri",
                      "max_length": 1024
                    }
                  },
                  "zonbookDocumentation": "\n         <para>The output data configuration that you supplied when you created the key phrases detection\n      job.</para>\n      ",
                  "documentation": "\n         <p>The output data configuration that you supplied when you created the key phrases detection\n      job.</p>\n      ",
                  "shape_name": "OutputDataConfig"
                },
                "LanguageCode": {
                  "type": "string",
                  "enum": [
                    "en",
                    "es",
                    "fr",
                    "de",
                    "it",
                    "pt"
                  ],
                  "zonbookDocumentation": "\n         <para>The language code of the input documents.</para>\n      ",
                  "documentation": "\n         <p>The language code of the input documents.</p>\n      ",
                  "shape_name": "LanguageCode"
                },
                "DataAccessRoleArn": {
                  "type": "string",
                  "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                  "zonbookDocumentation": "\n         <para>The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.</para>\n      ",
                  "documentation": "\n         <p>The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.</p>\n      ",
                  "shape_name": "IamRoleArn"
                }
              },
              "zonbookDocumentation": "\n         <para>Provides information about a key phrases detection job.</para>\n      ",
              "documentation": "\n         <p>Provides information about a key phrases detection job.</p>\n      ",
              "shape_name": "KeyPhrasesDetectionJobProperties"
            }
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <para>Identifies the next page of results to return.</para>\n      ",
            "documentation": "\n         <p>Identifies the next page of results to return.</p>\n      ",
            "shape_name": "String",
            "min_length": 1
          }
        },
        "shape_name": "ListKeyPhrasesDetectionJobsResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeds the limit. Resubmit your request later.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeds the limit. Resubmit your request later.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The filter specified for the <code>ListTopicDetectionJobs</code> operation is invalid.\n      Specify a different filter.</simpara>\n      ",
          "documentation": "\n         <p>The filter specified for the <code>ListTopicDetectionJobs</code> operation is invalid.\n      Specify a different filter.</p>\n      ",
          "shape_name": "InvalidFilterException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": "\n         <p>Get a list of key phrase detection jobs that you have submitted.</p>\n      "
    },
    "StopKeyPhrasesDetectionJob": {
      "name": "StopKeyPhrasesDetectionJob",
      "input": {
        "type": "structure",
        "members": {
          "JobId": {
            "type": "string",
            "zonbookDocumentation": "\n         <para>The identifier of the key phrases detection job to stop.</para>\n      ",
            "documentation": "\n         <p>The identifier of the key phrases detection job to stop.</p>\n      ",
            "required": true,
            "shape_name": "JobId",
            "min_length": 1,
            "max_length": 32
          }
        },
        "shape_name": "StopKeyPhrasesDetectionJobRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "JobId": {
            "type": "string",
            "zonbookDocumentation": "\n         <para>The identifier of the key phrases detection job to stop.</para>\n      ",
            "documentation": "\n         <p>The identifier of the key phrases detection job to stop.</p>\n      ",
            "shape_name": "JobId",
            "min_length": 1,
            "max_length": 32
          },
          "JobStatus": {
            "type": "string",
            "enum": [
              "SUBMITTED",
              "IN_PROGRESS",
              "COMPLETED",
              "FAILED",
              "STOP_REQUESTED",
              "STOPPED"
            ],
            "zonbookDocumentation": "\n         <para>Either <code>STOP_REQUESTED</code> if the job is currently running, or\n        <code>STOPPED</code> if the job was previously stopped with the\n        <code>StopKeyPhrasesDetectionJob</code> operation.</para>\n      ",
            "documentation": "\n         <p>Either <code>STOP_REQUESTED</code> if the job is currently running, or\n        <code>STOPPED</code> if the job was previously stopped with the\n        <code>StopKeyPhrasesDetectionJob</code> operation.</p>\n      ",
            "shape_name": "JobStatus"
          }
        },
        "shape_name": "StopKeyPhrasesDetectionJobResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The specified job was not found. Check the job ID and try again.</simpara>\n      ",
          "documentation": "\n         <p>The specified job was not found. Check the job ID and try again.</p>\n      ",
          "shape_name": "JobNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": "\n         <p>Stops a key phrases detection job in progress.</p>\n         <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put\n      into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it\n      is put into the <code>COMPLETED</code> state; otherwise the job is stopped and put into the\n        <code>STOPPED</code> state.</p>\n         <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the\n        <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400\n      Internal Request Exception. </p>\n         <p>When a job is stopped, any documents already processed are written to the output\n      location.</p>\n      "
    },
    "StartEntitiesDetectionJob": {
      "name": "StartEntitiesDetectionJob",
      "input": {
        "type": "structure",
        "members": {
          "InputDataConfig": {
            "type": "structure",
            "members": {
              "S3Uri": {
                "type": "string",
                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                "zonbookDocumentation": "\n         <simpara>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </simpara>\n         <simpara>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</simpara>\n      ",
                "documentation": "\n         <p>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </p>\n         <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</p>\n      ",
                "required": true,
                "shape_name": "S3Uri",
                "max_length": 1024
              },
              "InputFormat": {
                "type": "string",
                "enum": [
                  "ONE_DOC_PER_FILE",
                  "ONE_DOC_PER_LINE"
                ],
                "zonbookDocumentation": "\n         <simpara>Specifies how the text in an input file should be processed:</simpara>\n         <itemizedlist>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</simpara>\n            </listitem>\n         </itemizedlist>\n      ",
                "documentation": "\n         <p>Specifies how the text in an input file should be processed:</p>\n         <ul>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</p>\n            </li>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</p>\n            </li>\n         </ul>\n      ",
                "shape_name": "InputFormat"
              }
            },
            "zonbookDocumentation": "\n         <para>Specifies the format and location of the input data for the job.</para>\n      ",
            "documentation": "\n         <p>Specifies the format and location of the input data for the job.</p>\n      ",
            "required": true,
            "shape_name": "InputDataConfig"
          },
          "OutputDataConfig": {
            "type": "structure",
            "members": {
              "S3Uri": {
                "type": "string",
                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                "zonbookDocumentation": "\n         <simpara>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</simpara>\n         <simpara>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</simpara>\n      ",
                "documentation": "\n         <p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</p>\n         <p>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</p>\n      ",
                "required": true,
                "shape_name": "S3Uri",
                "max_length": 1024
              }
            },
            "zonbookDocumentation": "\n         <para>Specifies where to send the output files.</para>\n      ",
            "documentation": "\n         <p>Specifies where to send the output files.</p>\n      ",
            "required": true,
            "shape_name": "OutputDataConfig"
          },
          "DataAccessRoleArn": {
            "type": "string",
            "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
            "zonbookDocumentation": "\n         <para>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that\n      grants Amazon Comprehend read access to your input data. For more information, see <ulink url=\"https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions\"/>.</para>\n      ",
            "documentation": "\n         <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that\n      grants Amazon Comprehend read access to your input data. For more information, see <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions\">https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions</a>.</p>\n      ",
            "required": true,
            "shape_name": "IamRoleArn"
          },
          "JobName": {
            "type": "string",
            "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
            "zonbookDocumentation": "\n         <para>The identifier of the job.</para>\n      ",
            "documentation": "\n         <p>The identifier of the job.</p>\n      ",
            "shape_name": "JobName",
            "min_length": 1,
            "max_length": 256
          },
          "EntityRecognizerArn": {
            "type": "string",
            "internalonly": true,
            "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:entity-recognizer/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
            "shape_name": "EntityRecognizerArn",
            "documentation": null,
            "max_length": 256
          },
          "LanguageCode": {
            "type": "string",
            "enum": [
              "en",
              "es",
              "fr",
              "de",
              "it",
              "pt"
            ],
            "zonbookDocumentation": "\n         <para>The language of the input documents. You can specify English (\"en\") or Spanish (\"es\"). All\n      documents must be in the same language.</para>\n      ",
            "documentation": "\n         <p>The language of the input documents. You can specify English (\"en\") or Spanish (\"es\"). All\n      documents must be in the same language.</p>\n      ",
            "required": true,
            "shape_name": "LanguageCode"
          },
          "ClientRequestToken": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]+$",
            "zonbookDocumentation": "\n         <para>A unique identifier for the request. If you don't set the client request token, Amazon Comprehend\n      generates one.</para>\n      ",
            "documentation": "\n         <p>A unique identifier for the request. If you don't set the client request token, Amazon Comprehend\n      generates one.</p>\n      ",
            "idempotencyToken": true,
            "shape_name": "ClientRequestTokenString",
            "min_length": 1,
            "max_length": 64
          }
        },
        "shape_name": "StartEntitiesDetectionJobRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "JobId": {
            "type": "string",
            "zonbookDocumentation": "\n         <para>The identifier generated for the job. To get the status of job, use this identifier with\n      the <xref linkend=\"API_DescribeEntitiesDetectionJob\"/> operation.</para>\n      ",
            "documentation": "\n         <p>The identifier generated for the job. To get the status of job, use this identifier with\n      the  operation.</p>\n      ",
            "shape_name": "JobId",
            "min_length": 1,
            "max_length": 32
          },
          "JobStatus": {
            "type": "string",
            "enum": [
              "SUBMITTED",
              "IN_PROGRESS",
              "COMPLETED",
              "FAILED",
              "STOP_REQUESTED",
              "STOPPED"
            ],
            "zonbookDocumentation": "\n         <para>The status of the job. </para>\n         <itemizedlist>\n            <listitem>\n               <para>SUBMITTED - The job has been received and is queued for processing.</para>\n            </listitem>\n            <listitem>\n               <para>IN_PROGRESS - Amazon Comprehend is processing the job.</para>\n            </listitem>\n            <listitem>\n               <para>COMPLETED - The job was successfully completed and the output is available.</para>\n            </listitem>\n            <listitem>\n               <para>FAILED - The job did not complete. To get details, use the <xref linkend=\"API_DescribeEntitiesDetectionJob\"/> operation.</para>\n            </listitem>\n         </itemizedlist>\n      ",
            "documentation": "\n         <p>The status of the job. </p>\n         <ul>\n            <li>\n               <p>SUBMITTED - The job has been received and is queued for processing.</p>\n            </li>\n            <li>\n               <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p>\n            </li>\n            <li>\n               <p>COMPLETED - The job was successfully completed and the output is available.</p>\n            </li>\n            <li>\n               <p>FAILED - The job did not complete. To get details, use the  operation.</p>\n            </li>\n         </ul>\n      ",
            "shape_name": "JobStatus"
          }
        },
        "shape_name": "StartEntitiesDetectionJobResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeds the limit. Resubmit your request later.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeds the limit. Resubmit your request later.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": "\n         <p>Starts an asynchronous entity detection job for a collection of documents. Use the  operation to track the status of a job.</p>\n      "
    },
    "DescribeEntitiesDetectionJob": {
      "name": "DescribeEntitiesDetectionJob",
      "input": {
        "type": "structure",
        "members": {
          "JobId": {
            "type": "string",
            "zonbookDocumentation": "\n         <para>The identifier that Amazon Comprehend generated for the job. The <xref linkend=\"API_StartEntitiesDetectionJob\"/> operation returns this identifier in its\n      response.</para>\n      ",
            "documentation": "\n         <p>The identifier that Amazon Comprehend generated for the job. The  operation returns this identifier in its\n      response.</p>\n      ",
            "required": true,
            "shape_name": "JobId",
            "min_length": 1,
            "max_length": 32
          }
        },
        "shape_name": "DescribeEntitiesDetectionJobRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "EntitiesDetectionJobProperties": {
            "type": "structure",
            "members": {
              "JobId": {
                "type": "string",
                "zonbookDocumentation": "\n         <para>The identifier assigned to the entities detection job.</para>\n      ",
                "documentation": "\n         <p>The identifier assigned to the entities detection job.</p>\n      ",
                "shape_name": "JobId",
                "min_length": 1,
                "max_length": 32
              },
              "JobName": {
                "type": "string",
                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                "zonbookDocumentation": "\n         <para>The name that you assigned the entities detection job.</para>\n      ",
                "documentation": "\n         <p>The name that you assigned the entities detection job.</p>\n      ",
                "shape_name": "JobName",
                "min_length": 1,
                "max_length": 256
              },
              "JobStatus": {
                "type": "string",
                "enum": [
                  "SUBMITTED",
                  "IN_PROGRESS",
                  "COMPLETED",
                  "FAILED",
                  "STOP_REQUESTED",
                  "STOPPED"
                ],
                "zonbookDocumentation": "\n         <para>The current status of the entities detection job. If the status is <code>FAILED</code>,\n      the <code>Message</code> field shows the reason for the failure.</para>\n      ",
                "documentation": "\n         <p>The current status of the entities detection job. If the status is <code>FAILED</code>,\n      the <code>Message</code> field shows the reason for the failure.</p>\n      ",
                "shape_name": "JobStatus"
              },
              "Message": {
                "type": "string",
                "zonbookDocumentation": "\n         <para>A description of the status of a job.</para>\n      ",
                "documentation": "\n         <p>A description of the status of a job.</p>\n      ",
                "shape_name": "AnyLengthString"
              },
              "SubmitTime": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <para>The time that the entities detection job was submitted for processing.</para>\n      ",
                "documentation": "\n         <p>The time that the entities detection job was submitted for processing.</p>\n      ",
                "shape_name": "Timestamp"
              },
              "EndTime": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <para>The time that the entities detection job completed</para>\n      ",
                "documentation": "\n         <p>The time that the entities detection job completed</p>\n      ",
                "shape_name": "Timestamp"
              },
              "EntityRecognizerArn": {
                "type": "string",
                "internalonly": true,
                "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:entity-recognizer/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                "shape_name": "EntityRecognizerArn",
                "documentation": null,
                "max_length": 256
              },
              "InputDataConfig": {
                "type": "structure",
                "members": {
                  "S3Uri": {
                    "type": "string",
                    "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                    "zonbookDocumentation": "\n         <simpara>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </simpara>\n         <simpara>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</simpara>\n      ",
                    "documentation": "\n         <p>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </p>\n         <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</p>\n      ",
                    "required": true,
                    "shape_name": "S3Uri",
                    "max_length": 1024
                  },
                  "InputFormat": {
                    "type": "string",
                    "enum": [
                      "ONE_DOC_PER_FILE",
                      "ONE_DOC_PER_LINE"
                    ],
                    "zonbookDocumentation": "\n         <simpara>Specifies how the text in an input file should be processed:</simpara>\n         <itemizedlist>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</simpara>\n            </listitem>\n         </itemizedlist>\n      ",
                    "documentation": "\n         <p>Specifies how the text in an input file should be processed:</p>\n         <ul>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</p>\n            </li>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</p>\n            </li>\n         </ul>\n      ",
                    "shape_name": "InputFormat"
                  }
                },
                "zonbookDocumentation": "\n         <para>The input data configuration that you supplied when you created the entities detection\n      job.</para>\n      ",
                "documentation": "\n         <p>The input data configuration that you supplied when you created the entities detection\n      job.</p>\n      ",
                "shape_name": "InputDataConfig"
              },
              "OutputDataConfig": {
                "type": "structure",
                "members": {
                  "S3Uri": {
                    "type": "string",
                    "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                    "zonbookDocumentation": "\n         <simpara>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</simpara>\n         <simpara>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</simpara>\n      ",
                    "documentation": "\n         <p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</p>\n         <p>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</p>\n      ",
                    "required": true,
                    "shape_name": "S3Uri",
                    "max_length": 1024
                  }
                },
                "zonbookDocumentation": "\n         <para>The output data configuration that you supplied when you created the entities detection\n      job. </para>\n      ",
                "documentation": "\n         <p>The output data configuration that you supplied when you created the entities detection\n      job. </p>\n      ",
                "shape_name": "OutputDataConfig"
              },
              "LanguageCode": {
                "type": "string",
                "enum": [
                  "en",
                  "es",
                  "fr",
                  "de",
                  "it",
                  "pt"
                ],
                "zonbookDocumentation": "\n         <para>The language code of the input documents.</para>\n      ",
                "documentation": "\n         <p>The language code of the input documents.</p>\n      ",
                "shape_name": "LanguageCode"
              },
              "DataAccessRoleArn": {
                "type": "string",
                "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                "zonbookDocumentation": "\n         <para>The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.</para>\n      ",
                "documentation": "\n         <p>The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.</p>\n      ",
                "shape_name": "IamRoleArn"
              }
            },
            "zonbookDocumentation": "\n         <para>An object that contains the properties associated with an entities detection job.</para>\n      ",
            "documentation": "\n         <p>An object that contains the properties associated with an entities detection job.</p>\n      ",
            "shape_name": "EntitiesDetectionJobProperties"
          }
        },
        "shape_name": "DescribeEntitiesDetectionJobResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The specified job was not found. Check the job ID and try again.</simpara>\n      ",
          "documentation": "\n         <p>The specified job was not found. Check the job ID and try again.</p>\n      ",
          "shape_name": "JobNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeds the limit. Resubmit your request later.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeds the limit. Resubmit your request later.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": "\n         <p>Gets the properties associated with an entities detection job. Use this operation to get\n      the status of a detection job.</p>\n      "
    },
    "ListEntitiesDetectionJobs": {
      "name": "ListEntitiesDetectionJobs",
      "input": {
        "type": "structure",
        "members": {
          "Filter": {
            "type": "structure",
            "members": {
              "JobName": {
                "type": "string",
                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                "zonbookDocumentation": "\n         <para>Filters on the name of the job.</para>\n      ",
                "documentation": "\n         <p>Filters on the name of the job.</p>\n      ",
                "shape_name": "JobName",
                "min_length": 1,
                "max_length": 256
              },
              "JobStatus": {
                "type": "string",
                "enum": [
                  "SUBMITTED",
                  "IN_PROGRESS",
                  "COMPLETED",
                  "FAILED",
                  "STOP_REQUESTED",
                  "STOPPED"
                ],
                "zonbookDocumentation": "\n         <para>Filters the list of jobs based on job status. Returns only jobs with the specified\n      status.</para>\n      ",
                "documentation": "\n         <p>Filters the list of jobs based on job status. Returns only jobs with the specified\n      status.</p>\n      ",
                "shape_name": "JobStatus"
              },
              "SubmitTimeBefore": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <para>Filters the list of jobs based on the time that the job was submitted for processing.\n      Returns only jobs submitted before the specified time. Jobs are returned in ascending order,\n      oldest to newest.</para>\n      ",
                "documentation": "\n         <p>Filters the list of jobs based on the time that the job was submitted for processing.\n      Returns only jobs submitted before the specified time. Jobs are returned in ascending order,\n      oldest to newest.</p>\n      ",
                "shape_name": "Timestamp"
              },
              "SubmitTimeAfter": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <para>Filters the list of jobs based on the time that the job was submitted for processing.\n      Returns only jobs submitted after the specified time. Jobs are returned in descending order,\n      newest to oldest.</para>\n      ",
                "documentation": "\n         <p>Filters the list of jobs based on the time that the job was submitted for processing.\n      Returns only jobs submitted after the specified time. Jobs are returned in descending order,\n      newest to oldest.</p>\n      ",
                "shape_name": "Timestamp"
              }
            },
            "zonbookDocumentation": "\n         <para>Filters the jobs that are returned. You can filter jobs on their name, status, or the date\n      and time that they were submitted. You can only set one filter at a time.</para>\n      ",
            "documentation": "\n         <p>Filters the jobs that are returned. You can filter jobs on their name, status, or the date\n      and time that they were submitted. You can only set one filter at a time.</p>\n      ",
            "shape_name": "EntitiesDetectionJobFilter"
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <para>Identifies the next page of results to return.</para>\n      ",
            "documentation": "\n         <p>Identifies the next page of results to return.</p>\n      ",
            "shape_name": "String",
            "min_length": 1
          },
          "MaxResults": {
            "type": "integer",
            "zonbookDocumentation": "\n         <para>The maximum number of results to return in each page. The default is 100.</para>\n      ",
            "documentation": "\n         <p>The maximum number of results to return in each page. The default is 100.</p>\n      ",
            "shape_name": "MaxResultsInteger",
            "min_length": 1,
            "max_length": 500
          }
        },
        "shape_name": "ListEntitiesDetectionJobsRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "EntitiesDetectionJobPropertiesList": {
            "type": "list",
            "zonbookDocumentation": "\n         <para>A list containing the properties of each job that is returned.</para>\n      ",
            "documentation": "\n         <p>A list containing the properties of each job that is returned.</p>\n      ",
            "shape_name": "EntitiesDetectionJobPropertiesList",
            "members": {
              "type": "structure",
              "members": {
                "JobId": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <para>The identifier assigned to the entities detection job.</para>\n      ",
                  "documentation": "\n         <p>The identifier assigned to the entities detection job.</p>\n      ",
                  "shape_name": "JobId",
                  "min_length": 1,
                  "max_length": 32
                },
                "JobName": {
                  "type": "string",
                  "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                  "zonbookDocumentation": "\n         <para>The name that you assigned the entities detection job.</para>\n      ",
                  "documentation": "\n         <p>The name that you assigned the entities detection job.</p>\n      ",
                  "shape_name": "JobName",
                  "min_length": 1,
                  "max_length": 256
                },
                "JobStatus": {
                  "type": "string",
                  "enum": [
                    "SUBMITTED",
                    "IN_PROGRESS",
                    "COMPLETED",
                    "FAILED",
                    "STOP_REQUESTED",
                    "STOPPED"
                  ],
                  "zonbookDocumentation": "\n         <para>The current status of the entities detection job. If the status is <code>FAILED</code>,\n      the <code>Message</code> field shows the reason for the failure.</para>\n      ",
                  "documentation": "\n         <p>The current status of the entities detection job. If the status is <code>FAILED</code>,\n      the <code>Message</code> field shows the reason for the failure.</p>\n      ",
                  "shape_name": "JobStatus"
                },
                "Message": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <para>A description of the status of a job.</para>\n      ",
                  "documentation": "\n         <p>A description of the status of a job.</p>\n      ",
                  "shape_name": "AnyLengthString"
                },
                "SubmitTime": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <para>The time that the entities detection job was submitted for processing.</para>\n      ",
                  "documentation": "\n         <p>The time that the entities detection job was submitted for processing.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "EndTime": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <para>The time that the entities detection job completed</para>\n      ",
                  "documentation": "\n         <p>The time that the entities detection job completed</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "EntityRecognizerArn": {
                  "type": "string",
                  "internalonly": true,
                  "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:entity-recognizer/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                  "shape_name": "EntityRecognizerArn",
                  "documentation": null,
                  "max_length": 256
                },
                "InputDataConfig": {
                  "type": "structure",
                  "members": {
                    "S3Uri": {
                      "type": "string",
                      "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                      "zonbookDocumentation": "\n         <simpara>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </simpara>\n         <simpara>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</simpara>\n      ",
                      "documentation": "\n         <p>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </p>\n         <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</p>\n      ",
                      "required": true,
                      "shape_name": "S3Uri",
                      "max_length": 1024
                    },
                    "InputFormat": {
                      "type": "string",
                      "enum": [
                        "ONE_DOC_PER_FILE",
                        "ONE_DOC_PER_LINE"
                      ],
                      "zonbookDocumentation": "\n         <simpara>Specifies how the text in an input file should be processed:</simpara>\n         <itemizedlist>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</simpara>\n            </listitem>\n         </itemizedlist>\n      ",
                      "documentation": "\n         <p>Specifies how the text in an input file should be processed:</p>\n         <ul>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</p>\n            </li>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</p>\n            </li>\n         </ul>\n      ",
                      "shape_name": "InputFormat"
                    }
                  },
                  "zonbookDocumentation": "\n         <para>The input data configuration that you supplied when you created the entities detection\n      job.</para>\n      ",
                  "documentation": "\n         <p>The input data configuration that you supplied when you created the entities detection\n      job.</p>\n      ",
                  "shape_name": "InputDataConfig"
                },
                "OutputDataConfig": {
                  "type": "structure",
                  "members": {
                    "S3Uri": {
                      "type": "string",
                      "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                      "zonbookDocumentation": "\n         <simpara>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</simpara>\n         <simpara>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</simpara>\n      ",
                      "documentation": "\n         <p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</p>\n         <p>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</p>\n      ",
                      "required": true,
                      "shape_name": "S3Uri",
                      "max_length": 1024
                    }
                  },
                  "zonbookDocumentation": "\n         <para>The output data configuration that you supplied when you created the entities detection\n      job. </para>\n      ",
                  "documentation": "\n         <p>The output data configuration that you supplied when you created the entities detection\n      job. </p>\n      ",
                  "shape_name": "OutputDataConfig"
                },
                "LanguageCode": {
                  "type": "string",
                  "enum": [
                    "en",
                    "es",
                    "fr",
                    "de",
                    "it",
                    "pt"
                  ],
                  "zonbookDocumentation": "\n         <para>The language code of the input documents.</para>\n      ",
                  "documentation": "\n         <p>The language code of the input documents.</p>\n      ",
                  "shape_name": "LanguageCode"
                },
                "DataAccessRoleArn": {
                  "type": "string",
                  "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                  "zonbookDocumentation": "\n         <para>The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.</para>\n      ",
                  "documentation": "\n         <p>The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.</p>\n      ",
                  "shape_name": "IamRoleArn"
                }
              },
              "zonbookDocumentation": "\n         <para>Provides information about an entities detection job.</para>\n      ",
              "documentation": "\n         <p>Provides information about an entities detection job.</p>\n      ",
              "shape_name": "EntitiesDetectionJobProperties"
            }
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <para>Identifies the next page of results to return.</para>\n      ",
            "documentation": "\n         <p>Identifies the next page of results to return.</p>\n      ",
            "shape_name": "String",
            "min_length": 1
          }
        },
        "shape_name": "ListEntitiesDetectionJobsResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeds the limit. Resubmit your request later.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeds the limit. Resubmit your request later.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The filter specified for the <code>ListTopicDetectionJobs</code> operation is invalid.\n      Specify a different filter.</simpara>\n      ",
          "documentation": "\n         <p>The filter specified for the <code>ListTopicDetectionJobs</code> operation is invalid.\n      Specify a different filter.</p>\n      ",
          "shape_name": "InvalidFilterException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": "\n         <p>Gets a list of the entity detection jobs that you have submitted.</p>\n      "
    },
    "StopEntitiesDetectionJob": {
      "name": "StopEntitiesDetectionJob",
      "input": {
        "type": "structure",
        "members": {
          "JobId": {
            "type": "string",
            "zonbookDocumentation": "\n         <para>The identifier of the entities detection job to stop.</para>\n      ",
            "documentation": "\n         <p>The identifier of the entities detection job to stop.</p>\n      ",
            "required": true,
            "shape_name": "JobId",
            "min_length": 1,
            "max_length": 32
          }
        },
        "shape_name": "StopEntitiesDetectionJobRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "JobId": {
            "type": "string",
            "zonbookDocumentation": "\n         <para>The identifier of the entities detection job to stop.</para>\n      ",
            "documentation": "\n         <p>The identifier of the entities detection job to stop.</p>\n      ",
            "shape_name": "JobId",
            "min_length": 1,
            "max_length": 32
          },
          "JobStatus": {
            "type": "string",
            "enum": [
              "SUBMITTED",
              "IN_PROGRESS",
              "COMPLETED",
              "FAILED",
              "STOP_REQUESTED",
              "STOPPED"
            ],
            "zonbookDocumentation": "\n         <para>Either <code>STOP_REQUESTED</code> if the job is currently running, or\n        <code>STOPPED</code> if the job was previously stopped with the\n        <code>StopEntitiesDetectionJob</code> operation.</para>\n      ",
            "documentation": "\n         <p>Either <code>STOP_REQUESTED</code> if the job is currently running, or\n        <code>STOPPED</code> if the job was previously stopped with the\n        <code>StopEntitiesDetectionJob</code> operation.</p>\n      ",
            "shape_name": "JobStatus"
          }
        },
        "shape_name": "StopEntitiesDetectionJobResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The specified job was not found. Check the job ID and try again.</simpara>\n      ",
          "documentation": "\n         <p>The specified job was not found. Check the job ID and try again.</p>\n      ",
          "shape_name": "JobNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": "\n         <p>Stops an entities detection job in progress.</p>\n         <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put\n      into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it\n      is put into the <code>COMPLETED</code> state; otherwise the job is stopped and put into the\n        <code>STOPPED</code> state.</p>\n         <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the\n        <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400\n      Internal Request Exception. </p>\n         <p>When a job is stopped, any documents already processed are written to the output\n      location.</p>\n      "
    },
    "StartDominantLanguageDetectionJob": {
      "name": "StartDominantLanguageDetectionJob",
      "input": {
        "type": "structure",
        "members": {
          "InputDataConfig": {
            "type": "structure",
            "members": {
              "S3Uri": {
                "type": "string",
                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                "zonbookDocumentation": "\n         <simpara>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </simpara>\n         <simpara>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</simpara>\n      ",
                "documentation": "\n         <p>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </p>\n         <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</p>\n      ",
                "required": true,
                "shape_name": "S3Uri",
                "max_length": 1024
              },
              "InputFormat": {
                "type": "string",
                "enum": [
                  "ONE_DOC_PER_FILE",
                  "ONE_DOC_PER_LINE"
                ],
                "zonbookDocumentation": "\n         <simpara>Specifies how the text in an input file should be processed:</simpara>\n         <itemizedlist>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</simpara>\n            </listitem>\n         </itemizedlist>\n      ",
                "documentation": "\n         <p>Specifies how the text in an input file should be processed:</p>\n         <ul>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</p>\n            </li>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</p>\n            </li>\n         </ul>\n      ",
                "shape_name": "InputFormat"
              }
            },
            "zonbookDocumentation": "\n         <para>Specifies the format and location of the input data for the job.</para>\n      ",
            "documentation": "\n         <p>Specifies the format and location of the input data for the job.</p>\n      ",
            "required": true,
            "shape_name": "InputDataConfig"
          },
          "OutputDataConfig": {
            "type": "structure",
            "members": {
              "S3Uri": {
                "type": "string",
                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                "zonbookDocumentation": "\n         <simpara>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</simpara>\n         <simpara>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</simpara>\n      ",
                "documentation": "\n         <p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</p>\n         <p>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</p>\n      ",
                "required": true,
                "shape_name": "S3Uri",
                "max_length": 1024
              }
            },
            "zonbookDocumentation": "\n         <para>Specifies where to send the output files.</para>\n      ",
            "documentation": "\n         <p>Specifies where to send the output files.</p>\n      ",
            "required": true,
            "shape_name": "OutputDataConfig"
          },
          "DataAccessRoleArn": {
            "type": "string",
            "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
            "zonbookDocumentation": "\n         <para>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that\n      grants Amazon Comprehend read access to your input data. For more information, see <ulink url=\"https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions\"/>.</para>\n      ",
            "documentation": "\n         <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that\n      grants Amazon Comprehend read access to your input data. For more information, see <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions\">https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions</a>.</p>\n      ",
            "required": true,
            "shape_name": "IamRoleArn"
          },
          "JobName": {
            "type": "string",
            "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
            "zonbookDocumentation": "\n         <para>An identifier for the job.</para>\n      ",
            "documentation": "\n         <p>An identifier for the job.</p>\n      ",
            "shape_name": "JobName",
            "min_length": 1,
            "max_length": 256
          },
          "ClientRequestToken": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]+$",
            "zonbookDocumentation": "\n         <para>A unique identifier for the request. If you do not set the client request token, Amazon Comprehend\n      generates one.</para>\n      ",
            "documentation": "\n         <p>A unique identifier for the request. If you do not set the client request token, Amazon Comprehend\n      generates one.</p>\n      ",
            "idempotencyToken": true,
            "shape_name": "ClientRequestTokenString",
            "min_length": 1,
            "max_length": 64
          }
        },
        "shape_name": "StartDominantLanguageDetectionJobRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "JobId": {
            "type": "string",
            "zonbookDocumentation": "\n         <para>The identifier generated for the job. To get the status of a job, use this identifier with\n      the <xref linkend=\"API_DescribeDominantLanguageDetectionJob\"/> operation.</para>\n      ",
            "documentation": "\n         <p>The identifier generated for the job. To get the status of a job, use this identifier with\n      the  operation.</p>\n      ",
            "shape_name": "JobId",
            "min_length": 1,
            "max_length": 32
          },
          "JobStatus": {
            "type": "string",
            "enum": [
              "SUBMITTED",
              "IN_PROGRESS",
              "COMPLETED",
              "FAILED",
              "STOP_REQUESTED",
              "STOPPED"
            ],
            "zonbookDocumentation": "\n         <para>The status of the job. </para>\n         <itemizedlist>\n            <listitem>\n               <para>SUBMITTED - The job has been received and is queued for processing.</para>\n            </listitem>\n            <listitem>\n               <para>IN_PROGRESS - Amazon Comprehend is processing the job.</para>\n            </listitem>\n            <listitem>\n               <para>COMPLETED - The job was successfully completed and the output is available.</para>\n            </listitem>\n            <listitem>\n               <para>FAILED - The job did not complete. To get details, use the <xref linkend=\"API_DescribeDominantLanguageDetectionJob\"/> operation.</para>\n            </listitem>\n         </itemizedlist>\n      ",
            "documentation": "\n         <p>The status of the job. </p>\n         <ul>\n            <li>\n               <p>SUBMITTED - The job has been received and is queued for processing.</p>\n            </li>\n            <li>\n               <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p>\n            </li>\n            <li>\n               <p>COMPLETED - The job was successfully completed and the output is available.</p>\n            </li>\n            <li>\n               <p>FAILED - The job did not complete. To get details, use the  operation.</p>\n            </li>\n         </ul>\n      ",
            "shape_name": "JobStatus"
          }
        },
        "shape_name": "StartDominantLanguageDetectionJobResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeds the limit. Resubmit your request later.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeds the limit. Resubmit your request later.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": "\n         <p>Starts an asynchronous dominant language detection job for a collection of documents. Use\n      the  operation to track the status\n      of a job.</p>\n      "
    },
    "DescribeDominantLanguageDetectionJob": {
      "name": "DescribeDominantLanguageDetectionJob",
      "input": {
        "type": "structure",
        "members": {
          "JobId": {
            "type": "string",
            "zonbookDocumentation": "\n         <para>The identifier that Amazon Comprehend generated for the job. The <xref linkend=\"API_StartDominantLanguageDetectionJob\"/> operation returns this identifier in its\n      response.</para>\n      ",
            "documentation": "\n         <p>The identifier that Amazon Comprehend generated for the job. The  operation returns this identifier in its\n      response.</p>\n      ",
            "required": true,
            "shape_name": "JobId",
            "min_length": 1,
            "max_length": 32
          }
        },
        "shape_name": "DescribeDominantLanguageDetectionJobRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "DominantLanguageDetectionJobProperties": {
            "type": "structure",
            "members": {
              "JobId": {
                "type": "string",
                "zonbookDocumentation": "\n         <para>The identifier assigned to the dominant language detection job.</para>\n      ",
                "documentation": "\n         <p>The identifier assigned to the dominant language detection job.</p>\n      ",
                "shape_name": "JobId",
                "min_length": 1,
                "max_length": 32
              },
              "JobName": {
                "type": "string",
                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                "zonbookDocumentation": "\n         <para>The name that you assigned to the dominant language detection job.</para>\n      ",
                "documentation": "\n         <p>The name that you assigned to the dominant language detection job.</p>\n      ",
                "shape_name": "JobName",
                "min_length": 1,
                "max_length": 256
              },
              "JobStatus": {
                "type": "string",
                "enum": [
                  "SUBMITTED",
                  "IN_PROGRESS",
                  "COMPLETED",
                  "FAILED",
                  "STOP_REQUESTED",
                  "STOPPED"
                ],
                "zonbookDocumentation": "\n         <para>The current status of the dominant language detection job. If the status is\n        <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure.</para>\n      ",
                "documentation": "\n         <p>The current status of the dominant language detection job. If the status is\n        <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure.</p>\n      ",
                "shape_name": "JobStatus"
              },
              "Message": {
                "type": "string",
                "zonbookDocumentation": "\n         <para>A description for the status of a job.</para>\n      ",
                "documentation": "\n         <p>A description for the status of a job.</p>\n      ",
                "shape_name": "AnyLengthString"
              },
              "SubmitTime": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <para>The time that the dominant language detection job was submitted for processing.</para>\n      ",
                "documentation": "\n         <p>The time that the dominant language detection job was submitted for processing.</p>\n      ",
                "shape_name": "Timestamp"
              },
              "EndTime": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <para>The time that the dominant language detection job completed.</para>\n      ",
                "documentation": "\n         <p>The time that the dominant language detection job completed.</p>\n      ",
                "shape_name": "Timestamp"
              },
              "InputDataConfig": {
                "type": "structure",
                "members": {
                  "S3Uri": {
                    "type": "string",
                    "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                    "zonbookDocumentation": "\n         <simpara>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </simpara>\n         <simpara>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</simpara>\n      ",
                    "documentation": "\n         <p>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </p>\n         <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</p>\n      ",
                    "required": true,
                    "shape_name": "S3Uri",
                    "max_length": 1024
                  },
                  "InputFormat": {
                    "type": "string",
                    "enum": [
                      "ONE_DOC_PER_FILE",
                      "ONE_DOC_PER_LINE"
                    ],
                    "zonbookDocumentation": "\n         <simpara>Specifies how the text in an input file should be processed:</simpara>\n         <itemizedlist>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</simpara>\n            </listitem>\n         </itemizedlist>\n      ",
                    "documentation": "\n         <p>Specifies how the text in an input file should be processed:</p>\n         <ul>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</p>\n            </li>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</p>\n            </li>\n         </ul>\n      ",
                    "shape_name": "InputFormat"
                  }
                },
                "zonbookDocumentation": "\n         <para>The input data configuration that you supplied when you created the dominant language\n      detection job.</para>\n      ",
                "documentation": "\n         <p>The input data configuration that you supplied when you created the dominant language\n      detection job.</p>\n      ",
                "shape_name": "InputDataConfig"
              },
              "OutputDataConfig": {
                "type": "structure",
                "members": {
                  "S3Uri": {
                    "type": "string",
                    "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                    "zonbookDocumentation": "\n         <simpara>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</simpara>\n         <simpara>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</simpara>\n      ",
                    "documentation": "\n         <p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</p>\n         <p>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</p>\n      ",
                    "required": true,
                    "shape_name": "S3Uri",
                    "max_length": 1024
                  }
                },
                "zonbookDocumentation": "\n         <para>The output data configuration that you supplied when you created the dominant language\n      detection job.</para>\n      ",
                "documentation": "\n         <p>The output data configuration that you supplied when you created the dominant language\n      detection job.</p>\n      ",
                "shape_name": "OutputDataConfig"
              },
              "DataAccessRoleArn": {
                "type": "string",
                "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                "zonbookDocumentation": "\n         <para>The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.</para>\n      ",
                "documentation": "\n         <p>The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.</p>\n      ",
                "shape_name": "IamRoleArn"
              }
            },
            "zonbookDocumentation": "\n         <para>An object that contains the properties associated with a dominant language detection\n      job.</para>\n      ",
            "documentation": "\n         <p>An object that contains the properties associated with a dominant language detection\n      job.</p>\n      ",
            "shape_name": "DominantLanguageDetectionJobProperties"
          }
        },
        "shape_name": "DescribeDominantLanguageDetectionJobResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The specified job was not found. Check the job ID and try again.</simpara>\n      ",
          "documentation": "\n         <p>The specified job was not found. Check the job ID and try again.</p>\n      ",
          "shape_name": "JobNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeds the limit. Resubmit your request later.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeds the limit. Resubmit your request later.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": "\n         <p>Gets the properties associated with a dominant language detection job. Use this operation\n      to get the status of a detection job.</p>\n      "
    },
    "ListDominantLanguageDetectionJobs": {
      "name": "ListDominantLanguageDetectionJobs",
      "input": {
        "type": "structure",
        "members": {
          "Filter": {
            "type": "structure",
            "members": {
              "JobName": {
                "type": "string",
                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                "zonbookDocumentation": "\n         <para>Filters on the name of the job.</para>\n      ",
                "documentation": "\n         <p>Filters on the name of the job.</p>\n      ",
                "shape_name": "JobName",
                "min_length": 1,
                "max_length": 256
              },
              "JobStatus": {
                "type": "string",
                "enum": [
                  "SUBMITTED",
                  "IN_PROGRESS",
                  "COMPLETED",
                  "FAILED",
                  "STOP_REQUESTED",
                  "STOPPED"
                ],
                "zonbookDocumentation": "\n         <para>Filters the list of jobs based on job status. Returns only jobs with the specified\n      status.</para>\n      ",
                "documentation": "\n         <p>Filters the list of jobs based on job status. Returns only jobs with the specified\n      status.</p>\n      ",
                "shape_name": "JobStatus"
              },
              "SubmitTimeBefore": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <para>Filters the list of jobs based on the time that the job was submitted for processing.\n      Returns only jobs submitted before the specified time. Jobs are returned in ascending order,\n      oldest to newest.</para>\n      ",
                "documentation": "\n         <p>Filters the list of jobs based on the time that the job was submitted for processing.\n      Returns only jobs submitted before the specified time. Jobs are returned in ascending order,\n      oldest to newest.</p>\n      ",
                "shape_name": "Timestamp"
              },
              "SubmitTimeAfter": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <para>Filters the list of jobs based on the time that the job was submitted for processing.\n      Returns only jobs submitted after the specified time. Jobs are returned in descending order,\n      newest to oldest.</para>\n      ",
                "documentation": "\n         <p>Filters the list of jobs based on the time that the job was submitted for processing.\n      Returns only jobs submitted after the specified time. Jobs are returned in descending order,\n      newest to oldest.</p>\n      ",
                "shape_name": "Timestamp"
              }
            },
            "zonbookDocumentation": "\n         <para>Filters that jobs that are returned. You can filter jobs on their name, status, or the\n      date and time that they were submitted. You can only set one filter at a time.</para>\n      ",
            "documentation": "\n         <p>Filters that jobs that are returned. You can filter jobs on their name, status, or the\n      date and time that they were submitted. You can only set one filter at a time.</p>\n      ",
            "shape_name": "DominantLanguageDetectionJobFilter"
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <para>Identifies the next page of results to return.</para>\n      ",
            "documentation": "\n         <p>Identifies the next page of results to return.</p>\n      ",
            "shape_name": "String",
            "min_length": 1
          },
          "MaxResults": {
            "type": "integer",
            "zonbookDocumentation": "\n         <para>The maximum number of results to return in each page. The default is 100.</para>\n      ",
            "documentation": "\n         <p>The maximum number of results to return in each page. The default is 100.</p>\n      ",
            "shape_name": "MaxResultsInteger",
            "min_length": 1,
            "max_length": 500
          }
        },
        "shape_name": "ListDominantLanguageDetectionJobsRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "DominantLanguageDetectionJobPropertiesList": {
            "type": "list",
            "zonbookDocumentation": "\n         <para>A list containing the properties of each job that is returned.</para>\n      ",
            "documentation": "\n         <p>A list containing the properties of each job that is returned.</p>\n      ",
            "shape_name": "DominantLanguageDetectionJobPropertiesList",
            "members": {
              "type": "structure",
              "members": {
                "JobId": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <para>The identifier assigned to the dominant language detection job.</para>\n      ",
                  "documentation": "\n         <p>The identifier assigned to the dominant language detection job.</p>\n      ",
                  "shape_name": "JobId",
                  "min_length": 1,
                  "max_length": 32
                },
                "JobName": {
                  "type": "string",
                  "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                  "zonbookDocumentation": "\n         <para>The name that you assigned to the dominant language detection job.</para>\n      ",
                  "documentation": "\n         <p>The name that you assigned to the dominant language detection job.</p>\n      ",
                  "shape_name": "JobName",
                  "min_length": 1,
                  "max_length": 256
                },
                "JobStatus": {
                  "type": "string",
                  "enum": [
                    "SUBMITTED",
                    "IN_PROGRESS",
                    "COMPLETED",
                    "FAILED",
                    "STOP_REQUESTED",
                    "STOPPED"
                  ],
                  "zonbookDocumentation": "\n         <para>The current status of the dominant language detection job. If the status is\n        <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure.</para>\n      ",
                  "documentation": "\n         <p>The current status of the dominant language detection job. If the status is\n        <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure.</p>\n      ",
                  "shape_name": "JobStatus"
                },
                "Message": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <para>A description for the status of a job.</para>\n      ",
                  "documentation": "\n         <p>A description for the status of a job.</p>\n      ",
                  "shape_name": "AnyLengthString"
                },
                "SubmitTime": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <para>The time that the dominant language detection job was submitted for processing.</para>\n      ",
                  "documentation": "\n         <p>The time that the dominant language detection job was submitted for processing.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "EndTime": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <para>The time that the dominant language detection job completed.</para>\n      ",
                  "documentation": "\n         <p>The time that the dominant language detection job completed.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "InputDataConfig": {
                  "type": "structure",
                  "members": {
                    "S3Uri": {
                      "type": "string",
                      "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                      "zonbookDocumentation": "\n         <simpara>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </simpara>\n         <simpara>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</simpara>\n      ",
                      "documentation": "\n         <p>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </p>\n         <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</p>\n      ",
                      "required": true,
                      "shape_name": "S3Uri",
                      "max_length": 1024
                    },
                    "InputFormat": {
                      "type": "string",
                      "enum": [
                        "ONE_DOC_PER_FILE",
                        "ONE_DOC_PER_LINE"
                      ],
                      "zonbookDocumentation": "\n         <simpara>Specifies how the text in an input file should be processed:</simpara>\n         <itemizedlist>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</simpara>\n            </listitem>\n         </itemizedlist>\n      ",
                      "documentation": "\n         <p>Specifies how the text in an input file should be processed:</p>\n         <ul>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</p>\n            </li>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</p>\n            </li>\n         </ul>\n      ",
                      "shape_name": "InputFormat"
                    }
                  },
                  "zonbookDocumentation": "\n         <para>The input data configuration that you supplied when you created the dominant language\n      detection job.</para>\n      ",
                  "documentation": "\n         <p>The input data configuration that you supplied when you created the dominant language\n      detection job.</p>\n      ",
                  "shape_name": "InputDataConfig"
                },
                "OutputDataConfig": {
                  "type": "structure",
                  "members": {
                    "S3Uri": {
                      "type": "string",
                      "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                      "zonbookDocumentation": "\n         <simpara>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</simpara>\n         <simpara>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</simpara>\n      ",
                      "documentation": "\n         <p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</p>\n         <p>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</p>\n      ",
                      "required": true,
                      "shape_name": "S3Uri",
                      "max_length": 1024
                    }
                  },
                  "zonbookDocumentation": "\n         <para>The output data configuration that you supplied when you created the dominant language\n      detection job.</para>\n      ",
                  "documentation": "\n         <p>The output data configuration that you supplied when you created the dominant language\n      detection job.</p>\n      ",
                  "shape_name": "OutputDataConfig"
                },
                "DataAccessRoleArn": {
                  "type": "string",
                  "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                  "zonbookDocumentation": "\n         <para>The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.</para>\n      ",
                  "documentation": "\n         <p>The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.</p>\n      ",
                  "shape_name": "IamRoleArn"
                }
              },
              "zonbookDocumentation": "\n         <para>Provides information about a dominant language detection job.</para>\n      ",
              "documentation": "\n         <p>Provides information about a dominant language detection job.</p>\n      ",
              "shape_name": "DominantLanguageDetectionJobProperties"
            }
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <para>Identifies the next page of results to return.</para>\n      ",
            "documentation": "\n         <p>Identifies the next page of results to return.</p>\n      ",
            "shape_name": "String",
            "min_length": 1
          }
        },
        "shape_name": "ListDominantLanguageDetectionJobsResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeds the limit. Resubmit your request later.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeds the limit. Resubmit your request later.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The filter specified for the <code>ListTopicDetectionJobs</code> operation is invalid.\n      Specify a different filter.</simpara>\n      ",
          "documentation": "\n         <p>The filter specified for the <code>ListTopicDetectionJobs</code> operation is invalid.\n      Specify a different filter.</p>\n      ",
          "shape_name": "InvalidFilterException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": "\n         <p>Gets a list of the dominant language detection jobs that you have submitted.</p>\n      "
    },
    "StopDominantLanguageDetectionJob": {
      "name": "StopDominantLanguageDetectionJob",
      "input": {
        "type": "structure",
        "members": {
          "JobId": {
            "type": "string",
            "zonbookDocumentation": "\n         <para>The identifier of the dominant language detection job to stop.</para>\n      ",
            "documentation": "\n         <p>The identifier of the dominant language detection job to stop.</p>\n      ",
            "required": true,
            "shape_name": "JobId",
            "min_length": 1,
            "max_length": 32
          }
        },
        "shape_name": "StopDominantLanguageDetectionJobRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "JobId": {
            "type": "string",
            "zonbookDocumentation": "\n         <para>The identifier of the dominant language detection job to stop.</para>\n      ",
            "documentation": "\n         <p>The identifier of the dominant language detection job to stop.</p>\n      ",
            "shape_name": "JobId",
            "min_length": 1,
            "max_length": 32
          },
          "JobStatus": {
            "type": "string",
            "enum": [
              "SUBMITTED",
              "IN_PROGRESS",
              "COMPLETED",
              "FAILED",
              "STOP_REQUESTED",
              "STOPPED"
            ],
            "zonbookDocumentation": "\n         <para>Either <code>STOP_REQUESTED</code> if the job is currently running, or\n        <code>STOPPED</code> if the job was previously stopped with the\n        <code>StopDominantLanguageDetectionJob</code> operation.</para>\n      ",
            "documentation": "\n         <p>Either <code>STOP_REQUESTED</code> if the job is currently running, or\n        <code>STOPPED</code> if the job was previously stopped with the\n        <code>StopDominantLanguageDetectionJob</code> operation.</p>\n      ",
            "shape_name": "JobStatus"
          }
        },
        "shape_name": "StopDominantLanguageDetectionJobResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The specified job was not found. Check the job ID and try again.</simpara>\n      ",
          "documentation": "\n         <p>The specified job was not found. Check the job ID and try again.</p>\n      ",
          "shape_name": "JobNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": "\n         <p>Stops a dominant language detection job in progress.</p>\n         <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put\n      into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it\n      is put into the <code>COMPLETED</code> state; otherwise the job is stopped and put into the\n        <code>STOPPED</code> state.</p>\n         <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the\n        <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400\n      Internal Request Exception. </p>\n         <p>When a job is stopped, any documents already processed are written to the output\n      location.</p>\n      "
    },
    "CreateDocumentClassifier": {
      "name": "CreateDocumentClassifier",
      "input": {
        "type": "structure",
        "members": {
          "DocumentClassifierName": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9](-*[a-zA-Z0-9])*",
            "required": true,
            "shape_name": "ComprehendArnName",
            "documentation": null,
            "max_length": 63
          },
          "DataAccessRoleArn": {
            "type": "string",
            "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
            "required": true,
            "shape_name": "IamRoleArn",
            "documentation": null
          },
          "InputDataConfig": {
            "type": "structure",
            "members": {
              "S3Uri": {
                "type": "string",
                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                "required": true,
                "shape_name": "S3Uri",
                "documentation": null,
                "max_length": 1024
              }
            },
            "required": true,
            "shape_name": "DocumentClassifierInputDataConfig",
            "documentation": null
          },
          "ClientRequestToken": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]+$",
            "idempotencyToken": true,
            "shape_name": "ClientRequestTokenString",
            "documentation": null,
            "min_length": 1,
            "max_length": 64
          },
          "LanguageCode": {
            "type": "string",
            "enum": [
              "en",
              "es",
              "fr",
              "de",
              "it",
              "pt"
            ],
            "required": true,
            "shape_name": "LanguageCode",
            "documentation": null
          }
        },
        "shape_name": "CreateDocumentClassifierRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "DocumentClassifierArn": {
            "type": "string",
            "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
            "shape_name": "DocumentClassifierArn",
            "documentation": null,
            "max_length": 256
          }
        },
        "shape_name": "CreateDocumentClassifierResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "shape_name": "ResourceInUseException",
          "documentation": null
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeds the limit. Resubmit your request later.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeds the limit. Resubmit your request later.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Comprehend can't process the language of the input text. For all APIs except\n        <code>DetectDominantLanguage</code>, Amazon Comprehend accepts only English or Spanish text. For the\n        <code>DetectDominantLanguage</code> API, Amazon Comprehend detects 100 languages. For a list of\n      languages, see <xref linkend=\"how-languages\"/>\n         </simpara>\n      ",
          "documentation": "\n         <p>Amazon Comprehend can't process the language of the input text. For all APIs except\n        <code>DetectDominantLanguage</code>, Amazon Comprehend accepts only English or Spanish text. For the\n        <code>DetectDominantLanguage</code> API, Amazon Comprehend detects 100 languages. For a list of\n      languages, see <a>how-languages</a>\n         </p>\n      ",
          "shape_name": "UnsupportedLanguageException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": null
    },
    "DeleteDocumentClassifier": {
      "name": "DeleteDocumentClassifier",
      "input": {
        "type": "structure",
        "members": {
          "DocumentClassifierArn": {
            "type": "string",
            "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
            "required": true,
            "shape_name": "DocumentClassifierArn",
            "documentation": null,
            "max_length": 256
          }
        },
        "shape_name": "DeleteDocumentClassifierRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "DeleteDocumentClassifierResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeds the limit. Resubmit your request later.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeds the limit. Resubmit your request later.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "shape_name": "ResourceNotFoundException",
          "documentation": null
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "shape_name": "ResourceUnavailableException",
          "documentation": null
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "shape_name": "ResourceInUseException",
          "documentation": null
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": null
    },
    "DescribeDocumentClassifier": {
      "name": "DescribeDocumentClassifier",
      "input": {
        "type": "structure",
        "members": {
          "DocumentClassifierArn": {
            "type": "string",
            "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
            "required": true,
            "shape_name": "DocumentClassifierArn",
            "documentation": null,
            "max_length": 256
          }
        },
        "shape_name": "DescribeDocumentClassifierRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "DocumentClassifierProperties": {
            "type": "structure",
            "members": {
              "DocumentClassifierArn": {
                "type": "string",
                "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                "shape_name": "DocumentClassifierArn",
                "documentation": null,
                "max_length": 256
              },
              "LanguageCode": {
                "type": "string",
                "enum": [
                  "en",
                  "es",
                  "fr",
                  "de",
                  "it",
                  "pt"
                ],
                "shape_name": "LanguageCode",
                "documentation": null
              },
              "Status": {
                "type": "string",
                "enum": [
                  "TRAINING",
                  "DELETING",
                  "IN_ERROR",
                  "TRAINED"
                ],
                "shape_name": "ModelStatus",
                "documentation": null
              },
              "Message": {
                "type": "string",
                "shape_name": "AnyLengthString",
                "documentation": null
              },
              "SubmitTime": {
                "type": "timestamp",
                "shape_name": "Timestamp",
                "documentation": null
              },
              "EndTime": {
                "type": "timestamp",
                "shape_name": "Timestamp",
                "documentation": null
              },
              "InputDataConfig": {
                "type": "structure",
                "members": {
                  "S3Uri": {
                    "type": "string",
                    "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                    "required": true,
                    "shape_name": "S3Uri",
                    "documentation": null,
                    "max_length": 1024
                  }
                },
                "shape_name": "DocumentClassifierInputDataConfig",
                "documentation": null
              },
              "ClassifierMetadata": {
                "type": "structure",
                "members": {
                  "NumberOfLabels": {
                    "type": "integer",
                    "shape_name": "Integer",
                    "documentation": null
                  },
                  "NumberOfTrainedDocuments": {
                    "type": "integer",
                    "shape_name": "Integer",
                    "documentation": null
                  },
                  "NumberOfTestDocuments": {
                    "type": "integer",
                    "shape_name": "Integer",
                    "documentation": null
                  },
                  "EvaluationMetrics": {
                    "type": "structure",
                    "members": {
                      "Accuracy": {
                        "type": "double",
                        "shape_name": "Double",
                        "documentation": null
                      },
                      "Precision": {
                        "type": "double",
                        "shape_name": "Double",
                        "documentation": null
                      },
                      "Recall": {
                        "type": "double",
                        "shape_name": "Double",
                        "documentation": null
                      },
                      "F1Score": {
                        "type": "double",
                        "shape_name": "Double",
                        "documentation": null
                      }
                    },
                    "shape_name": "EvaluationMetrics",
                    "documentation": null
                  }
                },
                "shape_name": "ClassifierMetadata",
                "documentation": null
              },
              "DataAccessRoleArn": {
                "type": "string",
                "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                "shape_name": "IamRoleArn",
                "documentation": null
              }
            },
            "shape_name": "DocumentClassifierProperties",
            "documentation": null
          }
        },
        "shape_name": "DescribeDocumentClassifierResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeds the limit. Resubmit your request later.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeds the limit. Resubmit your request later.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "shape_name": "ResourceNotFoundException",
          "documentation": null
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": null
    },
    "ListDocumentClassifiers": {
      "name": "ListDocumentClassifiers",
      "input": {
        "type": "structure",
        "members": {
          "Filter": {
            "type": "structure",
            "members": {
              "Status": {
                "type": "string",
                "enum": [
                  "TRAINING",
                  "DELETING",
                  "IN_ERROR",
                  "TRAINED"
                ],
                "shape_name": "ModelStatus",
                "documentation": null
              },
              "SubmitTimeBefore": {
                "type": "timestamp",
                "shape_name": "Timestamp",
                "documentation": null
              },
              "SubmitTimeAfter": {
                "type": "timestamp",
                "shape_name": "Timestamp",
                "documentation": null
              }
            },
            "shape_name": "DocumentClassifierFilter",
            "documentation": null
          },
          "NextToken": {
            "type": "string",
            "shape_name": "String",
            "documentation": null,
            "min_length": 1
          },
          "MaxResults": {
            "type": "integer",
            "shape_name": "MaxResultsInteger",
            "documentation": null,
            "min_length": 1,
            "max_length": 500
          }
        },
        "shape_name": "ListDocumentClassifiersRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "DocumentClassifierPropertiesList": {
            "type": "list",
            "shape_name": "DocumentClassifierPropertiesList",
            "documentation": null,
            "members": {
              "type": "structure",
              "members": {
                "DocumentClassifierArn": {
                  "type": "string",
                  "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                  "shape_name": "DocumentClassifierArn",
                  "documentation": null,
                  "max_length": 256
                },
                "LanguageCode": {
                  "type": "string",
                  "enum": [
                    "en",
                    "es",
                    "fr",
                    "de",
                    "it",
                    "pt"
                  ],
                  "shape_name": "LanguageCode",
                  "documentation": null
                },
                "Status": {
                  "type": "string",
                  "enum": [
                    "TRAINING",
                    "DELETING",
                    "IN_ERROR",
                    "TRAINED"
                  ],
                  "shape_name": "ModelStatus",
                  "documentation": null
                },
                "Message": {
                  "type": "string",
                  "shape_name": "AnyLengthString",
                  "documentation": null
                },
                "SubmitTime": {
                  "type": "timestamp",
                  "shape_name": "Timestamp",
                  "documentation": null
                },
                "EndTime": {
                  "type": "timestamp",
                  "shape_name": "Timestamp",
                  "documentation": null
                },
                "InputDataConfig": {
                  "type": "structure",
                  "members": {
                    "S3Uri": {
                      "type": "string",
                      "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                      "required": true,
                      "shape_name": "S3Uri",
                      "documentation": null,
                      "max_length": 1024
                    }
                  },
                  "shape_name": "DocumentClassifierInputDataConfig",
                  "documentation": null
                },
                "ClassifierMetadata": {
                  "type": "structure",
                  "members": {
                    "NumberOfLabels": {
                      "type": "integer",
                      "shape_name": "Integer",
                      "documentation": null
                    },
                    "NumberOfTrainedDocuments": {
                      "type": "integer",
                      "shape_name": "Integer",
                      "documentation": null
                    },
                    "NumberOfTestDocuments": {
                      "type": "integer",
                      "shape_name": "Integer",
                      "documentation": null
                    },
                    "EvaluationMetrics": {
                      "type": "structure",
                      "members": {
                        "Accuracy": {
                          "type": "double",
                          "shape_name": "Double",
                          "documentation": null
                        },
                        "Precision": {
                          "type": "double",
                          "shape_name": "Double",
                          "documentation": null
                        },
                        "Recall": {
                          "type": "double",
                          "shape_name": "Double",
                          "documentation": null
                        },
                        "F1Score": {
                          "type": "double",
                          "shape_name": "Double",
                          "documentation": null
                        }
                      },
                      "shape_name": "EvaluationMetrics",
                      "documentation": null
                    }
                  },
                  "shape_name": "ClassifierMetadata",
                  "documentation": null
                },
                "DataAccessRoleArn": {
                  "type": "string",
                  "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                  "shape_name": "IamRoleArn",
                  "documentation": null
                }
              },
              "shape_name": "DocumentClassifierProperties",
              "documentation": null
            }
          },
          "NextToken": {
            "type": "string",
            "shape_name": "String",
            "documentation": null,
            "min_length": 1
          }
        },
        "shape_name": "ListDocumentClassifiersResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeds the limit. Resubmit your request later.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeds the limit. Resubmit your request later.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The filter specified for the <code>ListTopicDetectionJobs</code> operation is invalid.\n      Specify a different filter.</simpara>\n      ",
          "documentation": "\n         <p>The filter specified for the <code>ListTopicDetectionJobs</code> operation is invalid.\n      Specify a different filter.</p>\n      ",
          "shape_name": "InvalidFilterException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": null
    },
    "StartDocumentClassificationJob": {
      "name": "StartDocumentClassificationJob",
      "input": {
        "type": "structure",
        "members": {
          "JobName": {
            "type": "string",
            "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
            "shape_name": "JobName",
            "documentation": null,
            "min_length": 1,
            "max_length": 256
          },
          "DocumentClassifierArn": {
            "type": "string",
            "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
            "required": true,
            "shape_name": "DocumentClassifierArn",
            "documentation": null,
            "max_length": 256
          },
          "InputDataConfig": {
            "type": "structure",
            "members": {
              "S3Uri": {
                "type": "string",
                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                "zonbookDocumentation": "\n         <simpara>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </simpara>\n         <simpara>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</simpara>\n      ",
                "documentation": "\n         <p>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </p>\n         <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</p>\n      ",
                "required": true,
                "shape_name": "S3Uri",
                "max_length": 1024
              },
              "InputFormat": {
                "type": "string",
                "enum": [
                  "ONE_DOC_PER_FILE",
                  "ONE_DOC_PER_LINE"
                ],
                "zonbookDocumentation": "\n         <simpara>Specifies how the text in an input file should be processed:</simpara>\n         <itemizedlist>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</simpara>\n            </listitem>\n         </itemizedlist>\n      ",
                "documentation": "\n         <p>Specifies how the text in an input file should be processed:</p>\n         <ul>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</p>\n            </li>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</p>\n            </li>\n         </ul>\n      ",
                "shape_name": "InputFormat"
              }
            },
            "zonbookDocumentation": "\n         <simpara>The input properties for a topic detection job.</simpara>\n      ",
            "documentation": "\n         <p>The input properties for a topic detection job.</p>\n      ",
            "required": true,
            "shape_name": "InputDataConfig"
          },
          "OutputDataConfig": {
            "type": "structure",
            "members": {
              "S3Uri": {
                "type": "string",
                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                "zonbookDocumentation": "\n         <simpara>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</simpara>\n         <simpara>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</simpara>\n      ",
                "documentation": "\n         <p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</p>\n         <p>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</p>\n      ",
                "required": true,
                "shape_name": "S3Uri",
                "max_length": 1024
              }
            },
            "zonbookDocumentation": "\n         <simpara>Provides configuration parameters for the output of topic detection jobs.</simpara>\n         <simpara/>\n      ",
            "documentation": "\n         <p>Provides configuration parameters for the output of topic detection jobs.</p>\n         <p/>\n      ",
            "required": true,
            "shape_name": "OutputDataConfig"
          },
          "DataAccessRoleArn": {
            "type": "string",
            "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
            "required": true,
            "shape_name": "IamRoleArn",
            "documentation": null
          },
          "ClientRequestToken": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]+$",
            "idempotencyToken": true,
            "shape_name": "ClientRequestTokenString",
            "documentation": null,
            "min_length": 1,
            "max_length": 64
          }
        },
        "shape_name": "StartDocumentClassificationJobRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "JobId": {
            "type": "string",
            "shape_name": "JobId",
            "documentation": null,
            "min_length": 1,
            "max_length": 32
          },
          "JobStatus": {
            "type": "string",
            "enum": [
              "SUBMITTED",
              "IN_PROGRESS",
              "COMPLETED",
              "FAILED",
              "STOP_REQUESTED",
              "STOPPED"
            ],
            "shape_name": "JobStatus",
            "documentation": null
          }
        },
        "shape_name": "StartDocumentClassificationJobResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeds the limit. Resubmit your request later.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeds the limit. Resubmit your request later.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "shape_name": "ResourceNotFoundException",
          "documentation": null
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "shape_name": "ResourceUnavailableException",
          "documentation": null
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": null
    },
    "DescribeDocumentClassificationJob": {
      "name": "DescribeDocumentClassificationJob",
      "input": {
        "type": "structure",
        "members": {
          "JobId": {
            "type": "string",
            "required": true,
            "shape_name": "JobId",
            "documentation": null,
            "min_length": 1,
            "max_length": 32
          }
        },
        "shape_name": "DescribeDocumentClassificationJobRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "DocumentClassificationJobProperties": {
            "type": "structure",
            "members": {
              "JobId": {
                "type": "string",
                "shape_name": "JobId",
                "documentation": null,
                "min_length": 1,
                "max_length": 32
              },
              "JobName": {
                "type": "string",
                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                "shape_name": "JobName",
                "documentation": null,
                "min_length": 1,
                "max_length": 256
              },
              "JobStatus": {
                "type": "string",
                "enum": [
                  "SUBMITTED",
                  "IN_PROGRESS",
                  "COMPLETED",
                  "FAILED",
                  "STOP_REQUESTED",
                  "STOPPED"
                ],
                "shape_name": "JobStatus",
                "documentation": null
              },
              "Message": {
                "type": "string",
                "shape_name": "AnyLengthString",
                "documentation": null
              },
              "SubmitTime": {
                "type": "timestamp",
                "shape_name": "Timestamp",
                "documentation": null
              },
              "EndTime": {
                "type": "timestamp",
                "shape_name": "Timestamp",
                "documentation": null
              },
              "DocumentClassifierArn": {
                "type": "string",
                "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                "shape_name": "DocumentClassifierArn",
                "documentation": null,
                "max_length": 256
              },
              "InputDataConfig": {
                "type": "structure",
                "members": {
                  "S3Uri": {
                    "type": "string",
                    "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                    "zonbookDocumentation": "\n         <simpara>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </simpara>\n         <simpara>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</simpara>\n      ",
                    "documentation": "\n         <p>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </p>\n         <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</p>\n      ",
                    "required": true,
                    "shape_name": "S3Uri",
                    "max_length": 1024
                  },
                  "InputFormat": {
                    "type": "string",
                    "enum": [
                      "ONE_DOC_PER_FILE",
                      "ONE_DOC_PER_LINE"
                    ],
                    "zonbookDocumentation": "\n         <simpara>Specifies how the text in an input file should be processed:</simpara>\n         <itemizedlist>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</simpara>\n            </listitem>\n         </itemizedlist>\n      ",
                    "documentation": "\n         <p>Specifies how the text in an input file should be processed:</p>\n         <ul>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</p>\n            </li>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</p>\n            </li>\n         </ul>\n      ",
                    "shape_name": "InputFormat"
                  }
                },
                "zonbookDocumentation": "\n         <simpara>The input properties for a topic detection job.</simpara>\n      ",
                "documentation": "\n         <p>The input properties for a topic detection job.</p>\n      ",
                "shape_name": "InputDataConfig"
              },
              "OutputDataConfig": {
                "type": "structure",
                "members": {
                  "S3Uri": {
                    "type": "string",
                    "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                    "zonbookDocumentation": "\n         <simpara>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</simpara>\n         <simpara>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</simpara>\n      ",
                    "documentation": "\n         <p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</p>\n         <p>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</p>\n      ",
                    "required": true,
                    "shape_name": "S3Uri",
                    "max_length": 1024
                  }
                },
                "zonbookDocumentation": "\n         <simpara>Provides configuration parameters for the output of topic detection jobs.</simpara>\n         <simpara/>\n      ",
                "documentation": "\n         <p>Provides configuration parameters for the output of topic detection jobs.</p>\n         <p/>\n      ",
                "shape_name": "OutputDataConfig"
              },
              "DataAccessRoleArn": {
                "type": "string",
                "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                "shape_name": "IamRoleArn",
                "documentation": null
              }
            },
            "shape_name": "DocumentClassificationJobProperties",
            "documentation": null
          }
        },
        "shape_name": "DescribeDocumentClassificationJobResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeds the limit. Resubmit your request later.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeds the limit. Resubmit your request later.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "shape_name": "ResourceNotFoundException",
          "documentation": null
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": null
    },
    "ListDocumentClassificationJobs": {
      "name": "ListDocumentClassificationJobs",
      "input": {
        "type": "structure",
        "members": {
          "Filter": {
            "type": "structure",
            "members": {
              "JobName": {
                "type": "string",
                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                "shape_name": "JobName",
                "documentation": null,
                "min_length": 1,
                "max_length": 256
              },
              "JobStatus": {
                "type": "string",
                "enum": [
                  "SUBMITTED",
                  "IN_PROGRESS",
                  "COMPLETED",
                  "FAILED",
                  "STOP_REQUESTED",
                  "STOPPED"
                ],
                "shape_name": "JobStatus",
                "documentation": null
              },
              "SubmitTimeBefore": {
                "type": "timestamp",
                "shape_name": "Timestamp",
                "documentation": null
              },
              "SubmitTimeAfter": {
                "type": "timestamp",
                "shape_name": "Timestamp",
                "documentation": null
              }
            },
            "shape_name": "DocumentClassificationJobFilter",
            "documentation": null
          },
          "NextToken": {
            "type": "string",
            "shape_name": "String",
            "documentation": null,
            "min_length": 1
          },
          "MaxResults": {
            "type": "integer",
            "shape_name": "MaxResultsInteger",
            "documentation": null,
            "min_length": 1,
            "max_length": 500
          }
        },
        "shape_name": "ListDocumentClassificationJobsRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "DocumentClassificationJobPropertiesList": {
            "type": "list",
            "shape_name": "DocumentClassificationJobPropertiesList",
            "documentation": null,
            "members": {
              "type": "structure",
              "members": {
                "JobId": {
                  "type": "string",
                  "shape_name": "JobId",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 32
                },
                "JobName": {
                  "type": "string",
                  "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                  "shape_name": "JobName",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 256
                },
                "JobStatus": {
                  "type": "string",
                  "enum": [
                    "SUBMITTED",
                    "IN_PROGRESS",
                    "COMPLETED",
                    "FAILED",
                    "STOP_REQUESTED",
                    "STOPPED"
                  ],
                  "shape_name": "JobStatus",
                  "documentation": null
                },
                "Message": {
                  "type": "string",
                  "shape_name": "AnyLengthString",
                  "documentation": null
                },
                "SubmitTime": {
                  "type": "timestamp",
                  "shape_name": "Timestamp",
                  "documentation": null
                },
                "EndTime": {
                  "type": "timestamp",
                  "shape_name": "Timestamp",
                  "documentation": null
                },
                "DocumentClassifierArn": {
                  "type": "string",
                  "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                  "shape_name": "DocumentClassifierArn",
                  "documentation": null,
                  "max_length": 256
                },
                "InputDataConfig": {
                  "type": "structure",
                  "members": {
                    "S3Uri": {
                      "type": "string",
                      "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                      "zonbookDocumentation": "\n         <simpara>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </simpara>\n         <simpara>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</simpara>\n      ",
                      "documentation": "\n         <p>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </p>\n         <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</p>\n      ",
                      "required": true,
                      "shape_name": "S3Uri",
                      "max_length": 1024
                    },
                    "InputFormat": {
                      "type": "string",
                      "enum": [
                        "ONE_DOC_PER_FILE",
                        "ONE_DOC_PER_LINE"
                      ],
                      "zonbookDocumentation": "\n         <simpara>Specifies how the text in an input file should be processed:</simpara>\n         <itemizedlist>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</simpara>\n            </listitem>\n         </itemizedlist>\n      ",
                      "documentation": "\n         <p>Specifies how the text in an input file should be processed:</p>\n         <ul>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</p>\n            </li>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</p>\n            </li>\n         </ul>\n      ",
                      "shape_name": "InputFormat"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>The input properties for a topic detection job.</simpara>\n      ",
                  "documentation": "\n         <p>The input properties for a topic detection job.</p>\n      ",
                  "shape_name": "InputDataConfig"
                },
                "OutputDataConfig": {
                  "type": "structure",
                  "members": {
                    "S3Uri": {
                      "type": "string",
                      "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                      "zonbookDocumentation": "\n         <simpara>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</simpara>\n         <simpara>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</simpara>\n      ",
                      "documentation": "\n         <p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</p>\n         <p>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</p>\n      ",
                      "required": true,
                      "shape_name": "S3Uri",
                      "max_length": 1024
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Provides configuration parameters for the output of topic detection jobs.</simpara>\n         <simpara/>\n      ",
                  "documentation": "\n         <p>Provides configuration parameters for the output of topic detection jobs.</p>\n         <p/>\n      ",
                  "shape_name": "OutputDataConfig"
                },
                "DataAccessRoleArn": {
                  "type": "string",
                  "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                  "shape_name": "IamRoleArn",
                  "documentation": null
                }
              },
              "shape_name": "DocumentClassificationJobProperties",
              "documentation": null
            }
          },
          "NextToken": {
            "type": "string",
            "shape_name": "String",
            "documentation": null,
            "min_length": 1
          }
        },
        "shape_name": "ListDocumentClassificationJobsResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeds the limit. Resubmit your request later.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeds the limit. Resubmit your request later.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The filter specified for the <code>ListTopicDetectionJobs</code> operation is invalid.\n      Specify a different filter.</simpara>\n      ",
          "documentation": "\n         <p>The filter specified for the <code>ListTopicDetectionJobs</code> operation is invalid.\n      Specify a different filter.</p>\n      ",
          "shape_name": "InvalidFilterException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": null
    },
    "CreateEntityRecognizer": {
      "name": "CreateEntityRecognizer",
      "input": {
        "type": "structure",
        "members": {
          "RecognizerName": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9](-*[a-zA-Z0-9])*",
            "required": true,
            "shape_name": "ComprehendArnName",
            "documentation": null,
            "max_length": 63
          },
          "DataAccessRoleArn": {
            "type": "string",
            "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
            "required": true,
            "shape_name": "IamRoleArn",
            "documentation": null
          },
          "InputDataConfig": {
            "type": "structure",
            "members": {
              "EntityTypes": {
                "type": "list",
                "required": true,
                "shape_name": "EntityTypesList",
                "documentation": null,
                "min_length": 1,
                "members": {
                  "type": "structure",
                  "members": {
                    "Type": {
                      "type": "string",
                      "pattern": "[_A-Z0-9]+",
                      "required": true,
                      "shape_name": "EntityTypeName",
                      "documentation": null,
                      "max_length": 64
                    }
                  },
                  "shape_name": "EntityTypesListItem",
                  "documentation": null
                }
              },
              "Documents": {
                "type": "structure",
                "members": {
                  "S3Uri": {
                    "type": "string",
                    "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                    "required": true,
                    "shape_name": "S3Uri",
                    "documentation": null,
                    "max_length": 1024
                  }
                },
                "required": true,
                "shape_name": "EntityRecognizerDocuments",
                "documentation": null
              },
              "Annotations": {
                "type": "structure",
                "members": {
                  "S3Uri": {
                    "type": "string",
                    "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                    "required": true,
                    "shape_name": "S3Uri",
                    "documentation": null,
                    "max_length": 1024
                  }
                },
                "shape_name": "EntityRecognizerAnnotations",
                "documentation": null
              },
              "EntityList": {
                "type": "structure",
                "members": {
                  "S3Uri": {
                    "type": "string",
                    "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                    "required": true,
                    "shape_name": "S3Uri",
                    "documentation": null,
                    "max_length": 1024
                  }
                },
                "shape_name": "EntityRecognizerEntityList",
                "documentation": null
              }
            },
            "required": true,
            "shape_name": "EntityRecognizerInputDataConfig",
            "documentation": null
          },
          "OutputDataConfig": {
            "type": "structure",
            "members": {
              "S3Uri": {
                "type": "string",
                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                "required": true,
                "shape_name": "S3Uri",
                "documentation": null,
                "max_length": 1024
              }
            },
            "shape_name": "EntityRecognizerOutputDataConfig",
            "documentation": null
          },
          "ClientRequestToken": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]+$",
            "idempotencyToken": true,
            "shape_name": "ClientRequestTokenString",
            "documentation": null,
            "min_length": 1,
            "max_length": 64
          },
          "LanguageCode": {
            "type": "string",
            "enum": [
              "en",
              "es",
              "fr",
              "de",
              "it",
              "pt"
            ],
            "required": true,
            "shape_name": "LanguageCode",
            "documentation": null
          }
        },
        "shape_name": "CreateEntityRecognizerRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "EntityRecognizerArn": {
            "type": "string",
            "internalonly": true,
            "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:entity-recognizer/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
            "shape_name": "EntityRecognizerArn",
            "documentation": null,
            "max_length": 256
          }
        },
        "shape_name": "CreateEntityRecognizerResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "shape_name": "ResourceInUseException",
          "documentation": null
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeds the limit. Resubmit your request later.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeds the limit. Resubmit your request later.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>Amazon Comprehend can't process the language of the input text. For all APIs except\n        <code>DetectDominantLanguage</code>, Amazon Comprehend accepts only English or Spanish text. For the\n        <code>DetectDominantLanguage</code> API, Amazon Comprehend detects 100 languages. For a list of\n      languages, see <xref linkend=\"how-languages\"/>\n         </simpara>\n      ",
          "documentation": "\n         <p>Amazon Comprehend can't process the language of the input text. For all APIs except\n        <code>DetectDominantLanguage</code>, Amazon Comprehend accepts only English or Spanish text. For the\n        <code>DetectDominantLanguage</code> API, Amazon Comprehend detects 100 languages. For a list of\n      languages, see <a>how-languages</a>\n         </p>\n      ",
          "shape_name": "UnsupportedLanguageException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": null
    },
    "DeleteEntityRecognizer": {
      "name": "DeleteEntityRecognizer",
      "input": {
        "type": "structure",
        "members": {
          "EntityRecognizerArn": {
            "type": "string",
            "internalonly": true,
            "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:entity-recognizer/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
            "required": true,
            "shape_name": "EntityRecognizerArn",
            "documentation": null,
            "max_length": 256
          }
        },
        "shape_name": "DeleteEntityRecognizerRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "DeleteEntityRecognizerResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeds the limit. Resubmit your request later.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeds the limit. Resubmit your request later.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "shape_name": "ResourceNotFoundException",
          "documentation": null
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "shape_name": "ResourceUnavailableException",
          "documentation": null
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "shape_name": "ResourceInUseException",
          "documentation": null
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": null
    },
    "DescribeEntityRecognizer": {
      "name": "DescribeEntityRecognizer",
      "input": {
        "type": "structure",
        "members": {
          "EntityRecognizerArn": {
            "type": "string",
            "internalonly": true,
            "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:entity-recognizer/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
            "required": true,
            "shape_name": "EntityRecognizerArn",
            "documentation": null,
            "max_length": 256
          }
        },
        "shape_name": "DescribeEntityRecognizerRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "EntityRecognizerProperties": {
            "type": "structure",
            "members": {
              "EntityRecognizerArn": {
                "type": "string",
                "internalonly": true,
                "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:entity-recognizer/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                "shape_name": "EntityRecognizerArn",
                "documentation": null,
                "max_length": 256
              },
              "LanguageCode": {
                "type": "string",
                "enum": [
                  "en",
                  "es",
                  "fr",
                  "de",
                  "it",
                  "pt"
                ],
                "shape_name": "LanguageCode",
                "documentation": null
              },
              "Status": {
                "type": "string",
                "enum": [
                  "TRAINING",
                  "DELETING",
                  "IN_ERROR",
                  "TRAINED"
                ],
                "shape_name": "ModelStatus",
                "documentation": null
              },
              "Message": {
                "type": "string",
                "shape_name": "AnyLengthString",
                "documentation": null
              },
              "SubmitTime": {
                "type": "timestamp",
                "shape_name": "Timestamp",
                "documentation": null
              },
              "EndTime": {
                "type": "timestamp",
                "shape_name": "Timestamp",
                "documentation": null
              },
              "InputDataConfig": {
                "type": "structure",
                "members": {
                  "EntityTypes": {
                    "type": "list",
                    "required": true,
                    "shape_name": "EntityTypesList",
                    "documentation": null,
                    "min_length": 1,
                    "members": {
                      "type": "structure",
                      "members": {
                        "Type": {
                          "type": "string",
                          "pattern": "[_A-Z0-9]+",
                          "required": true,
                          "shape_name": "EntityTypeName",
                          "documentation": null,
                          "max_length": 64
                        }
                      },
                      "shape_name": "EntityTypesListItem",
                      "documentation": null
                    }
                  },
                  "Documents": {
                    "type": "structure",
                    "members": {
                      "S3Uri": {
                        "type": "string",
                        "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                        "required": true,
                        "shape_name": "S3Uri",
                        "documentation": null,
                        "max_length": 1024
                      }
                    },
                    "required": true,
                    "shape_name": "EntityRecognizerDocuments",
                    "documentation": null
                  },
                  "Annotations": {
                    "type": "structure",
                    "members": {
                      "S3Uri": {
                        "type": "string",
                        "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                        "required": true,
                        "shape_name": "S3Uri",
                        "documentation": null,
                        "max_length": 1024
                      }
                    },
                    "shape_name": "EntityRecognizerAnnotations",
                    "documentation": null
                  },
                  "EntityList": {
                    "type": "structure",
                    "members": {
                      "S3Uri": {
                        "type": "string",
                        "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                        "required": true,
                        "shape_name": "S3Uri",
                        "documentation": null,
                        "max_length": 1024
                      }
                    },
                    "shape_name": "EntityRecognizerEntityList",
                    "documentation": null
                  }
                },
                "shape_name": "EntityRecognizerInputDataConfig",
                "documentation": null
              },
              "OutputDataConfig": {
                "type": "structure",
                "members": {
                  "S3Uri": {
                    "type": "string",
                    "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                    "required": true,
                    "shape_name": "S3Uri",
                    "documentation": null,
                    "max_length": 1024
                  }
                },
                "shape_name": "EntityRecognizerOutputDataConfig",
                "documentation": null
              },
              "RecognizerMetadata": {
                "type": "structure",
                "members": {
                  "NumberOfTrainedDocuments": {
                    "type": "integer",
                    "shape_name": "Integer",
                    "documentation": null
                  },
                  "NumberOfTestDocuments": {
                    "type": "integer",
                    "shape_name": "Integer",
                    "documentation": null
                  },
                  "EvaluationMetrics": {
                    "type": "structure",
                    "members": {
                      "Accuracy": {
                        "type": "double",
                        "shape_name": "Double",
                        "documentation": null
                      },
                      "Precision": {
                        "type": "double",
                        "shape_name": "Double",
                        "documentation": null
                      },
                      "Recall": {
                        "type": "double",
                        "shape_name": "Double",
                        "documentation": null
                      },
                      "F1Score": {
                        "type": "double",
                        "shape_name": "Double",
                        "documentation": null
                      }
                    },
                    "shape_name": "EvaluationMetrics",
                    "documentation": null
                  },
                  "EntityTypes": {
                    "type": "list",
                    "shape_name": "EntityRecognizerMetadataEntityTypesList",
                    "documentation": null,
                    "members": {
                      "type": "structure",
                      "members": {
                        "Type": {
                          "type": "string",
                          "shape_name": "AnyLengthString",
                          "documentation": null
                        },
                        "EvaluationMetrics": {
                          "type": "structure",
                          "members": {
                            "Accuracy": {
                              "type": "double",
                              "shape_name": "Double",
                              "documentation": null
                            },
                            "Precision": {
                              "type": "double",
                              "shape_name": "Double",
                              "documentation": null
                            },
                            "Recall": {
                              "type": "double",
                              "shape_name": "Double",
                              "documentation": null
                            },
                            "F1Score": {
                              "type": "double",
                              "shape_name": "Double",
                              "documentation": null
                            }
                          },
                          "shape_name": "EvaluationMetrics",
                          "documentation": null
                        }
                      },
                      "shape_name": "EntityRecognizerMetadataEntityTypesListItem",
                      "documentation": null
                    }
                  }
                },
                "shape_name": "EntityRecognizerMetadata",
                "documentation": null
              },
              "DataAccessRoleArn": {
                "type": "string",
                "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                "shape_name": "IamRoleArn",
                "documentation": null
              }
            },
            "shape_name": "EntityRecognizerProperties",
            "documentation": null
          }
        },
        "shape_name": "DescribeEntityRecognizerResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeds the limit. Resubmit your request later.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeds the limit. Resubmit your request later.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "shape_name": "ResourceNotFoundException",
          "documentation": null
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": null
    },
    "ListEntityRecognizers": {
      "name": "ListEntityRecognizers",
      "input": {
        "type": "structure",
        "members": {
          "Filter": {
            "type": "structure",
            "members": {
              "Status": {
                "type": "string",
                "enum": [
                  "TRAINING",
                  "DELETING",
                  "IN_ERROR",
                  "TRAINED"
                ],
                "shape_name": "ModelStatus",
                "documentation": null
              },
              "SubmitTimeBefore": {
                "type": "timestamp",
                "shape_name": "Timestamp",
                "documentation": null
              },
              "SubmitTimeAfter": {
                "type": "timestamp",
                "shape_name": "Timestamp",
                "documentation": null
              }
            },
            "shape_name": "EntityRecognizerFilter",
            "documentation": null
          },
          "NextToken": {
            "type": "string",
            "shape_name": "String",
            "documentation": null,
            "min_length": 1
          },
          "MaxResults": {
            "type": "integer",
            "shape_name": "MaxResultsInteger",
            "documentation": null,
            "min_length": 1,
            "max_length": 500
          }
        },
        "shape_name": "ListEntityRecognizersRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "EntityRecognizerPropertiesList": {
            "type": "list",
            "shape_name": "EntityRecognizerPropertiesList",
            "documentation": null,
            "members": {
              "type": "structure",
              "members": {
                "EntityRecognizerArn": {
                  "type": "string",
                  "internalonly": true,
                  "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:entity-recognizer/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                  "shape_name": "EntityRecognizerArn",
                  "documentation": null,
                  "max_length": 256
                },
                "LanguageCode": {
                  "type": "string",
                  "enum": [
                    "en",
                    "es",
                    "fr",
                    "de",
                    "it",
                    "pt"
                  ],
                  "shape_name": "LanguageCode",
                  "documentation": null
                },
                "Status": {
                  "type": "string",
                  "enum": [
                    "TRAINING",
                    "DELETING",
                    "IN_ERROR",
                    "TRAINED"
                  ],
                  "shape_name": "ModelStatus",
                  "documentation": null
                },
                "Message": {
                  "type": "string",
                  "shape_name": "AnyLengthString",
                  "documentation": null
                },
                "SubmitTime": {
                  "type": "timestamp",
                  "shape_name": "Timestamp",
                  "documentation": null
                },
                "EndTime": {
                  "type": "timestamp",
                  "shape_name": "Timestamp",
                  "documentation": null
                },
                "InputDataConfig": {
                  "type": "structure",
                  "members": {
                    "EntityTypes": {
                      "type": "list",
                      "required": true,
                      "shape_name": "EntityTypesList",
                      "documentation": null,
                      "min_length": 1,
                      "members": {
                        "type": "structure",
                        "members": {
                          "Type": {
                            "type": "string",
                            "pattern": "[_A-Z0-9]+",
                            "required": true,
                            "shape_name": "EntityTypeName",
                            "documentation": null,
                            "max_length": 64
                          }
                        },
                        "shape_name": "EntityTypesListItem",
                        "documentation": null
                      }
                    },
                    "Documents": {
                      "type": "structure",
                      "members": {
                        "S3Uri": {
                          "type": "string",
                          "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                          "required": true,
                          "shape_name": "S3Uri",
                          "documentation": null,
                          "max_length": 1024
                        }
                      },
                      "required": true,
                      "shape_name": "EntityRecognizerDocuments",
                      "documentation": null
                    },
                    "Annotations": {
                      "type": "structure",
                      "members": {
                        "S3Uri": {
                          "type": "string",
                          "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                          "required": true,
                          "shape_name": "S3Uri",
                          "documentation": null,
                          "max_length": 1024
                        }
                      },
                      "shape_name": "EntityRecognizerAnnotations",
                      "documentation": null
                    },
                    "EntityList": {
                      "type": "structure",
                      "members": {
                        "S3Uri": {
                          "type": "string",
                          "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                          "required": true,
                          "shape_name": "S3Uri",
                          "documentation": null,
                          "max_length": 1024
                        }
                      },
                      "shape_name": "EntityRecognizerEntityList",
                      "documentation": null
                    }
                  },
                  "shape_name": "EntityRecognizerInputDataConfig",
                  "documentation": null
                },
                "OutputDataConfig": {
                  "type": "structure",
                  "members": {
                    "S3Uri": {
                      "type": "string",
                      "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                      "required": true,
                      "shape_name": "S3Uri",
                      "documentation": null,
                      "max_length": 1024
                    }
                  },
                  "shape_name": "EntityRecognizerOutputDataConfig",
                  "documentation": null
                },
                "RecognizerMetadata": {
                  "type": "structure",
                  "members": {
                    "NumberOfTrainedDocuments": {
                      "type": "integer",
                      "shape_name": "Integer",
                      "documentation": null
                    },
                    "NumberOfTestDocuments": {
                      "type": "integer",
                      "shape_name": "Integer",
                      "documentation": null
                    },
                    "EvaluationMetrics": {
                      "type": "structure",
                      "members": {
                        "Accuracy": {
                          "type": "double",
                          "shape_name": "Double",
                          "documentation": null
                        },
                        "Precision": {
                          "type": "double",
                          "shape_name": "Double",
                          "documentation": null
                        },
                        "Recall": {
                          "type": "double",
                          "shape_name": "Double",
                          "documentation": null
                        },
                        "F1Score": {
                          "type": "double",
                          "shape_name": "Double",
                          "documentation": null
                        }
                      },
                      "shape_name": "EvaluationMetrics",
                      "documentation": null
                    },
                    "EntityTypes": {
                      "type": "list",
                      "shape_name": "EntityRecognizerMetadataEntityTypesList",
                      "documentation": null,
                      "members": {
                        "type": "structure",
                        "members": {
                          "Type": {
                            "type": "string",
                            "shape_name": "AnyLengthString",
                            "documentation": null
                          },
                          "EvaluationMetrics": {
                            "type": "structure",
                            "members": {
                              "Accuracy": {
                                "type": "double",
                                "shape_name": "Double",
                                "documentation": null
                              },
                              "Precision": {
                                "type": "double",
                                "shape_name": "Double",
                                "documentation": null
                              },
                              "Recall": {
                                "type": "double",
                                "shape_name": "Double",
                                "documentation": null
                              },
                              "F1Score": {
                                "type": "double",
                                "shape_name": "Double",
                                "documentation": null
                              }
                            },
                            "shape_name": "EvaluationMetrics",
                            "documentation": null
                          }
                        },
                        "shape_name": "EntityRecognizerMetadataEntityTypesListItem",
                        "documentation": null
                      }
                    }
                  },
                  "shape_name": "EntityRecognizerMetadata",
                  "documentation": null
                },
                "DataAccessRoleArn": {
                  "type": "string",
                  "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                  "shape_name": "IamRoleArn",
                  "documentation": null
                }
              },
              "shape_name": "EntityRecognizerProperties",
              "documentation": null
            }
          },
          "NextToken": {
            "type": "string",
            "shape_name": "String",
            "documentation": null,
            "min_length": 1
          }
        },
        "shape_name": "ListEntityRecognizersResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeds the limit. Resubmit your request later.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeds the limit. Resubmit your request later.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The filter specified for the <code>ListTopicDetectionJobs</code> operation is invalid.\n      Specify a different filter.</simpara>\n      ",
          "documentation": "\n         <p>The filter specified for the <code>ListTopicDetectionJobs</code> operation is invalid.\n      Specify a different filter.</p>\n      ",
          "shape_name": "InvalidFilterException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": null
    },
    "StartAttributesExtractionJob": {
      "name": "StartAttributesExtractionJob",
      "input": {
        "type": "structure",
        "members": {
          "InputDataConfig": {
            "type": "structure",
            "members": {
              "S3Uri": {
                "type": "string",
                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                "zonbookDocumentation": "\n         <simpara>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </simpara>\n         <simpara>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</simpara>\n      ",
                "documentation": "\n         <p>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </p>\n         <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</p>\n      ",
                "required": true,
                "shape_name": "S3Uri",
                "max_length": 1024
              },
              "InputFormat": {
                "type": "string",
                "enum": [
                  "ONE_DOC_PER_FILE",
                  "ONE_DOC_PER_LINE"
                ],
                "zonbookDocumentation": "\n         <simpara>Specifies how the text in an input file should be processed:</simpara>\n         <itemizedlist>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</simpara>\n            </listitem>\n         </itemizedlist>\n      ",
                "documentation": "\n         <p>Specifies how the text in an input file should be processed:</p>\n         <ul>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</p>\n            </li>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</p>\n            </li>\n         </ul>\n      ",
                "shape_name": "InputFormat"
              }
            },
            "zonbookDocumentation": "\n         <simpara>The input properties for a topic detection job.</simpara>\n      ",
            "documentation": "\n         <p>The input properties for a topic detection job.</p>\n      ",
            "required": true,
            "shape_name": "InputDataConfig"
          },
          "OutputDataConfig": {
            "type": "structure",
            "members": {
              "S3Uri": {
                "type": "string",
                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                "zonbookDocumentation": "\n         <simpara>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</simpara>\n         <simpara>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</simpara>\n      ",
                "documentation": "\n         <p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</p>\n         <p>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</p>\n      ",
                "required": true,
                "shape_name": "S3Uri",
                "max_length": 1024
              }
            },
            "zonbookDocumentation": "\n         <simpara>Provides configuration parameters for the output of topic detection jobs.</simpara>\n         <simpara/>\n      ",
            "documentation": "\n         <p>Provides configuration parameters for the output of topic detection jobs.</p>\n         <p/>\n      ",
            "required": true,
            "shape_name": "OutputDataConfig"
          },
          "DataAccessRoleArn": {
            "type": "string",
            "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
            "required": true,
            "shape_name": "IamRoleArn",
            "documentation": null
          },
          "JobName": {
            "type": "string",
            "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
            "shape_name": "JobName",
            "documentation": null,
            "min_length": 1,
            "max_length": 256
          },
          "LanguageCode": {
            "type": "string",
            "enum": [
              "en",
              "es",
              "fr",
              "de",
              "it",
              "pt"
            ],
            "required": true,
            "shape_name": "LanguageCode",
            "documentation": null
          },
          "ClientRequestToken": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]+$",
            "idempotencyToken": true,
            "shape_name": "ClientRequestTokenString",
            "documentation": null,
            "min_length": 1,
            "max_length": 64
          }
        },
        "shape_name": "StartAttributesExtractionJobRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "JobId": {
            "type": "string",
            "shape_name": "JobId",
            "documentation": null,
            "min_length": 1,
            "max_length": 32
          },
          "JobStatus": {
            "type": "string",
            "enum": [
              "SUBMITTED",
              "IN_PROGRESS",
              "COMPLETED",
              "FAILED",
              "STOP_REQUESTED",
              "STOPPED"
            ],
            "shape_name": "JobStatus",
            "documentation": null
          }
        },
        "shape_name": "StartAttributesExtractionJobResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeds the limit. Resubmit your request later.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeds the limit. Resubmit your request later.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": null
    },
    "DescribeAttributesExtractionJob": {
      "name": "DescribeAttributesExtractionJob",
      "input": {
        "type": "structure",
        "members": {
          "JobId": {
            "type": "string",
            "required": true,
            "shape_name": "JobId",
            "documentation": null,
            "min_length": 1,
            "max_length": 32
          }
        },
        "shape_name": "DescribeAttributesExtractionJobRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "AttributesExtractionJobProperties": {
            "type": "structure",
            "members": {
              "JobId": {
                "type": "string",
                "shape_name": "JobId",
                "documentation": null,
                "min_length": 1,
                "max_length": 32
              },
              "JobName": {
                "type": "string",
                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                "shape_name": "JobName",
                "documentation": null,
                "min_length": 1,
                "max_length": 256
              },
              "JobStatus": {
                "type": "string",
                "enum": [
                  "SUBMITTED",
                  "IN_PROGRESS",
                  "COMPLETED",
                  "FAILED",
                  "STOP_REQUESTED",
                  "STOPPED"
                ],
                "shape_name": "JobStatus",
                "documentation": null
              },
              "Message": {
                "type": "string",
                "shape_name": "AnyLengthString",
                "documentation": null
              },
              "SubmitTime": {
                "type": "timestamp",
                "shape_name": "Timestamp",
                "documentation": null
              },
              "EndTime": {
                "type": "timestamp",
                "shape_name": "Timestamp",
                "documentation": null
              },
              "InputDataConfig": {
                "type": "structure",
                "members": {
                  "S3Uri": {
                    "type": "string",
                    "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                    "zonbookDocumentation": "\n         <simpara>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </simpara>\n         <simpara>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</simpara>\n      ",
                    "documentation": "\n         <p>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </p>\n         <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</p>\n      ",
                    "required": true,
                    "shape_name": "S3Uri",
                    "max_length": 1024
                  },
                  "InputFormat": {
                    "type": "string",
                    "enum": [
                      "ONE_DOC_PER_FILE",
                      "ONE_DOC_PER_LINE"
                    ],
                    "zonbookDocumentation": "\n         <simpara>Specifies how the text in an input file should be processed:</simpara>\n         <itemizedlist>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</simpara>\n            </listitem>\n         </itemizedlist>\n      ",
                    "documentation": "\n         <p>Specifies how the text in an input file should be processed:</p>\n         <ul>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</p>\n            </li>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</p>\n            </li>\n         </ul>\n      ",
                    "shape_name": "InputFormat"
                  }
                },
                "zonbookDocumentation": "\n         <simpara>The input properties for a topic detection job.</simpara>\n      ",
                "documentation": "\n         <p>The input properties for a topic detection job.</p>\n      ",
                "shape_name": "InputDataConfig"
              },
              "OutputDataConfig": {
                "type": "structure",
                "members": {
                  "S3Uri": {
                    "type": "string",
                    "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                    "zonbookDocumentation": "\n         <simpara>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</simpara>\n         <simpara>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</simpara>\n      ",
                    "documentation": "\n         <p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</p>\n         <p>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</p>\n      ",
                    "required": true,
                    "shape_name": "S3Uri",
                    "max_length": 1024
                  }
                },
                "zonbookDocumentation": "\n         <simpara>Provides configuration parameters for the output of topic detection jobs.</simpara>\n         <simpara/>\n      ",
                "documentation": "\n         <p>Provides configuration parameters for the output of topic detection jobs.</p>\n         <p/>\n      ",
                "shape_name": "OutputDataConfig"
              },
              "LanguageCode": {
                "type": "string",
                "enum": [
                  "en",
                  "es",
                  "fr",
                  "de",
                  "it",
                  "pt"
                ],
                "shape_name": "LanguageCode",
                "documentation": null
              },
              "DataAccessRoleArn": {
                "type": "string",
                "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                "shape_name": "IamRoleArn",
                "documentation": null
              }
            },
            "shape_name": "AttributesExtractionJobProperties",
            "documentation": null
          }
        },
        "shape_name": "DescribeAttributesExtractionJobResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The specified job was not found. Check the job ID and try again.</simpara>\n      ",
          "documentation": "\n         <p>The specified job was not found. Check the job ID and try again.</p>\n      ",
          "shape_name": "JobNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeds the limit. Resubmit your request later.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeds the limit. Resubmit your request later.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": null
    },
    "ListAttributesExtractionJobs": {
      "name": "ListAttributesExtractionJobs",
      "input": {
        "type": "structure",
        "members": {
          "Filter": {
            "type": "structure",
            "members": {
              "JobName": {
                "type": "string",
                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                "shape_name": "JobName",
                "documentation": null,
                "min_length": 1,
                "max_length": 256
              },
              "JobStatus": {
                "type": "string",
                "enum": [
                  "SUBMITTED",
                  "IN_PROGRESS",
                  "COMPLETED",
                  "FAILED",
                  "STOP_REQUESTED",
                  "STOPPED"
                ],
                "shape_name": "JobStatus",
                "documentation": null
              },
              "SubmitTimeBefore": {
                "type": "timestamp",
                "shape_name": "Timestamp",
                "documentation": null
              },
              "SubmitTimeAfter": {
                "type": "timestamp",
                "shape_name": "Timestamp",
                "documentation": null
              }
            },
            "shape_name": "AttributesExtractionJobFilter",
            "documentation": null
          },
          "NextToken": {
            "type": "string",
            "shape_name": "String",
            "documentation": null,
            "min_length": 1
          },
          "MaxResults": {
            "type": "integer",
            "shape_name": "MaxResultsInteger",
            "documentation": null,
            "min_length": 1,
            "max_length": 500
          }
        },
        "shape_name": "ListAttributesExtractionJobsRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "AttributesExtractionJobPropertiesList": {
            "type": "list",
            "shape_name": "AttributesExtractionJobPropertiesList",
            "documentation": null,
            "members": {
              "type": "structure",
              "members": {
                "JobId": {
                  "type": "string",
                  "shape_name": "JobId",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 32
                },
                "JobName": {
                  "type": "string",
                  "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                  "shape_name": "JobName",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 256
                },
                "JobStatus": {
                  "type": "string",
                  "enum": [
                    "SUBMITTED",
                    "IN_PROGRESS",
                    "COMPLETED",
                    "FAILED",
                    "STOP_REQUESTED",
                    "STOPPED"
                  ],
                  "shape_name": "JobStatus",
                  "documentation": null
                },
                "Message": {
                  "type": "string",
                  "shape_name": "AnyLengthString",
                  "documentation": null
                },
                "SubmitTime": {
                  "type": "timestamp",
                  "shape_name": "Timestamp",
                  "documentation": null
                },
                "EndTime": {
                  "type": "timestamp",
                  "shape_name": "Timestamp",
                  "documentation": null
                },
                "InputDataConfig": {
                  "type": "structure",
                  "members": {
                    "S3Uri": {
                      "type": "string",
                      "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                      "zonbookDocumentation": "\n         <simpara>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </simpara>\n         <simpara>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</simpara>\n      ",
                      "documentation": "\n         <p>The Amazon S3 URI for the input data. The URI must be in same region as the API\n      endpoint that you are calling. The URI can point to a single input file or it can provide the\n      prefix for a collection of data files. </p>\n         <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n      single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix,\n      Amazon Comprehend uses all of them as input.</p>\n      ",
                      "required": true,
                      "shape_name": "S3Uri",
                      "max_length": 1024
                    },
                    "InputFormat": {
                      "type": "string",
                      "enum": [
                        "ONE_DOC_PER_FILE",
                        "ONE_DOC_PER_LINE"
                      ],
                      "zonbookDocumentation": "\n         <simpara>Specifies how the text in an input file should be processed:</simpara>\n         <itemizedlist>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</simpara>\n            </listitem>\n         </itemizedlist>\n      ",
                      "documentation": "\n         <p>Specifies how the text in an input file should be processed:</p>\n         <ul>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n          this option when you are processing large documents, such as newspaper articles or\n          scientific papers.</p>\n            </li>\n            <li>\n               <p>\n                  <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n          document. Use this option when you are processing many short documents, such as text\n          messages.</p>\n            </li>\n         </ul>\n      ",
                      "shape_name": "InputFormat"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>The input properties for a topic detection job.</simpara>\n      ",
                  "documentation": "\n         <p>The input properties for a topic detection job.</p>\n      ",
                  "shape_name": "InputDataConfig"
                },
                "OutputDataConfig": {
                  "type": "structure",
                  "members": {
                    "S3Uri": {
                      "type": "string",
                      "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                      "zonbookDocumentation": "\n         <simpara>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</simpara>\n         <simpara>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</simpara>\n      ",
                      "documentation": "\n         <p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n      specify the Amazon S3 location where you want to write the output data. The URI must be in the\n      same region as the API endpoint that you are calling. The location is used as the prefix for\n      the actual location of the output file.</p>\n         <p>When the topic detection job is finished, the service creates an output file in a\n      directory specific to the job. The <code>S3Uri</code> field contains the location of the\n      output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n      ouput of the operation.</p>\n      ",
                      "required": true,
                      "shape_name": "S3Uri",
                      "max_length": 1024
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Provides configuration parameters for the output of topic detection jobs.</simpara>\n         <simpara/>\n      ",
                  "documentation": "\n         <p>Provides configuration parameters for the output of topic detection jobs.</p>\n         <p/>\n      ",
                  "shape_name": "OutputDataConfig"
                },
                "LanguageCode": {
                  "type": "string",
                  "enum": [
                    "en",
                    "es",
                    "fr",
                    "de",
                    "it",
                    "pt"
                  ],
                  "shape_name": "LanguageCode",
                  "documentation": null
                },
                "DataAccessRoleArn": {
                  "type": "string",
                  "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                  "shape_name": "IamRoleArn",
                  "documentation": null
                }
              },
              "shape_name": "AttributesExtractionJobProperties",
              "documentation": null
            }
          },
          "NextToken": {
            "type": "string",
            "shape_name": "String",
            "documentation": null,
            "min_length": 1
          }
        },
        "shape_name": "ListAttributesExtractionJobsResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The number of requests exceeds the limit. Resubmit your request later.</simpara>\n      ",
          "documentation": "\n         <p>The number of requests exceeds the limit. Resubmit your request later.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The filter specified for the <code>ListTopicDetectionJobs</code> operation is invalid.\n      Specify a different filter.</simpara>\n      ",
          "documentation": "\n         <p>The filter specified for the <code>ListTopicDetectionJobs</code> operation is invalid.\n      Specify a different filter.</p>\n      ",
          "shape_name": "InvalidFilterException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": null
    },
    "StopAttributesExtractionJob": {
      "name": "StopAttributesExtractionJob",
      "input": {
        "type": "structure",
        "members": {
          "JobId": {
            "type": "string",
            "required": true,
            "shape_name": "JobId",
            "documentation": null,
            "min_length": 1,
            "max_length": 32
          }
        },
        "shape_name": "StopAttributesExtractionJobRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "JobId": {
            "type": "string",
            "shape_name": "JobId",
            "documentation": null,
            "min_length": 1,
            "max_length": 32
          },
          "JobStatus": {
            "type": "string",
            "enum": [
              "SUBMITTED",
              "IN_PROGRESS",
              "COMPLETED",
              "FAILED",
              "STOP_REQUESTED",
              "STOPPED"
            ],
            "shape_name": "JobStatus",
            "documentation": null
          }
        },
        "shape_name": "StopAttributesExtractionJobResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request\n      is\n      invalid.</simpara>\n      ",
          "documentation": "\n         <p>The request\n      is\n      invalid.</p>\n      ",
          "shape_name": "InvalidRequestException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The specified job was not found. Check the job ID and try again.</simpara>\n      ",
          "documentation": "\n         <p>The specified job was not found. Check the job ID and try again.</p>\n      ",
          "shape_name": "JobNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal server error occurred. Retry your request.</simpara>\n      ",
          "documentation": "\n         <p>An internal server error occurred. Retry your request.</p>\n      ",
          "shape_name": "InternalServerException"
        }
      ],
      "documentation": null
    }
  }
}
